
Lab 3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002b88  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000002c  08002c94  08002c94  00012c94  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002cc0  08002cc0  0002004c  2**0
                  CONTENTS
  4 .ARM          00000000  08002cc0  08002cc0  0002004c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002cc0  08002cc0  0002004c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002cc0  08002cc0  00012cc0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002cc4  08002cc4  00012cc4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000004c  20000000  08002cc8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000120  2000004c  08002d14  0002004c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000016c  08002d14  0002016c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002004c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00009d2a  00000000  00000000  00020075  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001a93  00000000  00000000  00029d9f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000ab0  00000000  00000000  0002b838  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000009a8  00000000  00000000  0002c2e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00016d0f  00000000  00000000  0002cc90  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000bbc4  00000000  00000000  0004399f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00082502  00000000  00000000  0004f563  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000d1a65  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002a2c  00000000  00000000  000d1ab8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000004c 	.word	0x2000004c
 8000128:	00000000 	.word	0x00000000
 800012c:	08002c7c 	.word	0x08002c7c

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000050 	.word	0x20000050
 8000148:	08002c7c 	.word	0x08002c7c

0800014c <isButtonPressed>:
int button_flag[NUM_OF_BUTTON] = {0, 0, 0};

int Button[NUM_OF_BUTTON] = {BUTTON1_Pin, BUTTON2_Pin, BUTTON3_Pin};
int TimeOutForKeyPress =  300;

int isButtonPressed(int index){
 800014c:	b480      	push	{r7}
 800014e:	b083      	sub	sp, #12
 8000150:	af00      	add	r7, sp, #0
 8000152:	6078      	str	r0, [r7, #4]
	if(button_flag[index] == 1){
 8000154:	4a09      	ldr	r2, [pc, #36]	; (800017c <isButtonPressed+0x30>)
 8000156:	687b      	ldr	r3, [r7, #4]
 8000158:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800015c:	2b01      	cmp	r3, #1
 800015e:	d106      	bne.n	800016e <isButtonPressed+0x22>
		button_flag[index] = 0;
 8000160:	4a06      	ldr	r2, [pc, #24]	; (800017c <isButtonPressed+0x30>)
 8000162:	687b      	ldr	r3, [r7, #4]
 8000164:	2100      	movs	r1, #0
 8000166:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		return 1;
 800016a:	2301      	movs	r3, #1
 800016c:	e000      	b.n	8000170 <isButtonPressed+0x24>
	}
	return 0;
 800016e:	2300      	movs	r3, #0
}
 8000170:	4618      	mov	r0, r3
 8000172:	370c      	adds	r7, #12
 8000174:	46bd      	mov	sp, r7
 8000176:	bc80      	pop	{r7}
 8000178:	4770      	bx	lr
 800017a:	bf00      	nop
 800017c:	20000068 	.word	0x20000068

08000180 <subKeyProcess>:



void subKeyProcess(int index){
 8000180:	b480      	push	{r7}
 8000182:	b083      	sub	sp, #12
 8000184:	af00      	add	r7, sp, #0
 8000186:	6078      	str	r0, [r7, #4]
	button_flag[index] = 1;
 8000188:	4a04      	ldr	r2, [pc, #16]	; (800019c <subKeyProcess+0x1c>)
 800018a:	687b      	ldr	r3, [r7, #4]
 800018c:	2101      	movs	r1, #1
 800018e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
}
 8000192:	bf00      	nop
 8000194:	370c      	adds	r7, #12
 8000196:	46bd      	mov	sp, r7
 8000198:	bc80      	pop	{r7}
 800019a:	4770      	bx	lr
 800019c:	20000068 	.word	0x20000068

080001a0 <getKeyInput>:

void getKeyInput(){
 80001a0:	b580      	push	{r7, lr}
 80001a2:	b082      	sub	sp, #8
 80001a4:	af00      	add	r7, sp, #0
	for(int index = 0; index < NUM_OF_BUTTON; index++){
 80001a6:	2300      	movs	r3, #0
 80001a8:	607b      	str	r3, [r7, #4]
 80001aa:	e063      	b.n	8000274 <getKeyInput+0xd4>
		KeyReg2[index] = KeyReg1[index];
 80001ac:	4a35      	ldr	r2, [pc, #212]	; (8000284 <getKeyInput+0xe4>)
 80001ae:	687b      	ldr	r3, [r7, #4]
 80001b0:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80001b4:	4934      	ldr	r1, [pc, #208]	; (8000288 <getKeyInput+0xe8>)
 80001b6:	687b      	ldr	r3, [r7, #4]
 80001b8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		KeyReg1[index] = KeyReg0[index];
 80001bc:	4a33      	ldr	r2, [pc, #204]	; (800028c <getKeyInput+0xec>)
 80001be:	687b      	ldr	r3, [r7, #4]
 80001c0:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80001c4:	492f      	ldr	r1, [pc, #188]	; (8000284 <getKeyInput+0xe4>)
 80001c6:	687b      	ldr	r3, [r7, #4]
 80001c8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		KeyReg0[index] = HAL_GPIO_ReadPin(GPIOA, Button[index]);
 80001cc:	4a30      	ldr	r2, [pc, #192]	; (8000290 <getKeyInput+0xf0>)
 80001ce:	687b      	ldr	r3, [r7, #4]
 80001d0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80001d4:	b29b      	uxth	r3, r3
 80001d6:	4619      	mov	r1, r3
 80001d8:	482e      	ldr	r0, [pc, #184]	; (8000294 <getKeyInput+0xf4>)
 80001da:	f001 fd0f 	bl	8001bfc <HAL_GPIO_ReadPin>
 80001de:	4603      	mov	r3, r0
 80001e0:	4619      	mov	r1, r3
 80001e2:	4a2a      	ldr	r2, [pc, #168]	; (800028c <getKeyInput+0xec>)
 80001e4:	687b      	ldr	r3, [r7, #4]
 80001e6:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		if ((KeyReg1[index] == KeyReg0[index]) && (KeyReg1[index] == KeyReg2[index])){
 80001ea:	4a26      	ldr	r2, [pc, #152]	; (8000284 <getKeyInput+0xe4>)
 80001ec:	687b      	ldr	r3, [r7, #4]
 80001ee:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80001f2:	4926      	ldr	r1, [pc, #152]	; (800028c <getKeyInput+0xec>)
 80001f4:	687b      	ldr	r3, [r7, #4]
 80001f6:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80001fa:	429a      	cmp	r2, r3
 80001fc:	d137      	bne.n	800026e <getKeyInput+0xce>
 80001fe:	4a21      	ldr	r2, [pc, #132]	; (8000284 <getKeyInput+0xe4>)
 8000200:	687b      	ldr	r3, [r7, #4]
 8000202:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000206:	4920      	ldr	r1, [pc, #128]	; (8000288 <getKeyInput+0xe8>)
 8000208:	687b      	ldr	r3, [r7, #4]
 800020a:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800020e:	429a      	cmp	r2, r3
 8000210:	d12d      	bne.n	800026e <getKeyInput+0xce>
			if (KeyReg2[index] != KeyReg3[index]){
 8000212:	4a1d      	ldr	r2, [pc, #116]	; (8000288 <getKeyInput+0xe8>)
 8000214:	687b      	ldr	r3, [r7, #4]
 8000216:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800021a:	491f      	ldr	r1, [pc, #124]	; (8000298 <getKeyInput+0xf8>)
 800021c:	687b      	ldr	r3, [r7, #4]
 800021e:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000222:	429a      	cmp	r2, r3
 8000224:	d015      	beq.n	8000252 <getKeyInput+0xb2>
				KeyReg3[index] = KeyReg2[index];
 8000226:	4a18      	ldr	r2, [pc, #96]	; (8000288 <getKeyInput+0xe8>)
 8000228:	687b      	ldr	r3, [r7, #4]
 800022a:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800022e:	491a      	ldr	r1, [pc, #104]	; (8000298 <getKeyInput+0xf8>)
 8000230:	687b      	ldr	r3, [r7, #4]
 8000232:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

				if (KeyReg3[index] == PRESSED_STATE){
 8000236:	4a18      	ldr	r2, [pc, #96]	; (8000298 <getKeyInput+0xf8>)
 8000238:	687b      	ldr	r3, [r7, #4]
 800023a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800023e:	2b00      	cmp	r3, #0
 8000240:	d115      	bne.n	800026e <getKeyInput+0xce>
					TimeOutForKeyPress = 300;
 8000242:	4b16      	ldr	r3, [pc, #88]	; (800029c <getKeyInput+0xfc>)
 8000244:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8000248:	601a      	str	r2, [r3, #0]
					subKeyProcess(index);
 800024a:	6878      	ldr	r0, [r7, #4]
 800024c:	f7ff ff98 	bl	8000180 <subKeyProcess>
 8000250:	e00d      	b.n	800026e <getKeyInput+0xce>
				}
			}
			else{
				TimeOutForKeyPress--;
 8000252:	4b12      	ldr	r3, [pc, #72]	; (800029c <getKeyInput+0xfc>)
 8000254:	681b      	ldr	r3, [r3, #0]
 8000256:	3b01      	subs	r3, #1
 8000258:	4a10      	ldr	r2, [pc, #64]	; (800029c <getKeyInput+0xfc>)
 800025a:	6013      	str	r3, [r2, #0]
				if(TimeOutForKeyPress == 0) KeyReg3[index] = NORMAL_STATE;
 800025c:	4b0f      	ldr	r3, [pc, #60]	; (800029c <getKeyInput+0xfc>)
 800025e:	681b      	ldr	r3, [r3, #0]
 8000260:	2b00      	cmp	r3, #0
 8000262:	d104      	bne.n	800026e <getKeyInput+0xce>
 8000264:	4a0c      	ldr	r2, [pc, #48]	; (8000298 <getKeyInput+0xf8>)
 8000266:	687b      	ldr	r3, [r7, #4]
 8000268:	2101      	movs	r1, #1
 800026a:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	for(int index = 0; index < NUM_OF_BUTTON; index++){
 800026e:	687b      	ldr	r3, [r7, #4]
 8000270:	3301      	adds	r3, #1
 8000272:	607b      	str	r3, [r7, #4]
 8000274:	687b      	ldr	r3, [r7, #4]
 8000276:	2b02      	cmp	r3, #2
 8000278:	dd98      	ble.n	80001ac <getKeyInput+0xc>
			}
		}
	}
}
 800027a:	bf00      	nop
 800027c:	bf00      	nop
 800027e:	3708      	adds	r7, #8
 8000280:	46bd      	mov	sp, r7
 8000282:	bd80      	pop	{r7, pc}
 8000284:	2000000c 	.word	0x2000000c
 8000288:	20000018 	.word	0x20000018
 800028c:	20000000 	.word	0x20000000
 8000290:	20000030 	.word	0x20000030
 8000294:	40010800 	.word	0x40010800
 8000298:	20000024 	.word	0x20000024
 800029c:	2000003c 	.word	0x2000003c

080002a0 <fsm_auto_run>:

#include "fsm_auto.h"

int SEG7_buffer[2] = {0, 0};

void fsm_auto_run(){
 80002a0:	b580      	push	{r7, lr}
 80002a2:	af00      	add	r7, sp, #0
	if(mode == MODE1){
 80002a4:	4b97      	ldr	r3, [pc, #604]	; (8000504 <fsm_auto_run+0x264>)
 80002a6:	681b      	ldr	r3, [r3, #0]
 80002a8:	2b01      	cmp	r3, #1
 80002aa:	f040 8189 	bne.w	80005c0 <fsm_auto_run+0x320>
		switch(west_traffic){
 80002ae:	4b96      	ldr	r3, [pc, #600]	; (8000508 <fsm_auto_run+0x268>)
 80002b0:	681b      	ldr	r3, [r3, #0]
 80002b2:	2b03      	cmp	r3, #3
 80002b4:	d86b      	bhi.n	800038e <fsm_auto_run+0xee>
 80002b6:	a201      	add	r2, pc, #4	; (adr r2, 80002bc <fsm_auto_run+0x1c>)
 80002b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80002bc:	080002cd 	.word	0x080002cd
 80002c0:	080002db 	.word	0x080002db
 80002c4:	08000317 	.word	0x08000317
 80002c8:	08000353 	.word	0x08000353
		case INIT:

			west_traffic = RED_ON;
 80002cc:	4b8e      	ldr	r3, [pc, #568]	; (8000508 <fsm_auto_run+0x268>)
 80002ce:	2201      	movs	r2, #1
 80002d0:	601a      	str	r2, [r3, #0]
			setTimer1(100);
 80002d2:	2064      	movs	r0, #100	; 0x64
 80002d4:	f000 ff86 	bl	80011e4 <setTimer1>
			break;
 80002d8:	e060      	b.n	800039c <fsm_auto_run+0xfc>
		case RED_ON:
			if(timer1_flag == 1){
 80002da:	4b8c      	ldr	r3, [pc, #560]	; (800050c <fsm_auto_run+0x26c>)
 80002dc:	681b      	ldr	r3, [r3, #0]
 80002de:	2b01      	cmp	r3, #1
 80002e0:	d157      	bne.n	8000392 <fsm_auto_run+0xf2>
				enableRED_WEST();
 80002e2:	f000 fc89 	bl	8000bf8 <enableRED_WEST>
				SEG7_buffer[0] = counterRED_WEST;
 80002e6:	4b8a      	ldr	r3, [pc, #552]	; (8000510 <fsm_auto_run+0x270>)
 80002e8:	681b      	ldr	r3, [r3, #0]
 80002ea:	4a8a      	ldr	r2, [pc, #552]	; (8000514 <fsm_auto_run+0x274>)
 80002ec:	6013      	str	r3, [r2, #0]
				counterRED_WEST--;
 80002ee:	4b88      	ldr	r3, [pc, #544]	; (8000510 <fsm_auto_run+0x270>)
 80002f0:	681b      	ldr	r3, [r3, #0]
 80002f2:	3b01      	subs	r3, #1
 80002f4:	4a86      	ldr	r2, [pc, #536]	; (8000510 <fsm_auto_run+0x270>)
 80002f6:	6013      	str	r3, [r2, #0]
				if(counterRED_WEST == INIT){
 80002f8:	4b85      	ldr	r3, [pc, #532]	; (8000510 <fsm_auto_run+0x270>)
 80002fa:	681b      	ldr	r3, [r3, #0]
 80002fc:	2b00      	cmp	r3, #0
 80002fe:	d106      	bne.n	800030e <fsm_auto_run+0x6e>
					counterRED_WEST = AUTO_RED;
 8000300:	4b85      	ldr	r3, [pc, #532]	; (8000518 <fsm_auto_run+0x278>)
 8000302:	681b      	ldr	r3, [r3, #0]
 8000304:	4a82      	ldr	r2, [pc, #520]	; (8000510 <fsm_auto_run+0x270>)
 8000306:	6013      	str	r3, [r2, #0]
					west_traffic = GREEN_ON;
 8000308:	4b7f      	ldr	r3, [pc, #508]	; (8000508 <fsm_auto_run+0x268>)
 800030a:	2202      	movs	r2, #2
 800030c:	601a      	str	r2, [r3, #0]
				}
				setTimer1(100);
 800030e:	2064      	movs	r0, #100	; 0x64
 8000310:	f000 ff68 	bl	80011e4 <setTimer1>
			}
			break;
 8000314:	e03d      	b.n	8000392 <fsm_auto_run+0xf2>
		case GREEN_ON:
			if(timer1_flag == 1){
 8000316:	4b7d      	ldr	r3, [pc, #500]	; (800050c <fsm_auto_run+0x26c>)
 8000318:	681b      	ldr	r3, [r3, #0]
 800031a:	2b01      	cmp	r3, #1
 800031c:	d13b      	bne.n	8000396 <fsm_auto_run+0xf6>
				enableGREEN_WEST();
 800031e:	f000 fc97 	bl	8000c50 <enableGREEN_WEST>
				SEG7_buffer[0] = counterGREEN_WEST;
 8000322:	4b7e      	ldr	r3, [pc, #504]	; (800051c <fsm_auto_run+0x27c>)
 8000324:	681b      	ldr	r3, [r3, #0]
 8000326:	4a7b      	ldr	r2, [pc, #492]	; (8000514 <fsm_auto_run+0x274>)
 8000328:	6013      	str	r3, [r2, #0]
				counterGREEN_WEST--;
 800032a:	4b7c      	ldr	r3, [pc, #496]	; (800051c <fsm_auto_run+0x27c>)
 800032c:	681b      	ldr	r3, [r3, #0]
 800032e:	3b01      	subs	r3, #1
 8000330:	4a7a      	ldr	r2, [pc, #488]	; (800051c <fsm_auto_run+0x27c>)
 8000332:	6013      	str	r3, [r2, #0]
				if(counterGREEN_WEST == INIT){
 8000334:	4b79      	ldr	r3, [pc, #484]	; (800051c <fsm_auto_run+0x27c>)
 8000336:	681b      	ldr	r3, [r3, #0]
 8000338:	2b00      	cmp	r3, #0
 800033a:	d106      	bne.n	800034a <fsm_auto_run+0xaa>
					counterGREEN_WEST = AUTO_GREEN;
 800033c:	4b78      	ldr	r3, [pc, #480]	; (8000520 <fsm_auto_run+0x280>)
 800033e:	681b      	ldr	r3, [r3, #0]
 8000340:	4a76      	ldr	r2, [pc, #472]	; (800051c <fsm_auto_run+0x27c>)
 8000342:	6013      	str	r3, [r2, #0]
					west_traffic = YELLOW_ON;
 8000344:	4b70      	ldr	r3, [pc, #448]	; (8000508 <fsm_auto_run+0x268>)
 8000346:	2203      	movs	r2, #3
 8000348:	601a      	str	r2, [r3, #0]
				}
				setTimer1(100);
 800034a:	2064      	movs	r0, #100	; 0x64
 800034c:	f000 ff4a 	bl	80011e4 <setTimer1>
			}
			break;
 8000350:	e021      	b.n	8000396 <fsm_auto_run+0xf6>
		case YELLOW_ON:
			if(timer1_flag == 1){
 8000352:	4b6e      	ldr	r3, [pc, #440]	; (800050c <fsm_auto_run+0x26c>)
 8000354:	681b      	ldr	r3, [r3, #0]
 8000356:	2b01      	cmp	r3, #1
 8000358:	d11f      	bne.n	800039a <fsm_auto_run+0xfa>
				enableYELLOW_WEST();
 800035a:	f000 fc63 	bl	8000c24 <enableYELLOW_WEST>
				SEG7_buffer[0] = counterYELLOW_WEST;
 800035e:	4b71      	ldr	r3, [pc, #452]	; (8000524 <fsm_auto_run+0x284>)
 8000360:	681b      	ldr	r3, [r3, #0]
 8000362:	4a6c      	ldr	r2, [pc, #432]	; (8000514 <fsm_auto_run+0x274>)
 8000364:	6013      	str	r3, [r2, #0]
				counterYELLOW_WEST--;
 8000366:	4b6f      	ldr	r3, [pc, #444]	; (8000524 <fsm_auto_run+0x284>)
 8000368:	681b      	ldr	r3, [r3, #0]
 800036a:	3b01      	subs	r3, #1
 800036c:	4a6d      	ldr	r2, [pc, #436]	; (8000524 <fsm_auto_run+0x284>)
 800036e:	6013      	str	r3, [r2, #0]
				if(counterYELLOW_WEST == INIT){
 8000370:	4b6c      	ldr	r3, [pc, #432]	; (8000524 <fsm_auto_run+0x284>)
 8000372:	681b      	ldr	r3, [r3, #0]
 8000374:	2b00      	cmp	r3, #0
 8000376:	d106      	bne.n	8000386 <fsm_auto_run+0xe6>
					counterYELLOW_WEST = AUTO_YELLOW;
 8000378:	4b6b      	ldr	r3, [pc, #428]	; (8000528 <fsm_auto_run+0x288>)
 800037a:	681b      	ldr	r3, [r3, #0]
 800037c:	4a69      	ldr	r2, [pc, #420]	; (8000524 <fsm_auto_run+0x284>)
 800037e:	6013      	str	r3, [r2, #0]
					west_traffic = RED_ON;
 8000380:	4b61      	ldr	r3, [pc, #388]	; (8000508 <fsm_auto_run+0x268>)
 8000382:	2201      	movs	r2, #1
 8000384:	601a      	str	r2, [r3, #0]
				}
				setTimer1(100);
 8000386:	2064      	movs	r0, #100	; 0x64
 8000388:	f000 ff2c 	bl	80011e4 <setTimer1>
			}
			break;
 800038c:	e005      	b.n	800039a <fsm_auto_run+0xfa>
		default:
			break;
 800038e:	bf00      	nop
 8000390:	e004      	b.n	800039c <fsm_auto_run+0xfc>
			break;
 8000392:	bf00      	nop
 8000394:	e002      	b.n	800039c <fsm_auto_run+0xfc>
			break;
 8000396:	bf00      	nop
 8000398:	e000      	b.n	800039c <fsm_auto_run+0xfc>
			break;
 800039a:	bf00      	nop
		}

		switch(north_traffic){
 800039c:	4b63      	ldr	r3, [pc, #396]	; (800052c <fsm_auto_run+0x28c>)
 800039e:	681b      	ldr	r3, [r3, #0]
 80003a0:	2b03      	cmp	r3, #3
 80003a2:	d86c      	bhi.n	800047e <fsm_auto_run+0x1de>
 80003a4:	a201      	add	r2, pc, #4	; (adr r2, 80003ac <fsm_auto_run+0x10c>)
 80003a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80003aa:	bf00      	nop
 80003ac:	080003bd 	.word	0x080003bd
 80003b0:	08000443 	.word	0x08000443
 80003b4:	080003cb 	.word	0x080003cb
 80003b8:	08000407 	.word	0x08000407
		case INIT:
			north_traffic = GREEN_ON;
 80003bc:	4b5b      	ldr	r3, [pc, #364]	; (800052c <fsm_auto_run+0x28c>)
 80003be:	2202      	movs	r2, #2
 80003c0:	601a      	str	r2, [r3, #0]
			setTimer2(100);
 80003c2:	2064      	movs	r0, #100	; 0x64
 80003c4:	f000 ff22 	bl	800120c <setTimer2>
			break;
 80003c8:	e060      	b.n	800048c <fsm_auto_run+0x1ec>
		case GREEN_ON:
			if(timer2_flag == 1){
 80003ca:	4b59      	ldr	r3, [pc, #356]	; (8000530 <fsm_auto_run+0x290>)
 80003cc:	681b      	ldr	r3, [r3, #0]
 80003ce:	2b01      	cmp	r3, #1
 80003d0:	d157      	bne.n	8000482 <fsm_auto_run+0x1e2>
				enableGREEN_NORTH();
 80003d2:	f000 fc69 	bl	8000ca8 <enableGREEN_NORTH>
				SEG7_buffer[1] = counterGREEN_NORTH;
 80003d6:	4b57      	ldr	r3, [pc, #348]	; (8000534 <fsm_auto_run+0x294>)
 80003d8:	681b      	ldr	r3, [r3, #0]
 80003da:	4a4e      	ldr	r2, [pc, #312]	; (8000514 <fsm_auto_run+0x274>)
 80003dc:	6053      	str	r3, [r2, #4]
				counterGREEN_NORTH--;
 80003de:	4b55      	ldr	r3, [pc, #340]	; (8000534 <fsm_auto_run+0x294>)
 80003e0:	681b      	ldr	r3, [r3, #0]
 80003e2:	3b01      	subs	r3, #1
 80003e4:	4a53      	ldr	r2, [pc, #332]	; (8000534 <fsm_auto_run+0x294>)
 80003e6:	6013      	str	r3, [r2, #0]
				if(counterGREEN_NORTH == INIT){
 80003e8:	4b52      	ldr	r3, [pc, #328]	; (8000534 <fsm_auto_run+0x294>)
 80003ea:	681b      	ldr	r3, [r3, #0]
 80003ec:	2b00      	cmp	r3, #0
 80003ee:	d106      	bne.n	80003fe <fsm_auto_run+0x15e>
					counterGREEN_NORTH = AUTO_GREEN;
 80003f0:	4b4b      	ldr	r3, [pc, #300]	; (8000520 <fsm_auto_run+0x280>)
 80003f2:	681b      	ldr	r3, [r3, #0]
 80003f4:	4a4f      	ldr	r2, [pc, #316]	; (8000534 <fsm_auto_run+0x294>)
 80003f6:	6013      	str	r3, [r2, #0]
					north_traffic = YELLOW_ON;
 80003f8:	4b4c      	ldr	r3, [pc, #304]	; (800052c <fsm_auto_run+0x28c>)
 80003fa:	2203      	movs	r2, #3
 80003fc:	601a      	str	r2, [r3, #0]
				}
				setTimer2(100);
 80003fe:	2064      	movs	r0, #100	; 0x64
 8000400:	f000 ff04 	bl	800120c <setTimer2>
			}
			break;
 8000404:	e03d      	b.n	8000482 <fsm_auto_run+0x1e2>
		case YELLOW_ON:
			if(timer2_flag == 1){
 8000406:	4b4a      	ldr	r3, [pc, #296]	; (8000530 <fsm_auto_run+0x290>)
 8000408:	681b      	ldr	r3, [r3, #0]
 800040a:	2b01      	cmp	r3, #1
 800040c:	d13b      	bne.n	8000486 <fsm_auto_run+0x1e6>
				enableYELLOW_NORTH();
 800040e:	f000 fc61 	bl	8000cd4 <enableYELLOW_NORTH>
				SEG7_buffer[1] = counterYELLOW_NORTH;
 8000412:	4b49      	ldr	r3, [pc, #292]	; (8000538 <fsm_auto_run+0x298>)
 8000414:	681b      	ldr	r3, [r3, #0]
 8000416:	4a3f      	ldr	r2, [pc, #252]	; (8000514 <fsm_auto_run+0x274>)
 8000418:	6053      	str	r3, [r2, #4]
				counterYELLOW_NORTH--;
 800041a:	4b47      	ldr	r3, [pc, #284]	; (8000538 <fsm_auto_run+0x298>)
 800041c:	681b      	ldr	r3, [r3, #0]
 800041e:	3b01      	subs	r3, #1
 8000420:	4a45      	ldr	r2, [pc, #276]	; (8000538 <fsm_auto_run+0x298>)
 8000422:	6013      	str	r3, [r2, #0]
				if(counterYELLOW_NORTH == INIT){
 8000424:	4b44      	ldr	r3, [pc, #272]	; (8000538 <fsm_auto_run+0x298>)
 8000426:	681b      	ldr	r3, [r3, #0]
 8000428:	2b00      	cmp	r3, #0
 800042a:	d106      	bne.n	800043a <fsm_auto_run+0x19a>
					counterYELLOW_NORTH = AUTO_YELLOW;
 800042c:	4b3e      	ldr	r3, [pc, #248]	; (8000528 <fsm_auto_run+0x288>)
 800042e:	681b      	ldr	r3, [r3, #0]
 8000430:	4a41      	ldr	r2, [pc, #260]	; (8000538 <fsm_auto_run+0x298>)
 8000432:	6013      	str	r3, [r2, #0]
					north_traffic = RED_ON;
 8000434:	4b3d      	ldr	r3, [pc, #244]	; (800052c <fsm_auto_run+0x28c>)
 8000436:	2201      	movs	r2, #1
 8000438:	601a      	str	r2, [r3, #0]
				}
				setTimer2(100);
 800043a:	2064      	movs	r0, #100	; 0x64
 800043c:	f000 fee6 	bl	800120c <setTimer2>
			}
			break;
 8000440:	e021      	b.n	8000486 <fsm_auto_run+0x1e6>
		case RED_ON:
			if(timer2_flag == 1){
 8000442:	4b3b      	ldr	r3, [pc, #236]	; (8000530 <fsm_auto_run+0x290>)
 8000444:	681b      	ldr	r3, [r3, #0]
 8000446:	2b01      	cmp	r3, #1
 8000448:	d11f      	bne.n	800048a <fsm_auto_run+0x1ea>
				enableRED_NORTH();
 800044a:	f000 fc17 	bl	8000c7c <enableRED_NORTH>
				SEG7_buffer[1] = counterRED_NORTH;
 800044e:	4b3b      	ldr	r3, [pc, #236]	; (800053c <fsm_auto_run+0x29c>)
 8000450:	681b      	ldr	r3, [r3, #0]
 8000452:	4a30      	ldr	r2, [pc, #192]	; (8000514 <fsm_auto_run+0x274>)
 8000454:	6053      	str	r3, [r2, #4]
				counterRED_NORTH--;
 8000456:	4b39      	ldr	r3, [pc, #228]	; (800053c <fsm_auto_run+0x29c>)
 8000458:	681b      	ldr	r3, [r3, #0]
 800045a:	3b01      	subs	r3, #1
 800045c:	4a37      	ldr	r2, [pc, #220]	; (800053c <fsm_auto_run+0x29c>)
 800045e:	6013      	str	r3, [r2, #0]
				if(counterRED_NORTH == INIT){
 8000460:	4b36      	ldr	r3, [pc, #216]	; (800053c <fsm_auto_run+0x29c>)
 8000462:	681b      	ldr	r3, [r3, #0]
 8000464:	2b00      	cmp	r3, #0
 8000466:	d106      	bne.n	8000476 <fsm_auto_run+0x1d6>
					counterRED_NORTH = AUTO_RED;
 8000468:	4b2b      	ldr	r3, [pc, #172]	; (8000518 <fsm_auto_run+0x278>)
 800046a:	681b      	ldr	r3, [r3, #0]
 800046c:	4a33      	ldr	r2, [pc, #204]	; (800053c <fsm_auto_run+0x29c>)
 800046e:	6013      	str	r3, [r2, #0]
					north_traffic = GREEN_ON;
 8000470:	4b2e      	ldr	r3, [pc, #184]	; (800052c <fsm_auto_run+0x28c>)
 8000472:	2202      	movs	r2, #2
 8000474:	601a      	str	r2, [r3, #0]
				}
				setTimer2(100);
 8000476:	2064      	movs	r0, #100	; 0x64
 8000478:	f000 fec8 	bl	800120c <setTimer2>
			}
			break;
 800047c:	e005      	b.n	800048a <fsm_auto_run+0x1ea>
		default:
			break;
 800047e:	bf00      	nop
 8000480:	e004      	b.n	800048c <fsm_auto_run+0x1ec>
			break;
 8000482:	bf00      	nop
 8000484:	e002      	b.n	800048c <fsm_auto_run+0x1ec>
			break;
 8000486:	bf00      	nop
 8000488:	e000      	b.n	800048c <fsm_auto_run+0x1ec>
			break;
 800048a:	bf00      	nop
		}

		switch(seg_disp){
 800048c:	4b2c      	ldr	r3, [pc, #176]	; (8000540 <fsm_auto_run+0x2a0>)
 800048e:	681b      	ldr	r3, [r3, #0]
 8000490:	2b02      	cmp	r3, #2
 8000492:	d020      	beq.n	80004d6 <fsm_auto_run+0x236>
 8000494:	2b02      	cmp	r3, #2
 8000496:	dc31      	bgt.n	80004fc <fsm_auto_run+0x25c>
 8000498:	2b00      	cmp	r3, #0
 800049a:	d002      	beq.n	80004a2 <fsm_auto_run+0x202>
 800049c:	2b01      	cmp	r3, #1
 800049e:	d007      	beq.n	80004b0 <fsm_auto_run+0x210>
				seg_disp = SEG1;
				setTimer3(50);
			}
			break;
		default:
			break;
 80004a0:	e02c      	b.n	80004fc <fsm_auto_run+0x25c>
			seg_disp = SEG1;
 80004a2:	4b27      	ldr	r3, [pc, #156]	; (8000540 <fsm_auto_run+0x2a0>)
 80004a4:	2201      	movs	r2, #1
 80004a6:	601a      	str	r2, [r3, #0]
			setTimer3(100);
 80004a8:	2064      	movs	r0, #100	; 0x64
 80004aa:	f000 fec3 	bl	8001234 <setTimer3>
			break;
 80004ae:	e04c      	b.n	800054a <fsm_auto_run+0x2aa>
			if(timer3_flag == 1){
 80004b0:	4b24      	ldr	r3, [pc, #144]	; (8000544 <fsm_auto_run+0x2a4>)
 80004b2:	681b      	ldr	r3, [r3, #0]
 80004b4:	2b01      	cmp	r3, #1
 80004b6:	d123      	bne.n	8000500 <fsm_auto_run+0x260>
				display_chuc(SEG7_buffer[0], SEG7_buffer[1]);
 80004b8:	4b16      	ldr	r3, [pc, #88]	; (8000514 <fsm_auto_run+0x274>)
 80004ba:	681b      	ldr	r3, [r3, #0]
 80004bc:	4a15      	ldr	r2, [pc, #84]	; (8000514 <fsm_auto_run+0x274>)
 80004be:	6852      	ldr	r2, [r2, #4]
 80004c0:	4611      	mov	r1, r2
 80004c2:	4618      	mov	r0, r3
 80004c4:	f000 fcfa 	bl	8000ebc <display_chuc>
				seg_disp = SEG2;
 80004c8:	4b1d      	ldr	r3, [pc, #116]	; (8000540 <fsm_auto_run+0x2a0>)
 80004ca:	2202      	movs	r2, #2
 80004cc:	601a      	str	r2, [r3, #0]
				setTimer3(50);
 80004ce:	2032      	movs	r0, #50	; 0x32
 80004d0:	f000 feb0 	bl	8001234 <setTimer3>
			break;
 80004d4:	e014      	b.n	8000500 <fsm_auto_run+0x260>
			if(timer3_flag == 1){
 80004d6:	4b1b      	ldr	r3, [pc, #108]	; (8000544 <fsm_auto_run+0x2a4>)
 80004d8:	681b      	ldr	r3, [r3, #0]
 80004da:	2b01      	cmp	r3, #1
 80004dc:	d134      	bne.n	8000548 <fsm_auto_run+0x2a8>
				display_don_vi(SEG7_buffer[0], SEG7_buffer[1]);
 80004de:	4b0d      	ldr	r3, [pc, #52]	; (8000514 <fsm_auto_run+0x274>)
 80004e0:	681b      	ldr	r3, [r3, #0]
 80004e2:	4a0c      	ldr	r2, [pc, #48]	; (8000514 <fsm_auto_run+0x274>)
 80004e4:	6852      	ldr	r2, [r2, #4]
 80004e6:	4611      	mov	r1, r2
 80004e8:	4618      	mov	r0, r3
 80004ea:	f000 fd21 	bl	8000f30 <display_don_vi>
				seg_disp = SEG1;
 80004ee:	4b14      	ldr	r3, [pc, #80]	; (8000540 <fsm_auto_run+0x2a0>)
 80004f0:	2201      	movs	r2, #1
 80004f2:	601a      	str	r2, [r3, #0]
				setTimer3(50);
 80004f4:	2032      	movs	r0, #50	; 0x32
 80004f6:	f000 fe9d 	bl	8001234 <setTimer3>
			break;
 80004fa:	e025      	b.n	8000548 <fsm_auto_run+0x2a8>
			break;
 80004fc:	bf00      	nop
 80004fe:	e024      	b.n	800054a <fsm_auto_run+0x2aa>
			break;
 8000500:	bf00      	nop
 8000502:	e022      	b.n	800054a <fsm_auto_run+0x2aa>
 8000504:	2000007c 	.word	0x2000007c
 8000508:	20000080 	.word	0x20000080
 800050c:	200000dc 	.word	0x200000dc
 8000510:	200000c0 	.word	0x200000c0
 8000514:	20000074 	.word	0x20000074
 8000518:	200000b4 	.word	0x200000b4
 800051c:	200000c4 	.word	0x200000c4
 8000520:	200000bc 	.word	0x200000bc
 8000524:	200000c8 	.word	0x200000c8
 8000528:	200000b8 	.word	0x200000b8
 800052c:	20000084 	.word	0x20000084
 8000530:	200000e4 	.word	0x200000e4
 8000534:	200000d0 	.word	0x200000d0
 8000538:	200000d4 	.word	0x200000d4
 800053c:	200000cc 	.word	0x200000cc
 8000540:	20000088 	.word	0x20000088
 8000544:	200000ec 	.word	0x200000ec
			break;
 8000548:	bf00      	nop
		}

		switch(mode){
 800054a:	4b23      	ldr	r3, [pc, #140]	; (80005d8 <fsm_auto_run+0x338>)
 800054c:	681b      	ldr	r3, [r3, #0]
 800054e:	3b01      	subs	r3, #1
 8000550:	2b03      	cmp	r3, #3
 8000552:	d837      	bhi.n	80005c4 <fsm_auto_run+0x324>
 8000554:	a201      	add	r2, pc, #4	; (adr r2, 800055c <fsm_auto_run+0x2bc>)
 8000556:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800055a:	bf00      	nop
 800055c:	0800056d 	.word	0x0800056d
 8000560:	08000581 	.word	0x08000581
 8000564:	08000595 	.word	0x08000595
 8000568:	080005a9 	.word	0x080005a9
		case MODE1:
			if (isButtonPressed(BUTTON1) == 1) mode = MODE2;
 800056c:	2000      	movs	r0, #0
 800056e:	f7ff fded 	bl	800014c <isButtonPressed>
 8000572:	4603      	mov	r3, r0
 8000574:	2b01      	cmp	r3, #1
 8000576:	d127      	bne.n	80005c8 <fsm_auto_run+0x328>
 8000578:	4b17      	ldr	r3, [pc, #92]	; (80005d8 <fsm_auto_run+0x338>)
 800057a:	2202      	movs	r2, #2
 800057c:	601a      	str	r2, [r3, #0]
			break;
 800057e:	e023      	b.n	80005c8 <fsm_auto_run+0x328>
		case MODE2:
			if (isButtonPressed(BUTTON1) == 1) mode = MODE3;
 8000580:	2000      	movs	r0, #0
 8000582:	f7ff fde3 	bl	800014c <isButtonPressed>
 8000586:	4603      	mov	r3, r0
 8000588:	2b01      	cmp	r3, #1
 800058a:	d11f      	bne.n	80005cc <fsm_auto_run+0x32c>
 800058c:	4b12      	ldr	r3, [pc, #72]	; (80005d8 <fsm_auto_run+0x338>)
 800058e:	2203      	movs	r2, #3
 8000590:	601a      	str	r2, [r3, #0]
			break;
 8000592:	e01b      	b.n	80005cc <fsm_auto_run+0x32c>
		case MODE3:
			if (isButtonPressed(BUTTON1) == 1) mode = MODE4;
 8000594:	2000      	movs	r0, #0
 8000596:	f7ff fdd9 	bl	800014c <isButtonPressed>
 800059a:	4603      	mov	r3, r0
 800059c:	2b01      	cmp	r3, #1
 800059e:	d117      	bne.n	80005d0 <fsm_auto_run+0x330>
 80005a0:	4b0d      	ldr	r3, [pc, #52]	; (80005d8 <fsm_auto_run+0x338>)
 80005a2:	2204      	movs	r2, #4
 80005a4:	601a      	str	r2, [r3, #0]
			break;
 80005a6:	e013      	b.n	80005d0 <fsm_auto_run+0x330>
		case MODE4:
			if (isButtonPressed(BUTTON1) == 1) mode = MODE1;
 80005a8:	2000      	movs	r0, #0
 80005aa:	f7ff fdcf 	bl	800014c <isButtonPressed>
 80005ae:	4603      	mov	r3, r0
 80005b0:	2b01      	cmp	r3, #1
 80005b2:	d102      	bne.n	80005ba <fsm_auto_run+0x31a>
 80005b4:	4b08      	ldr	r3, [pc, #32]	; (80005d8 <fsm_auto_run+0x338>)
 80005b6:	2201      	movs	r2, #1
 80005b8:	601a      	str	r2, [r3, #0]
			Setup();
 80005ba:	f000 fa41 	bl	8000a40 <Setup>
			break;
 80005be:	e008      	b.n	80005d2 <fsm_auto_run+0x332>
		default:
			break;
		}
	}
 80005c0:	bf00      	nop
 80005c2:	e006      	b.n	80005d2 <fsm_auto_run+0x332>
			break;
 80005c4:	bf00      	nop
 80005c6:	e004      	b.n	80005d2 <fsm_auto_run+0x332>
			break;
 80005c8:	bf00      	nop
 80005ca:	e002      	b.n	80005d2 <fsm_auto_run+0x332>
			break;
 80005cc:	bf00      	nop
 80005ce:	e000      	b.n	80005d2 <fsm_auto_run+0x332>
			break;
 80005d0:	bf00      	nop
}
 80005d2:	bf00      	nop
 80005d4:	bd80      	pop	{r7, pc}
 80005d6:	bf00      	nop
 80005d8:	2000007c 	.word	0x2000007c

080005dc <fsm_manual_run>:
 *      Author: Admin
 */

#include "fsm_manual.h"

void fsm_manual_run(){
 80005dc:	b580      	push	{r7, lr}
 80005de:	af00      	add	r7, sp, #0
	if(mode == MODE2){
 80005e0:	4b9e      	ldr	r3, [pc, #632]	; (800085c <fsm_manual_run+0x280>)
 80005e2:	681b      	ldr	r3, [r3, #0]
 80005e4:	2b02      	cmp	r3, #2
 80005e6:	f040 809f 	bne.w	8000728 <fsm_manual_run+0x14c>
			switch(Stat_M2_1){
 80005ea:	4b9d      	ldr	r3, [pc, #628]	; (8000860 <fsm_manual_run+0x284>)
 80005ec:	681b      	ldr	r3, [r3, #0]
 80005ee:	2b00      	cmp	r3, #0
 80005f0:	d002      	beq.n	80005f8 <fsm_manual_run+0x1c>
 80005f2:	2b01      	cmp	r3, #1
 80005f4:	d007      	beq.n	8000606 <fsm_manual_run+0x2a>
					RIDE_ON();
					setTimer4(50);
				}
				break;
			default:
				break;
 80005f6:	e010      	b.n	800061a <fsm_manual_run+0x3e>
				Stat_M2_1 = BLINK;
 80005f8:	4b99      	ldr	r3, [pc, #612]	; (8000860 <fsm_manual_run+0x284>)
 80005fa:	2201      	movs	r2, #1
 80005fc:	601a      	str	r2, [r3, #0]
				setTimer4(10);
 80005fe:	200a      	movs	r0, #10
 8000600:	f000 fe2c 	bl	800125c <setTimer4>
				break;
 8000604:	e009      	b.n	800061a <fsm_manual_run+0x3e>
				if(timer4_flag == 1){
 8000606:	4b97      	ldr	r3, [pc, #604]	; (8000864 <fsm_manual_run+0x288>)
 8000608:	681b      	ldr	r3, [r3, #0]
 800060a:	2b01      	cmp	r3, #1
 800060c:	d104      	bne.n	8000618 <fsm_manual_run+0x3c>
					RIDE_ON();
 800060e:	f000 fa8d 	bl	8000b2c <RIDE_ON>
					setTimer4(50);
 8000612:	2032      	movs	r0, #50	; 0x32
 8000614:	f000 fe22 	bl	800125c <setTimer4>
				break;
 8000618:	bf00      	nop
			}

			switch(Stat_M2_2){
 800061a:	4b93      	ldr	r3, [pc, #588]	; (8000868 <fsm_manual_run+0x28c>)
 800061c:	681b      	ldr	r3, [r3, #0]
 800061e:	2b02      	cmp	r3, #2
 8000620:	d020      	beq.n	8000664 <fsm_manual_run+0x88>
 8000622:	2b02      	cmp	r3, #2
 8000624:	dc31      	bgt.n	800068a <fsm_manual_run+0xae>
 8000626:	2b00      	cmp	r3, #0
 8000628:	d002      	beq.n	8000630 <fsm_manual_run+0x54>
 800062a:	2b01      	cmp	r3, #1
 800062c:	d007      	beq.n	800063e <fsm_manual_run+0x62>
					Stat_M2_2 = SEG1;
					setTimer5(25);
				}
				break;
			default:
				break;
 800062e:	e02c      	b.n	800068a <fsm_manual_run+0xae>
				Stat_M2_2 = SEG1;
 8000630:	4b8d      	ldr	r3, [pc, #564]	; (8000868 <fsm_manual_run+0x28c>)
 8000632:	2201      	movs	r2, #1
 8000634:	601a      	str	r2, [r3, #0]
				setTimer5(10);
 8000636:	200a      	movs	r0, #10
 8000638:	f000 fe24 	bl	8001284 <setTimer5>
				break;
 800063c:	e02a      	b.n	8000694 <fsm_manual_run+0xb8>
				if(timer5_flag == 1){
 800063e:	4b8b      	ldr	r3, [pc, #556]	; (800086c <fsm_manual_run+0x290>)
 8000640:	681b      	ldr	r3, [r3, #0]
 8000642:	2b01      	cmp	r3, #1
 8000644:	d123      	bne.n	800068e <fsm_manual_run+0xb2>
					display_chuc(mode, AUTO_RED);
 8000646:	4b85      	ldr	r3, [pc, #532]	; (800085c <fsm_manual_run+0x280>)
 8000648:	681b      	ldr	r3, [r3, #0]
 800064a:	4a89      	ldr	r2, [pc, #548]	; (8000870 <fsm_manual_run+0x294>)
 800064c:	6812      	ldr	r2, [r2, #0]
 800064e:	4611      	mov	r1, r2
 8000650:	4618      	mov	r0, r3
 8000652:	f000 fc33 	bl	8000ebc <display_chuc>
					Stat_M2_2 = SEG2;
 8000656:	4b84      	ldr	r3, [pc, #528]	; (8000868 <fsm_manual_run+0x28c>)
 8000658:	2202      	movs	r2, #2
 800065a:	601a      	str	r2, [r3, #0]
					setTimer5(25);
 800065c:	2019      	movs	r0, #25
 800065e:	f000 fe11 	bl	8001284 <setTimer5>
				break;
 8000662:	e014      	b.n	800068e <fsm_manual_run+0xb2>
				if(timer5_flag == 1){
 8000664:	4b81      	ldr	r3, [pc, #516]	; (800086c <fsm_manual_run+0x290>)
 8000666:	681b      	ldr	r3, [r3, #0]
 8000668:	2b01      	cmp	r3, #1
 800066a:	d112      	bne.n	8000692 <fsm_manual_run+0xb6>
					display_don_vi(mode, AUTO_RED);
 800066c:	4b7b      	ldr	r3, [pc, #492]	; (800085c <fsm_manual_run+0x280>)
 800066e:	681b      	ldr	r3, [r3, #0]
 8000670:	4a7f      	ldr	r2, [pc, #508]	; (8000870 <fsm_manual_run+0x294>)
 8000672:	6812      	ldr	r2, [r2, #0]
 8000674:	4611      	mov	r1, r2
 8000676:	4618      	mov	r0, r3
 8000678:	f000 fc5a 	bl	8000f30 <display_don_vi>
					Stat_M2_2 = SEG1;
 800067c:	4b7a      	ldr	r3, [pc, #488]	; (8000868 <fsm_manual_run+0x28c>)
 800067e:	2201      	movs	r2, #1
 8000680:	601a      	str	r2, [r3, #0]
					setTimer5(25);
 8000682:	2019      	movs	r0, #25
 8000684:	f000 fdfe 	bl	8001284 <setTimer5>
				break;
 8000688:	e003      	b.n	8000692 <fsm_manual_run+0xb6>
				break;
 800068a:	bf00      	nop
 800068c:	e002      	b.n	8000694 <fsm_manual_run+0xb8>
				break;
 800068e:	bf00      	nop
 8000690:	e000      	b.n	8000694 <fsm_manual_run+0xb8>
				break;
 8000692:	bf00      	nop
			}

			switch(Stat_M2_3){
 8000694:	4b77      	ldr	r3, [pc, #476]	; (8000874 <fsm_manual_run+0x298>)
 8000696:	681b      	ldr	r3, [r3, #0]
 8000698:	2b02      	cmp	r3, #2
 800069a:	d031      	beq.n	8000700 <fsm_manual_run+0x124>
 800069c:	2b02      	cmp	r3, #2
 800069e:	dc35      	bgt.n	800070c <fsm_manual_run+0x130>
 80006a0:	2b00      	cmp	r3, #0
 80006a2:	d002      	beq.n	80006aa <fsm_manual_run+0xce>
 80006a4:	2b01      	cmp	r3, #1
 80006a6:	d00f      	beq.n	80006c8 <fsm_manual_run+0xec>
					//AUTO_RED = temp_RED;
					mode = MODE1;
					Setup();
					break;
				default:
					break;
 80006a8:	e030      	b.n	800070c <fsm_manual_run+0x130>
					if(isButtonPressed(BUTTON2) == 1){
 80006aa:	2001      	movs	r0, #1
 80006ac:	f7ff fd4e 	bl	800014c <isButtonPressed>
 80006b0:	4603      	mov	r3, r0
 80006b2:	2b01      	cmp	r3, #1
 80006b4:	d12c      	bne.n	8000710 <fsm_manual_run+0x134>
						Stat_M2_3 = INCREASE;
 80006b6:	4b6f      	ldr	r3, [pc, #444]	; (8000874 <fsm_manual_run+0x298>)
 80006b8:	2201      	movs	r2, #1
 80006ba:	601a      	str	r2, [r3, #0]
						AUTO_RED++;
 80006bc:	4b6c      	ldr	r3, [pc, #432]	; (8000870 <fsm_manual_run+0x294>)
 80006be:	681b      	ldr	r3, [r3, #0]
 80006c0:	3301      	adds	r3, #1
 80006c2:	4a6b      	ldr	r2, [pc, #428]	; (8000870 <fsm_manual_run+0x294>)
 80006c4:	6013      	str	r3, [r2, #0]
					break;
 80006c6:	e023      	b.n	8000710 <fsm_manual_run+0x134>
					if(isButtonPressed(BUTTON2) == 1){
 80006c8:	2001      	movs	r0, #1
 80006ca:	f7ff fd3f 	bl	800014c <isButtonPressed>
 80006ce:	4603      	mov	r3, r0
 80006d0:	2b01      	cmp	r3, #1
 80006d2:	d10b      	bne.n	80006ec <fsm_manual_run+0x110>
						AUTO_RED++;
 80006d4:	4b66      	ldr	r3, [pc, #408]	; (8000870 <fsm_manual_run+0x294>)
 80006d6:	681b      	ldr	r3, [r3, #0]
 80006d8:	3301      	adds	r3, #1
 80006da:	4a65      	ldr	r2, [pc, #404]	; (8000870 <fsm_manual_run+0x294>)
 80006dc:	6013      	str	r3, [r2, #0]
						if(AUTO_RED > MAX_COUNT) AUTO_RED = MAX_COUNT;
 80006de:	4b64      	ldr	r3, [pc, #400]	; (8000870 <fsm_manual_run+0x294>)
 80006e0:	681b      	ldr	r3, [r3, #0]
 80006e2:	2b63      	cmp	r3, #99	; 0x63
 80006e4:	dd02      	ble.n	80006ec <fsm_manual_run+0x110>
 80006e6:	4b62      	ldr	r3, [pc, #392]	; (8000870 <fsm_manual_run+0x294>)
 80006e8:	2263      	movs	r2, #99	; 0x63
 80006ea:	601a      	str	r2, [r3, #0]
					if(isButtonPressed(BUTTON3) == 1) Stat_M2_3 = SAVE;
 80006ec:	2002      	movs	r0, #2
 80006ee:	f7ff fd2d 	bl	800014c <isButtonPressed>
 80006f2:	4603      	mov	r3, r0
 80006f4:	2b01      	cmp	r3, #1
 80006f6:	d10d      	bne.n	8000714 <fsm_manual_run+0x138>
 80006f8:	4b5e      	ldr	r3, [pc, #376]	; (8000874 <fsm_manual_run+0x298>)
 80006fa:	2202      	movs	r2, #2
 80006fc:	601a      	str	r2, [r3, #0]
					break;
 80006fe:	e009      	b.n	8000714 <fsm_manual_run+0x138>
					mode = MODE1;
 8000700:	4b56      	ldr	r3, [pc, #344]	; (800085c <fsm_manual_run+0x280>)
 8000702:	2201      	movs	r2, #1
 8000704:	601a      	str	r2, [r3, #0]
					Setup();
 8000706:	f000 f99b 	bl	8000a40 <Setup>
					break;
 800070a:	e004      	b.n	8000716 <fsm_manual_run+0x13a>
					break;
 800070c:	bf00      	nop
 800070e:	e002      	b.n	8000716 <fsm_manual_run+0x13a>
					break;
 8000710:	bf00      	nop
 8000712:	e000      	b.n	8000716 <fsm_manual_run+0x13a>
					break;
 8000714:	bf00      	nop
			}

			if(isButtonPressed(BUTTON1) == 1) mode = MODE3;
 8000716:	2000      	movs	r0, #0
 8000718:	f7ff fd18 	bl	800014c <isButtonPressed>
 800071c:	4603      	mov	r3, r0
 800071e:	2b01      	cmp	r3, #1
 8000720:	d102      	bne.n	8000728 <fsm_manual_run+0x14c>
 8000722:	4b4e      	ldr	r3, [pc, #312]	; (800085c <fsm_manual_run+0x280>)
 8000724:	2203      	movs	r2, #3
 8000726:	601a      	str	r2, [r3, #0]
		}

		if(mode == MODE3){
 8000728:	4b4c      	ldr	r3, [pc, #304]	; (800085c <fsm_manual_run+0x280>)
 800072a:	681b      	ldr	r3, [r3, #0]
 800072c:	2b03      	cmp	r3, #3
 800072e:	f040 80b9 	bne.w	80008a4 <fsm_manual_run+0x2c8>
			switch(Stat_M3_1){
 8000732:	4b51      	ldr	r3, [pc, #324]	; (8000878 <fsm_manual_run+0x29c>)
 8000734:	681b      	ldr	r3, [r3, #0]
 8000736:	2b00      	cmp	r3, #0
 8000738:	d002      	beq.n	8000740 <fsm_manual_run+0x164>
 800073a:	2b01      	cmp	r3, #1
 800073c:	d007      	beq.n	800074e <fsm_manual_run+0x172>
					toggleYELLOWs();
					setTimer6(50);
				}
				break;
			default:
				break;
 800073e:	e010      	b.n	8000762 <fsm_manual_run+0x186>
				Stat_M3_1 = BLINK;
 8000740:	4b4d      	ldr	r3, [pc, #308]	; (8000878 <fsm_manual_run+0x29c>)
 8000742:	2201      	movs	r2, #1
 8000744:	601a      	str	r2, [r3, #0]
				setTimer6(10);
 8000746:	200a      	movs	r0, #10
 8000748:	f000 fdb0 	bl	80012ac <setTimer6>
				break;
 800074c:	e009      	b.n	8000762 <fsm_manual_run+0x186>
				if(timer6_flag == 1){
 800074e:	4b4b      	ldr	r3, [pc, #300]	; (800087c <fsm_manual_run+0x2a0>)
 8000750:	681b      	ldr	r3, [r3, #0]
 8000752:	2b01      	cmp	r3, #1
 8000754:	d104      	bne.n	8000760 <fsm_manual_run+0x184>
					toggleYELLOWs();
 8000756:	f000 fa2d 	bl	8000bb4 <toggleYELLOWs>
					setTimer6(50);
 800075a:	2032      	movs	r0, #50	; 0x32
 800075c:	f000 fda6 	bl	80012ac <setTimer6>
				break;
 8000760:	bf00      	nop
			}

			switch(Stat_M3_2){
 8000762:	4b47      	ldr	r3, [pc, #284]	; (8000880 <fsm_manual_run+0x2a4>)
 8000764:	681b      	ldr	r3, [r3, #0]
 8000766:	2b02      	cmp	r3, #2
 8000768:	d020      	beq.n	80007ac <fsm_manual_run+0x1d0>
 800076a:	2b02      	cmp	r3, #2
 800076c:	dc31      	bgt.n	80007d2 <fsm_manual_run+0x1f6>
 800076e:	2b00      	cmp	r3, #0
 8000770:	d002      	beq.n	8000778 <fsm_manual_run+0x19c>
 8000772:	2b01      	cmp	r3, #1
 8000774:	d007      	beq.n	8000786 <fsm_manual_run+0x1aa>
					Stat_M2_2 = SEG1;
					setTimer7(25);
				}
				break;
			default:
				break;
 8000776:	e02c      	b.n	80007d2 <fsm_manual_run+0x1f6>
				Stat_M3_2 = SEG1;
 8000778:	4b41      	ldr	r3, [pc, #260]	; (8000880 <fsm_manual_run+0x2a4>)
 800077a:	2201      	movs	r2, #1
 800077c:	601a      	str	r2, [r3, #0]
				setTimer7(10);
 800077e:	200a      	movs	r0, #10
 8000780:	f000 fda8 	bl	80012d4 <setTimer7>
				break;
 8000784:	e02a      	b.n	80007dc <fsm_manual_run+0x200>
				if(timer7_flag == 1){
 8000786:	4b3f      	ldr	r3, [pc, #252]	; (8000884 <fsm_manual_run+0x2a8>)
 8000788:	681b      	ldr	r3, [r3, #0]
 800078a:	2b01      	cmp	r3, #1
 800078c:	d123      	bne.n	80007d6 <fsm_manual_run+0x1fa>
					display_chuc(mode, AUTO_GREEN);
 800078e:	4b33      	ldr	r3, [pc, #204]	; (800085c <fsm_manual_run+0x280>)
 8000790:	681b      	ldr	r3, [r3, #0]
 8000792:	4a3d      	ldr	r2, [pc, #244]	; (8000888 <fsm_manual_run+0x2ac>)
 8000794:	6812      	ldr	r2, [r2, #0]
 8000796:	4611      	mov	r1, r2
 8000798:	4618      	mov	r0, r3
 800079a:	f000 fb8f 	bl	8000ebc <display_chuc>
					Stat_M3_2 = SEG2;
 800079e:	4b38      	ldr	r3, [pc, #224]	; (8000880 <fsm_manual_run+0x2a4>)
 80007a0:	2202      	movs	r2, #2
 80007a2:	601a      	str	r2, [r3, #0]
					setTimer7(25);
 80007a4:	2019      	movs	r0, #25
 80007a6:	f000 fd95 	bl	80012d4 <setTimer7>
				break;
 80007aa:	e014      	b.n	80007d6 <fsm_manual_run+0x1fa>
				if(timer7_flag == 1){
 80007ac:	4b35      	ldr	r3, [pc, #212]	; (8000884 <fsm_manual_run+0x2a8>)
 80007ae:	681b      	ldr	r3, [r3, #0]
 80007b0:	2b01      	cmp	r3, #1
 80007b2:	d112      	bne.n	80007da <fsm_manual_run+0x1fe>
					display_don_vi(mode, AUTO_GREEN);
 80007b4:	4b29      	ldr	r3, [pc, #164]	; (800085c <fsm_manual_run+0x280>)
 80007b6:	681b      	ldr	r3, [r3, #0]
 80007b8:	4a33      	ldr	r2, [pc, #204]	; (8000888 <fsm_manual_run+0x2ac>)
 80007ba:	6812      	ldr	r2, [r2, #0]
 80007bc:	4611      	mov	r1, r2
 80007be:	4618      	mov	r0, r3
 80007c0:	f000 fbb6 	bl	8000f30 <display_don_vi>
					Stat_M2_2 = SEG1;
 80007c4:	4b28      	ldr	r3, [pc, #160]	; (8000868 <fsm_manual_run+0x28c>)
 80007c6:	2201      	movs	r2, #1
 80007c8:	601a      	str	r2, [r3, #0]
					setTimer7(25);
 80007ca:	2019      	movs	r0, #25
 80007cc:	f000 fd82 	bl	80012d4 <setTimer7>
				break;
 80007d0:	e003      	b.n	80007da <fsm_manual_run+0x1fe>
				break;
 80007d2:	bf00      	nop
 80007d4:	e002      	b.n	80007dc <fsm_manual_run+0x200>
				break;
 80007d6:	bf00      	nop
 80007d8:	e000      	b.n	80007dc <fsm_manual_run+0x200>
				break;
 80007da:	bf00      	nop
			}

			switch(Stat_M3_3){
 80007dc:	4b2b      	ldr	r3, [pc, #172]	; (800088c <fsm_manual_run+0x2b0>)
 80007de:	681b      	ldr	r3, [r3, #0]
 80007e0:	2b02      	cmp	r3, #2
 80007e2:	d031      	beq.n	8000848 <fsm_manual_run+0x26c>
 80007e4:	2b02      	cmp	r3, #2
 80007e6:	dc35      	bgt.n	8000854 <fsm_manual_run+0x278>
 80007e8:	2b00      	cmp	r3, #0
 80007ea:	d002      	beq.n	80007f2 <fsm_manual_run+0x216>
 80007ec:	2b01      	cmp	r3, #1
 80007ee:	d00f      	beq.n	8000810 <fsm_manual_run+0x234>
					//AUTO_GREEN = temp_GREEN;
					mode = MODE1;
					Setup();
					break;
				default:
					break;
 80007f0:	e030      	b.n	8000854 <fsm_manual_run+0x278>
					if(isButtonPressed(BUTTON2) == 1){
 80007f2:	2001      	movs	r0, #1
 80007f4:	f7ff fcaa 	bl	800014c <isButtonPressed>
 80007f8:	4603      	mov	r3, r0
 80007fa:	2b01      	cmp	r3, #1
 80007fc:	d12c      	bne.n	8000858 <fsm_manual_run+0x27c>
						Stat_M3_3 = INCREASE;
 80007fe:	4b23      	ldr	r3, [pc, #140]	; (800088c <fsm_manual_run+0x2b0>)
 8000800:	2201      	movs	r2, #1
 8000802:	601a      	str	r2, [r3, #0]
						AUTO_GREEN++;
 8000804:	4b20      	ldr	r3, [pc, #128]	; (8000888 <fsm_manual_run+0x2ac>)
 8000806:	681b      	ldr	r3, [r3, #0]
 8000808:	3301      	adds	r3, #1
 800080a:	4a1f      	ldr	r2, [pc, #124]	; (8000888 <fsm_manual_run+0x2ac>)
 800080c:	6013      	str	r3, [r2, #0]
					break;
 800080e:	e023      	b.n	8000858 <fsm_manual_run+0x27c>
					if(isButtonPressed(BUTTON2) == 1){
 8000810:	2001      	movs	r0, #1
 8000812:	f7ff fc9b 	bl	800014c <isButtonPressed>
 8000816:	4603      	mov	r3, r0
 8000818:	2b01      	cmp	r3, #1
 800081a:	d10b      	bne.n	8000834 <fsm_manual_run+0x258>
						AUTO_GREEN++;
 800081c:	4b1a      	ldr	r3, [pc, #104]	; (8000888 <fsm_manual_run+0x2ac>)
 800081e:	681b      	ldr	r3, [r3, #0]
 8000820:	3301      	adds	r3, #1
 8000822:	4a19      	ldr	r2, [pc, #100]	; (8000888 <fsm_manual_run+0x2ac>)
 8000824:	6013      	str	r3, [r2, #0]
						if(AUTO_GREEN >= MAX_COUNT) AUTO_GREEN = MAX_COUNT;
 8000826:	4b18      	ldr	r3, [pc, #96]	; (8000888 <fsm_manual_run+0x2ac>)
 8000828:	681b      	ldr	r3, [r3, #0]
 800082a:	2b62      	cmp	r3, #98	; 0x62
 800082c:	dd02      	ble.n	8000834 <fsm_manual_run+0x258>
 800082e:	4b16      	ldr	r3, [pc, #88]	; (8000888 <fsm_manual_run+0x2ac>)
 8000830:	2263      	movs	r2, #99	; 0x63
 8000832:	601a      	str	r2, [r3, #0]
					if(isButtonPressed(BUTTON3) == 1) Stat_M3_3 = SAVE;
 8000834:	2002      	movs	r0, #2
 8000836:	f7ff fc89 	bl	800014c <isButtonPressed>
 800083a:	4603      	mov	r3, r0
 800083c:	2b01      	cmp	r3, #1
 800083e:	d127      	bne.n	8000890 <fsm_manual_run+0x2b4>
 8000840:	4b12      	ldr	r3, [pc, #72]	; (800088c <fsm_manual_run+0x2b0>)
 8000842:	2202      	movs	r2, #2
 8000844:	601a      	str	r2, [r3, #0]
					break;
 8000846:	e023      	b.n	8000890 <fsm_manual_run+0x2b4>
					mode = MODE1;
 8000848:	4b04      	ldr	r3, [pc, #16]	; (800085c <fsm_manual_run+0x280>)
 800084a:	2201      	movs	r2, #1
 800084c:	601a      	str	r2, [r3, #0]
					Setup();
 800084e:	f000 f8f7 	bl	8000a40 <Setup>
					break;
 8000852:	e01e      	b.n	8000892 <fsm_manual_run+0x2b6>
					break;
 8000854:	bf00      	nop
 8000856:	e01c      	b.n	8000892 <fsm_manual_run+0x2b6>
					break;
 8000858:	bf00      	nop
 800085a:	e01a      	b.n	8000892 <fsm_manual_run+0x2b6>
 800085c:	2000007c 	.word	0x2000007c
 8000860:	20000090 	.word	0x20000090
 8000864:	200000f4 	.word	0x200000f4
 8000868:	20000094 	.word	0x20000094
 800086c:	200000fc 	.word	0x200000fc
 8000870:	200000b4 	.word	0x200000b4
 8000874:	20000098 	.word	0x20000098
 8000878:	2000009c 	.word	0x2000009c
 800087c:	20000104 	.word	0x20000104
 8000880:	200000a0 	.word	0x200000a0
 8000884:	2000010c 	.word	0x2000010c
 8000888:	200000bc 	.word	0x200000bc
 800088c:	200000a4 	.word	0x200000a4
					break;
 8000890:	bf00      	nop
			}

			if(isButtonPressed(BUTTON1) == 1) mode = MODE4;
 8000892:	2000      	movs	r0, #0
 8000894:	f7ff fc5a 	bl	800014c <isButtonPressed>
 8000898:	4603      	mov	r3, r0
 800089a:	2b01      	cmp	r3, #1
 800089c:	d102      	bne.n	80008a4 <fsm_manual_run+0x2c8>
 800089e:	4b55      	ldr	r3, [pc, #340]	; (80009f4 <fsm_manual_run+0x418>)
 80008a0:	2204      	movs	r2, #4
 80008a2:	601a      	str	r2, [r3, #0]
		}

		if(mode == MODE4){
 80008a4:	4b53      	ldr	r3, [pc, #332]	; (80009f4 <fsm_manual_run+0x418>)
 80008a6:	681b      	ldr	r3, [r3, #0]
 80008a8:	2b04      	cmp	r3, #4
 80008aa:	f040 80a1 	bne.w	80009f0 <fsm_manual_run+0x414>
			switch(Stat_M4_1){
 80008ae:	4b52      	ldr	r3, [pc, #328]	; (80009f8 <fsm_manual_run+0x41c>)
 80008b0:	681b      	ldr	r3, [r3, #0]
 80008b2:	2b00      	cmp	r3, #0
 80008b4:	d002      	beq.n	80008bc <fsm_manual_run+0x2e0>
 80008b6:	2b01      	cmp	r3, #1
 80008b8:	d007      	beq.n	80008ca <fsm_manual_run+0x2ee>
					toggleGREENs();
					setTimer8(50);
				}
				break;
			default:
				break;
 80008ba:	e010      	b.n	80008de <fsm_manual_run+0x302>
				Stat_M4_1 = BLINK;
 80008bc:	4b4e      	ldr	r3, [pc, #312]	; (80009f8 <fsm_manual_run+0x41c>)
 80008be:	2201      	movs	r2, #1
 80008c0:	601a      	str	r2, [r3, #0]
				setTimer8(10);
 80008c2:	200a      	movs	r0, #10
 80008c4:	f000 fd1a 	bl	80012fc <setTimer8>
				break;
 80008c8:	e009      	b.n	80008de <fsm_manual_run+0x302>
				if(timer8_flag == 1){
 80008ca:	4b4c      	ldr	r3, [pc, #304]	; (80009fc <fsm_manual_run+0x420>)
 80008cc:	681b      	ldr	r3, [r3, #0]
 80008ce:	2b01      	cmp	r3, #1
 80008d0:	d104      	bne.n	80008dc <fsm_manual_run+0x300>
					toggleGREENs();
 80008d2:	f000 f94d 	bl	8000b70 <toggleGREENs>
					setTimer8(50);
 80008d6:	2032      	movs	r0, #50	; 0x32
 80008d8:	f000 fd10 	bl	80012fc <setTimer8>
				break;
 80008dc:	bf00      	nop
			}

			switch(Stat_M4_2){
 80008de:	4b48      	ldr	r3, [pc, #288]	; (8000a00 <fsm_manual_run+0x424>)
 80008e0:	681b      	ldr	r3, [r3, #0]
 80008e2:	2b02      	cmp	r3, #2
 80008e4:	d020      	beq.n	8000928 <fsm_manual_run+0x34c>
 80008e6:	2b02      	cmp	r3, #2
 80008e8:	dc31      	bgt.n	800094e <fsm_manual_run+0x372>
 80008ea:	2b00      	cmp	r3, #0
 80008ec:	d002      	beq.n	80008f4 <fsm_manual_run+0x318>
 80008ee:	2b01      	cmp	r3, #1
 80008f0:	d007      	beq.n	8000902 <fsm_manual_run+0x326>
					Stat_M4_2 = SEG1;
					setTimer9(25);
				}
				break;
			default:
				break;
 80008f2:	e02c      	b.n	800094e <fsm_manual_run+0x372>
				Stat_M4_2 = SEG1;
 80008f4:	4b42      	ldr	r3, [pc, #264]	; (8000a00 <fsm_manual_run+0x424>)
 80008f6:	2201      	movs	r2, #1
 80008f8:	601a      	str	r2, [r3, #0]
				setTimer9(10);
 80008fa:	200a      	movs	r0, #10
 80008fc:	f000 fd12 	bl	8001324 <setTimer9>
				break;
 8000900:	e02a      	b.n	8000958 <fsm_manual_run+0x37c>
				if(timer7_flag == 1){
 8000902:	4b40      	ldr	r3, [pc, #256]	; (8000a04 <fsm_manual_run+0x428>)
 8000904:	681b      	ldr	r3, [r3, #0]
 8000906:	2b01      	cmp	r3, #1
 8000908:	d123      	bne.n	8000952 <fsm_manual_run+0x376>
					display_chuc(mode, AUTO_YELLOW);
 800090a:	4b3a      	ldr	r3, [pc, #232]	; (80009f4 <fsm_manual_run+0x418>)
 800090c:	681b      	ldr	r3, [r3, #0]
 800090e:	4a3e      	ldr	r2, [pc, #248]	; (8000a08 <fsm_manual_run+0x42c>)
 8000910:	6812      	ldr	r2, [r2, #0]
 8000912:	4611      	mov	r1, r2
 8000914:	4618      	mov	r0, r3
 8000916:	f000 fad1 	bl	8000ebc <display_chuc>
					Stat_M4_2 = SEG2;
 800091a:	4b39      	ldr	r3, [pc, #228]	; (8000a00 <fsm_manual_run+0x424>)
 800091c:	2202      	movs	r2, #2
 800091e:	601a      	str	r2, [r3, #0]
					setTimer9(25);
 8000920:	2019      	movs	r0, #25
 8000922:	f000 fcff 	bl	8001324 <setTimer9>
				break;
 8000926:	e014      	b.n	8000952 <fsm_manual_run+0x376>
				if(timer9_flag == 1){
 8000928:	4b38      	ldr	r3, [pc, #224]	; (8000a0c <fsm_manual_run+0x430>)
 800092a:	681b      	ldr	r3, [r3, #0]
 800092c:	2b01      	cmp	r3, #1
 800092e:	d112      	bne.n	8000956 <fsm_manual_run+0x37a>
					display_don_vi(mode, AUTO_YELLOW);
 8000930:	4b30      	ldr	r3, [pc, #192]	; (80009f4 <fsm_manual_run+0x418>)
 8000932:	681b      	ldr	r3, [r3, #0]
 8000934:	4a34      	ldr	r2, [pc, #208]	; (8000a08 <fsm_manual_run+0x42c>)
 8000936:	6812      	ldr	r2, [r2, #0]
 8000938:	4611      	mov	r1, r2
 800093a:	4618      	mov	r0, r3
 800093c:	f000 faf8 	bl	8000f30 <display_don_vi>
					Stat_M4_2 = SEG1;
 8000940:	4b2f      	ldr	r3, [pc, #188]	; (8000a00 <fsm_manual_run+0x424>)
 8000942:	2201      	movs	r2, #1
 8000944:	601a      	str	r2, [r3, #0]
					setTimer9(25);
 8000946:	2019      	movs	r0, #25
 8000948:	f000 fcec 	bl	8001324 <setTimer9>
				break;
 800094c:	e003      	b.n	8000956 <fsm_manual_run+0x37a>
				break;
 800094e:	bf00      	nop
 8000950:	e002      	b.n	8000958 <fsm_manual_run+0x37c>
				break;
 8000952:	bf00      	nop
 8000954:	e000      	b.n	8000958 <fsm_manual_run+0x37c>
				break;
 8000956:	bf00      	nop
			}

			switch(Stat_M4_3){
 8000958:	4b2d      	ldr	r3, [pc, #180]	; (8000a10 <fsm_manual_run+0x434>)
 800095a:	681b      	ldr	r3, [r3, #0]
 800095c:	2b02      	cmp	r3, #2
 800095e:	d031      	beq.n	80009c4 <fsm_manual_run+0x3e8>
 8000960:	2b02      	cmp	r3, #2
 8000962:	dc35      	bgt.n	80009d0 <fsm_manual_run+0x3f4>
 8000964:	2b00      	cmp	r3, #0
 8000966:	d002      	beq.n	800096e <fsm_manual_run+0x392>
 8000968:	2b01      	cmp	r3, #1
 800096a:	d00f      	beq.n	800098c <fsm_manual_run+0x3b0>
					//AUTO_RED = temp_YELLOW;
					mode = MODE1;
					Setup();
					break;
				default:
					break;
 800096c:	e030      	b.n	80009d0 <fsm_manual_run+0x3f4>
					if(isButtonPressed(BUTTON2) == 1){
 800096e:	2001      	movs	r0, #1
 8000970:	f7ff fbec 	bl	800014c <isButtonPressed>
 8000974:	4603      	mov	r3, r0
 8000976:	2b01      	cmp	r3, #1
 8000978:	d12c      	bne.n	80009d4 <fsm_manual_run+0x3f8>
						Stat_M4_3 = INCREASE;
 800097a:	4b25      	ldr	r3, [pc, #148]	; (8000a10 <fsm_manual_run+0x434>)
 800097c:	2201      	movs	r2, #1
 800097e:	601a      	str	r2, [r3, #0]
						AUTO_YELLOW++;
 8000980:	4b21      	ldr	r3, [pc, #132]	; (8000a08 <fsm_manual_run+0x42c>)
 8000982:	681b      	ldr	r3, [r3, #0]
 8000984:	3301      	adds	r3, #1
 8000986:	4a20      	ldr	r2, [pc, #128]	; (8000a08 <fsm_manual_run+0x42c>)
 8000988:	6013      	str	r3, [r2, #0]
					break;
 800098a:	e023      	b.n	80009d4 <fsm_manual_run+0x3f8>
					if(isButtonPressed(BUTTON2) == 1){
 800098c:	2001      	movs	r0, #1
 800098e:	f7ff fbdd 	bl	800014c <isButtonPressed>
 8000992:	4603      	mov	r3, r0
 8000994:	2b01      	cmp	r3, #1
 8000996:	d10b      	bne.n	80009b0 <fsm_manual_run+0x3d4>
						AUTO_YELLOW++;
 8000998:	4b1b      	ldr	r3, [pc, #108]	; (8000a08 <fsm_manual_run+0x42c>)
 800099a:	681b      	ldr	r3, [r3, #0]
 800099c:	3301      	adds	r3, #1
 800099e:	4a1a      	ldr	r2, [pc, #104]	; (8000a08 <fsm_manual_run+0x42c>)
 80009a0:	6013      	str	r3, [r2, #0]
						if(AUTO_YELLOW >= MAX_COUNT) AUTO_YELLOW = MAX_COUNT;
 80009a2:	4b19      	ldr	r3, [pc, #100]	; (8000a08 <fsm_manual_run+0x42c>)
 80009a4:	681b      	ldr	r3, [r3, #0]
 80009a6:	2b62      	cmp	r3, #98	; 0x62
 80009a8:	dd02      	ble.n	80009b0 <fsm_manual_run+0x3d4>
 80009aa:	4b17      	ldr	r3, [pc, #92]	; (8000a08 <fsm_manual_run+0x42c>)
 80009ac:	2263      	movs	r2, #99	; 0x63
 80009ae:	601a      	str	r2, [r3, #0]
					if(isButtonPressed(BUTTON3) == 1) Stat_M4_3 = SAVE;
 80009b0:	2002      	movs	r0, #2
 80009b2:	f7ff fbcb 	bl	800014c <isButtonPressed>
 80009b6:	4603      	mov	r3, r0
 80009b8:	2b01      	cmp	r3, #1
 80009ba:	d10d      	bne.n	80009d8 <fsm_manual_run+0x3fc>
 80009bc:	4b14      	ldr	r3, [pc, #80]	; (8000a10 <fsm_manual_run+0x434>)
 80009be:	2202      	movs	r2, #2
 80009c0:	601a      	str	r2, [r3, #0]
					break;
 80009c2:	e009      	b.n	80009d8 <fsm_manual_run+0x3fc>
					mode = MODE1;
 80009c4:	4b0b      	ldr	r3, [pc, #44]	; (80009f4 <fsm_manual_run+0x418>)
 80009c6:	2201      	movs	r2, #1
 80009c8:	601a      	str	r2, [r3, #0]
					Setup();
 80009ca:	f000 f839 	bl	8000a40 <Setup>
					break;
 80009ce:	e004      	b.n	80009da <fsm_manual_run+0x3fe>
					break;
 80009d0:	bf00      	nop
 80009d2:	e002      	b.n	80009da <fsm_manual_run+0x3fe>
					break;
 80009d4:	bf00      	nop
 80009d6:	e000      	b.n	80009da <fsm_manual_run+0x3fe>
					break;
 80009d8:	bf00      	nop
			}

			if(isButtonPressed(BUTTON1) == 1){
 80009da:	2000      	movs	r0, #0
 80009dc:	f7ff fbb6 	bl	800014c <isButtonPressed>
 80009e0:	4603      	mov	r3, r0
 80009e2:	2b01      	cmp	r3, #1
 80009e4:	d104      	bne.n	80009f0 <fsm_manual_run+0x414>
				mode = MODE1;
 80009e6:	4b03      	ldr	r3, [pc, #12]	; (80009f4 <fsm_manual_run+0x418>)
 80009e8:	2201      	movs	r2, #1
 80009ea:	601a      	str	r2, [r3, #0]
				Setup();
 80009ec:	f000 f828 	bl	8000a40 <Setup>
			}
		}
}
 80009f0:	bf00      	nop
 80009f2:	bd80      	pop	{r7, pc}
 80009f4:	2000007c 	.word	0x2000007c
 80009f8:	200000a8 	.word	0x200000a8
 80009fc:	20000114 	.word	0x20000114
 8000a00:	200000ac 	.word	0x200000ac
 8000a04:	2000010c 	.word	0x2000010c
 8000a08:	200000b8 	.word	0x200000b8
 8000a0c:	2000011c 	.word	0x2000011c
 8000a10:	200000b0 	.word	0x200000b0

08000a14 <LedTimeInit>:

int counterRED_NORTH = 0;
int counterGREEN_NORTH = 0;
int counterYELLOW_NORTH = 0;

void LedTimeInit(){
 8000a14:	b480      	push	{r7}
 8000a16:	af00      	add	r7, sp, #0
	AUTO_RED = 5;
 8000a18:	4b06      	ldr	r3, [pc, #24]	; (8000a34 <LedTimeInit+0x20>)
 8000a1a:	2205      	movs	r2, #5
 8000a1c:	601a      	str	r2, [r3, #0]
	AUTO_YELLOW = 2;
 8000a1e:	4b06      	ldr	r3, [pc, #24]	; (8000a38 <LedTimeInit+0x24>)
 8000a20:	2202      	movs	r2, #2
 8000a22:	601a      	str	r2, [r3, #0]
	AUTO_GREEN = 3;
 8000a24:	4b05      	ldr	r3, [pc, #20]	; (8000a3c <LedTimeInit+0x28>)
 8000a26:	2203      	movs	r2, #3
 8000a28:	601a      	str	r2, [r3, #0]
}
 8000a2a:	bf00      	nop
 8000a2c:	46bd      	mov	sp, r7
 8000a2e:	bc80      	pop	{r7}
 8000a30:	4770      	bx	lr
 8000a32:	bf00      	nop
 8000a34:	200000b4 	.word	0x200000b4
 8000a38:	200000b8 	.word	0x200000b8
 8000a3c:	200000bc 	.word	0x200000bc

08000a40 <Setup>:

void Setup(){
 8000a40:	b480      	push	{r7}
 8000a42:	af00      	add	r7, sp, #0
	mode = MODE1;
 8000a44:	4b22      	ldr	r3, [pc, #136]	; (8000ad0 <Setup+0x90>)
 8000a46:	2201      	movs	r2, #1
 8000a48:	601a      	str	r2, [r3, #0]

	west_traffic = INIT;
 8000a4a:	4b22      	ldr	r3, [pc, #136]	; (8000ad4 <Setup+0x94>)
 8000a4c:	2200      	movs	r2, #0
 8000a4e:	601a      	str	r2, [r3, #0]
	north_traffic = INIT;
 8000a50:	4b21      	ldr	r3, [pc, #132]	; (8000ad8 <Setup+0x98>)
 8000a52:	2200      	movs	r2, #0
 8000a54:	601a      	str	r2, [r3, #0]
	seg_disp = INIT;
 8000a56:	4b21      	ldr	r3, [pc, #132]	; (8000adc <Setup+0x9c>)
 8000a58:	2200      	movs	r2, #0
 8000a5a:	601a      	str	r2, [r3, #0]
	mode_change = INIT;
 8000a5c:	4b20      	ldr	r3, [pc, #128]	; (8000ae0 <Setup+0xa0>)
 8000a5e:	2200      	movs	r2, #0
 8000a60:	601a      	str	r2, [r3, #0]

	Stat_M2_1 = INIT;
 8000a62:	4b20      	ldr	r3, [pc, #128]	; (8000ae4 <Setup+0xa4>)
 8000a64:	2200      	movs	r2, #0
 8000a66:	601a      	str	r2, [r3, #0]
	Stat_M2_2 = INIT;
 8000a68:	4b1f      	ldr	r3, [pc, #124]	; (8000ae8 <Setup+0xa8>)
 8000a6a:	2200      	movs	r2, #0
 8000a6c:	601a      	str	r2, [r3, #0]
	Stat_M2_3 = INIT;
 8000a6e:	4b1f      	ldr	r3, [pc, #124]	; (8000aec <Setup+0xac>)
 8000a70:	2200      	movs	r2, #0
 8000a72:	601a      	str	r2, [r3, #0]

	Stat_M3_1 = INIT;
 8000a74:	4b1e      	ldr	r3, [pc, #120]	; (8000af0 <Setup+0xb0>)
 8000a76:	2200      	movs	r2, #0
 8000a78:	601a      	str	r2, [r3, #0]
	Stat_M3_2 = INIT;
 8000a7a:	4b1e      	ldr	r3, [pc, #120]	; (8000af4 <Setup+0xb4>)
 8000a7c:	2200      	movs	r2, #0
 8000a7e:	601a      	str	r2, [r3, #0]
	Stat_M3_3 = INIT;
 8000a80:	4b1d      	ldr	r3, [pc, #116]	; (8000af8 <Setup+0xb8>)
 8000a82:	2200      	movs	r2, #0
 8000a84:	601a      	str	r2, [r3, #0]

	Stat_M4_1 = INIT;
 8000a86:	4b1d      	ldr	r3, [pc, #116]	; (8000afc <Setup+0xbc>)
 8000a88:	2200      	movs	r2, #0
 8000a8a:	601a      	str	r2, [r3, #0]
	Stat_M4_2 = INIT;
 8000a8c:	4b1c      	ldr	r3, [pc, #112]	; (8000b00 <Setup+0xc0>)
 8000a8e:	2200      	movs	r2, #0
 8000a90:	601a      	str	r2, [r3, #0]
	Stat_M4_3 = INIT;
 8000a92:	4b1c      	ldr	r3, [pc, #112]	; (8000b04 <Setup+0xc4>)
 8000a94:	2200      	movs	r2, #0
 8000a96:	601a      	str	r2, [r3, #0]

	counterRED_WEST = AUTO_RED;
 8000a98:	4b1b      	ldr	r3, [pc, #108]	; (8000b08 <Setup+0xc8>)
 8000a9a:	681b      	ldr	r3, [r3, #0]
 8000a9c:	4a1b      	ldr	r2, [pc, #108]	; (8000b0c <Setup+0xcc>)
 8000a9e:	6013      	str	r3, [r2, #0]
	counterGREEN_WEST = AUTO_GREEN;
 8000aa0:	4b1b      	ldr	r3, [pc, #108]	; (8000b10 <Setup+0xd0>)
 8000aa2:	681b      	ldr	r3, [r3, #0]
 8000aa4:	4a1b      	ldr	r2, [pc, #108]	; (8000b14 <Setup+0xd4>)
 8000aa6:	6013      	str	r3, [r2, #0]
	counterYELLOW_WEST = AUTO_YELLOW;
 8000aa8:	4b1b      	ldr	r3, [pc, #108]	; (8000b18 <Setup+0xd8>)
 8000aaa:	681b      	ldr	r3, [r3, #0]
 8000aac:	4a1b      	ldr	r2, [pc, #108]	; (8000b1c <Setup+0xdc>)
 8000aae:	6013      	str	r3, [r2, #0]

	counterRED_NORTH = AUTO_RED;
 8000ab0:	4b15      	ldr	r3, [pc, #84]	; (8000b08 <Setup+0xc8>)
 8000ab2:	681b      	ldr	r3, [r3, #0]
 8000ab4:	4a1a      	ldr	r2, [pc, #104]	; (8000b20 <Setup+0xe0>)
 8000ab6:	6013      	str	r3, [r2, #0]
	counterGREEN_NORTH = AUTO_GREEN;
 8000ab8:	4b15      	ldr	r3, [pc, #84]	; (8000b10 <Setup+0xd0>)
 8000aba:	681b      	ldr	r3, [r3, #0]
 8000abc:	4a19      	ldr	r2, [pc, #100]	; (8000b24 <Setup+0xe4>)
 8000abe:	6013      	str	r3, [r2, #0]
	counterYELLOW_NORTH = AUTO_YELLOW;
 8000ac0:	4b15      	ldr	r3, [pc, #84]	; (8000b18 <Setup+0xd8>)
 8000ac2:	681b      	ldr	r3, [r3, #0]
 8000ac4:	4a18      	ldr	r2, [pc, #96]	; (8000b28 <Setup+0xe8>)
 8000ac6:	6013      	str	r3, [r2, #0]
}
 8000ac8:	bf00      	nop
 8000aca:	46bd      	mov	sp, r7
 8000acc:	bc80      	pop	{r7}
 8000ace:	4770      	bx	lr
 8000ad0:	2000007c 	.word	0x2000007c
 8000ad4:	20000080 	.word	0x20000080
 8000ad8:	20000084 	.word	0x20000084
 8000adc:	20000088 	.word	0x20000088
 8000ae0:	2000008c 	.word	0x2000008c
 8000ae4:	20000090 	.word	0x20000090
 8000ae8:	20000094 	.word	0x20000094
 8000aec:	20000098 	.word	0x20000098
 8000af0:	2000009c 	.word	0x2000009c
 8000af4:	200000a0 	.word	0x200000a0
 8000af8:	200000a4 	.word	0x200000a4
 8000afc:	200000a8 	.word	0x200000a8
 8000b00:	200000ac 	.word	0x200000ac
 8000b04:	200000b0 	.word	0x200000b0
 8000b08:	200000b4 	.word	0x200000b4
 8000b0c:	200000c0 	.word	0x200000c0
 8000b10:	200000bc 	.word	0x200000bc
 8000b14:	200000c4 	.word	0x200000c4
 8000b18:	200000b8 	.word	0x200000b8
 8000b1c:	200000c8 	.word	0x200000c8
 8000b20:	200000cc 	.word	0x200000cc
 8000b24:	200000d0 	.word	0x200000d0
 8000b28:	200000d4 	.word	0x200000d4

08000b2c <RIDE_ON>:
 *      Author: Admin
 */

#include "led_disp.h"

void RIDE_ON(){
 8000b2c:	b580      	push	{r7, lr}
 8000b2e:	af00      	add	r7, sp, #0
	HAL_GPIO_TogglePin(RED_WEST_GPIO_Port, RED_WEST_Pin);
 8000b30:	2104      	movs	r1, #4
 8000b32:	480e      	ldr	r0, [pc, #56]	; (8000b6c <RIDE_ON+0x40>)
 8000b34:	f001 f891 	bl	8001c5a <HAL_GPIO_TogglePin>
	HAL_GPIO_TogglePin(RED_NORTH_GPIO_Port, RED_NORTH_Pin);
 8000b38:	2120      	movs	r1, #32
 8000b3a:	480c      	ldr	r0, [pc, #48]	; (8000b6c <RIDE_ON+0x40>)
 8000b3c:	f001 f88d 	bl	8001c5a <HAL_GPIO_TogglePin>
	HAL_GPIO_WritePin(GREEN_WEST_GPIO_Port, GREEN_WEST_Pin, SET);
 8000b40:	2201      	movs	r2, #1
 8000b42:	2110      	movs	r1, #16
 8000b44:	4809      	ldr	r0, [pc, #36]	; (8000b6c <RIDE_ON+0x40>)
 8000b46:	f001 f870 	bl	8001c2a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GREEN_NORTH_GPIO_Port, GREEN_NORTH_Pin, SET);
 8000b4a:	2201      	movs	r2, #1
 8000b4c:	2180      	movs	r1, #128	; 0x80
 8000b4e:	4807      	ldr	r0, [pc, #28]	; (8000b6c <RIDE_ON+0x40>)
 8000b50:	f001 f86b 	bl	8001c2a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(YELLOW_WEST_GPIO_Port, YELLOW_WEST_Pin, SET);
 8000b54:	2201      	movs	r2, #1
 8000b56:	2108      	movs	r1, #8
 8000b58:	4804      	ldr	r0, [pc, #16]	; (8000b6c <RIDE_ON+0x40>)
 8000b5a:	f001 f866 	bl	8001c2a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(YELLOW_NORTH_GPIO_Port, YELLOW_NORTH_Pin, SET);
 8000b5e:	2201      	movs	r2, #1
 8000b60:	2140      	movs	r1, #64	; 0x40
 8000b62:	4802      	ldr	r0, [pc, #8]	; (8000b6c <RIDE_ON+0x40>)
 8000b64:	f001 f861 	bl	8001c2a <HAL_GPIO_WritePin>
}
 8000b68:	bf00      	nop
 8000b6a:	bd80      	pop	{r7, pc}
 8000b6c:	40010800 	.word	0x40010800

08000b70 <toggleGREENs>:
void toggleGREENs(){
 8000b70:	b580      	push	{r7, lr}
 8000b72:	af00      	add	r7, sp, #0
	HAL_GPIO_TogglePin(GREEN_WEST_GPIO_Port, GREEN_WEST_Pin);
 8000b74:	2110      	movs	r1, #16
 8000b76:	480e      	ldr	r0, [pc, #56]	; (8000bb0 <toggleGREENs+0x40>)
 8000b78:	f001 f86f 	bl	8001c5a <HAL_GPIO_TogglePin>
	HAL_GPIO_TogglePin(GREEN_NORTH_GPIO_Port, GREEN_NORTH_Pin);
 8000b7c:	2180      	movs	r1, #128	; 0x80
 8000b7e:	480c      	ldr	r0, [pc, #48]	; (8000bb0 <toggleGREENs+0x40>)
 8000b80:	f001 f86b 	bl	8001c5a <HAL_GPIO_TogglePin>
	HAL_GPIO_WritePin(RED_WEST_GPIO_Port, RED_WEST_Pin, SET);
 8000b84:	2201      	movs	r2, #1
 8000b86:	2104      	movs	r1, #4
 8000b88:	4809      	ldr	r0, [pc, #36]	; (8000bb0 <toggleGREENs+0x40>)
 8000b8a:	f001 f84e 	bl	8001c2a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(RED_NORTH_GPIO_Port, RED_NORTH_Pin, SET);
 8000b8e:	2201      	movs	r2, #1
 8000b90:	2120      	movs	r1, #32
 8000b92:	4807      	ldr	r0, [pc, #28]	; (8000bb0 <toggleGREENs+0x40>)
 8000b94:	f001 f849 	bl	8001c2a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(YELLOW_WEST_GPIO_Port, YELLOW_WEST_Pin, SET);
 8000b98:	2201      	movs	r2, #1
 8000b9a:	2108      	movs	r1, #8
 8000b9c:	4804      	ldr	r0, [pc, #16]	; (8000bb0 <toggleGREENs+0x40>)
 8000b9e:	f001 f844 	bl	8001c2a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(YELLOW_NORTH_GPIO_Port, YELLOW_NORTH_Pin, SET);
 8000ba2:	2201      	movs	r2, #1
 8000ba4:	2140      	movs	r1, #64	; 0x40
 8000ba6:	4802      	ldr	r0, [pc, #8]	; (8000bb0 <toggleGREENs+0x40>)
 8000ba8:	f001 f83f 	bl	8001c2a <HAL_GPIO_WritePin>
}
 8000bac:	bf00      	nop
 8000bae:	bd80      	pop	{r7, pc}
 8000bb0:	40010800 	.word	0x40010800

08000bb4 <toggleYELLOWs>:
void toggleYELLOWs(){
 8000bb4:	b580      	push	{r7, lr}
 8000bb6:	af00      	add	r7, sp, #0
	HAL_GPIO_TogglePin(YELLOW_WEST_GPIO_Port, YELLOW_WEST_Pin);
 8000bb8:	2108      	movs	r1, #8
 8000bba:	480e      	ldr	r0, [pc, #56]	; (8000bf4 <toggleYELLOWs+0x40>)
 8000bbc:	f001 f84d 	bl	8001c5a <HAL_GPIO_TogglePin>
	HAL_GPIO_TogglePin(YELLOW_NORTH_GPIO_Port, YELLOW_NORTH_Pin);
 8000bc0:	2140      	movs	r1, #64	; 0x40
 8000bc2:	480c      	ldr	r0, [pc, #48]	; (8000bf4 <toggleYELLOWs+0x40>)
 8000bc4:	f001 f849 	bl	8001c5a <HAL_GPIO_TogglePin>
	HAL_GPIO_WritePin(GREEN_WEST_GPIO_Port, GREEN_WEST_Pin, SET);
 8000bc8:	2201      	movs	r2, #1
 8000bca:	2110      	movs	r1, #16
 8000bcc:	4809      	ldr	r0, [pc, #36]	; (8000bf4 <toggleYELLOWs+0x40>)
 8000bce:	f001 f82c 	bl	8001c2a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GREEN_NORTH_GPIO_Port, GREEN_NORTH_Pin, SET);
 8000bd2:	2201      	movs	r2, #1
 8000bd4:	2180      	movs	r1, #128	; 0x80
 8000bd6:	4807      	ldr	r0, [pc, #28]	; (8000bf4 <toggleYELLOWs+0x40>)
 8000bd8:	f001 f827 	bl	8001c2a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(RED_WEST_GPIO_Port, RED_WEST_Pin, SET);
 8000bdc:	2201      	movs	r2, #1
 8000bde:	2104      	movs	r1, #4
 8000be0:	4804      	ldr	r0, [pc, #16]	; (8000bf4 <toggleYELLOWs+0x40>)
 8000be2:	f001 f822 	bl	8001c2a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(RED_NORTH_GPIO_Port, RED_NORTH_Pin, SET);
 8000be6:	2201      	movs	r2, #1
 8000be8:	2120      	movs	r1, #32
 8000bea:	4802      	ldr	r0, [pc, #8]	; (8000bf4 <toggleYELLOWs+0x40>)
 8000bec:	f001 f81d 	bl	8001c2a <HAL_GPIO_WritePin>
}
 8000bf0:	bf00      	nop
 8000bf2:	bd80      	pop	{r7, pc}
 8000bf4:	40010800 	.word	0x40010800

08000bf8 <enableRED_WEST>:

void enableRED_WEST(){
 8000bf8:	b580      	push	{r7, lr}
 8000bfa:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(RED_WEST_GPIO_Port, RED_WEST_Pin, RESET);
 8000bfc:	2200      	movs	r2, #0
 8000bfe:	2104      	movs	r1, #4
 8000c00:	4807      	ldr	r0, [pc, #28]	; (8000c20 <enableRED_WEST+0x28>)
 8000c02:	f001 f812 	bl	8001c2a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GREEN_WEST_GPIO_Port, GREEN_WEST_Pin, SET);
 8000c06:	2201      	movs	r2, #1
 8000c08:	2110      	movs	r1, #16
 8000c0a:	4805      	ldr	r0, [pc, #20]	; (8000c20 <enableRED_WEST+0x28>)
 8000c0c:	f001 f80d 	bl	8001c2a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(YELLOW_WEST_GPIO_Port, YELLOW_WEST_Pin, SET);
 8000c10:	2201      	movs	r2, #1
 8000c12:	2108      	movs	r1, #8
 8000c14:	4802      	ldr	r0, [pc, #8]	; (8000c20 <enableRED_WEST+0x28>)
 8000c16:	f001 f808 	bl	8001c2a <HAL_GPIO_WritePin>
}
 8000c1a:	bf00      	nop
 8000c1c:	bd80      	pop	{r7, pc}
 8000c1e:	bf00      	nop
 8000c20:	40010800 	.word	0x40010800

08000c24 <enableYELLOW_WEST>:
void enableYELLOW_WEST(){
 8000c24:	b580      	push	{r7, lr}
 8000c26:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(RED_WEST_GPIO_Port, RED_WEST_Pin, SET);
 8000c28:	2201      	movs	r2, #1
 8000c2a:	2104      	movs	r1, #4
 8000c2c:	4807      	ldr	r0, [pc, #28]	; (8000c4c <enableYELLOW_WEST+0x28>)
 8000c2e:	f000 fffc 	bl	8001c2a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GREEN_WEST_GPIO_Port, GREEN_WEST_Pin, SET);
 8000c32:	2201      	movs	r2, #1
 8000c34:	2110      	movs	r1, #16
 8000c36:	4805      	ldr	r0, [pc, #20]	; (8000c4c <enableYELLOW_WEST+0x28>)
 8000c38:	f000 fff7 	bl	8001c2a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(YELLOW_WEST_GPIO_Port, YELLOW_WEST_Pin, RESET);
 8000c3c:	2200      	movs	r2, #0
 8000c3e:	2108      	movs	r1, #8
 8000c40:	4802      	ldr	r0, [pc, #8]	; (8000c4c <enableYELLOW_WEST+0x28>)
 8000c42:	f000 fff2 	bl	8001c2a <HAL_GPIO_WritePin>
}
 8000c46:	bf00      	nop
 8000c48:	bd80      	pop	{r7, pc}
 8000c4a:	bf00      	nop
 8000c4c:	40010800 	.word	0x40010800

08000c50 <enableGREEN_WEST>:
void enableGREEN_WEST(){
 8000c50:	b580      	push	{r7, lr}
 8000c52:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(RED_WEST_GPIO_Port, RED_WEST_Pin, SET);
 8000c54:	2201      	movs	r2, #1
 8000c56:	2104      	movs	r1, #4
 8000c58:	4807      	ldr	r0, [pc, #28]	; (8000c78 <enableGREEN_WEST+0x28>)
 8000c5a:	f000 ffe6 	bl	8001c2a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GREEN_WEST_GPIO_Port, GREEN_WEST_Pin, RESET);
 8000c5e:	2200      	movs	r2, #0
 8000c60:	2110      	movs	r1, #16
 8000c62:	4805      	ldr	r0, [pc, #20]	; (8000c78 <enableGREEN_WEST+0x28>)
 8000c64:	f000 ffe1 	bl	8001c2a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(YELLOW_WEST_GPIO_Port, YELLOW_WEST_Pin, SET);
 8000c68:	2201      	movs	r2, #1
 8000c6a:	2108      	movs	r1, #8
 8000c6c:	4802      	ldr	r0, [pc, #8]	; (8000c78 <enableGREEN_WEST+0x28>)
 8000c6e:	f000 ffdc 	bl	8001c2a <HAL_GPIO_WritePin>
}
 8000c72:	bf00      	nop
 8000c74:	bd80      	pop	{r7, pc}
 8000c76:	bf00      	nop
 8000c78:	40010800 	.word	0x40010800

08000c7c <enableRED_NORTH>:

void enableRED_NORTH(){
 8000c7c:	b580      	push	{r7, lr}
 8000c7e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(RED_NORTH_GPIO_Port, RED_NORTH_Pin, RESET);
 8000c80:	2200      	movs	r2, #0
 8000c82:	2120      	movs	r1, #32
 8000c84:	4807      	ldr	r0, [pc, #28]	; (8000ca4 <enableRED_NORTH+0x28>)
 8000c86:	f000 ffd0 	bl	8001c2a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GREEN_NORTH_GPIO_Port, GREEN_NORTH_Pin, SET);
 8000c8a:	2201      	movs	r2, #1
 8000c8c:	2180      	movs	r1, #128	; 0x80
 8000c8e:	4805      	ldr	r0, [pc, #20]	; (8000ca4 <enableRED_NORTH+0x28>)
 8000c90:	f000 ffcb 	bl	8001c2a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(YELLOW_NORTH_GPIO_Port, YELLOW_NORTH_Pin, SET);
 8000c94:	2201      	movs	r2, #1
 8000c96:	2140      	movs	r1, #64	; 0x40
 8000c98:	4802      	ldr	r0, [pc, #8]	; (8000ca4 <enableRED_NORTH+0x28>)
 8000c9a:	f000 ffc6 	bl	8001c2a <HAL_GPIO_WritePin>
}
 8000c9e:	bf00      	nop
 8000ca0:	bd80      	pop	{r7, pc}
 8000ca2:	bf00      	nop
 8000ca4:	40010800 	.word	0x40010800

08000ca8 <enableGREEN_NORTH>:
void enableGREEN_NORTH(){
 8000ca8:	b580      	push	{r7, lr}
 8000caa:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(RED_NORTH_GPIO_Port, RED_NORTH_Pin, SET);
 8000cac:	2201      	movs	r2, #1
 8000cae:	2120      	movs	r1, #32
 8000cb0:	4807      	ldr	r0, [pc, #28]	; (8000cd0 <enableGREEN_NORTH+0x28>)
 8000cb2:	f000 ffba 	bl	8001c2a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GREEN_NORTH_GPIO_Port, GREEN_NORTH_Pin, RESET);
 8000cb6:	2200      	movs	r2, #0
 8000cb8:	2180      	movs	r1, #128	; 0x80
 8000cba:	4805      	ldr	r0, [pc, #20]	; (8000cd0 <enableGREEN_NORTH+0x28>)
 8000cbc:	f000 ffb5 	bl	8001c2a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(YELLOW_NORTH_GPIO_Port, YELLOW_NORTH_Pin, SET);
 8000cc0:	2201      	movs	r2, #1
 8000cc2:	2140      	movs	r1, #64	; 0x40
 8000cc4:	4802      	ldr	r0, [pc, #8]	; (8000cd0 <enableGREEN_NORTH+0x28>)
 8000cc6:	f000 ffb0 	bl	8001c2a <HAL_GPIO_WritePin>
}
 8000cca:	bf00      	nop
 8000ccc:	bd80      	pop	{r7, pc}
 8000cce:	bf00      	nop
 8000cd0:	40010800 	.word	0x40010800

08000cd4 <enableYELLOW_NORTH>:
void enableYELLOW_NORTH(){
 8000cd4:	b580      	push	{r7, lr}
 8000cd6:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(RED_NORTH_GPIO_Port, RED_NORTH_Pin, SET);
 8000cd8:	2201      	movs	r2, #1
 8000cda:	2120      	movs	r1, #32
 8000cdc:	4807      	ldr	r0, [pc, #28]	; (8000cfc <enableYELLOW_NORTH+0x28>)
 8000cde:	f000 ffa4 	bl	8001c2a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GREEN_NORTH_GPIO_Port, GREEN_NORTH_Pin, SET);
 8000ce2:	2201      	movs	r2, #1
 8000ce4:	2180      	movs	r1, #128	; 0x80
 8000ce6:	4805      	ldr	r0, [pc, #20]	; (8000cfc <enableYELLOW_NORTH+0x28>)
 8000ce8:	f000 ff9f 	bl	8001c2a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(YELLOW_NORTH_GPIO_Port, YELLOW_NORTH_Pin, RESET);
 8000cec:	2200      	movs	r2, #0
 8000cee:	2140      	movs	r1, #64	; 0x40
 8000cf0:	4802      	ldr	r0, [pc, #8]	; (8000cfc <enableYELLOW_NORTH+0x28>)
 8000cf2:	f000 ff9a 	bl	8001c2a <HAL_GPIO_WritePin>
}
 8000cf6:	bf00      	nop
 8000cf8:	bd80      	pop	{r7, pc}
 8000cfa:	bf00      	nop
 8000cfc:	40010800 	.word	0x40010800

08000d00 <display7SEG1>:

const uint8_t SEG7[10] = {0x40, 0x79, 0x24, 0x30, 0x19, 0x12, 0x02, 0x78, 0x00, 0x10};

void display7SEG1(int num){
 8000d00:	b580      	push	{r7, lr}
 8000d02:	b082      	sub	sp, #8
 8000d04:	af00      	add	r7, sp, #0
 8000d06:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(a_GPIO_Port, a_Pin, ((SEG7[num]>>0)&0x01));
 8000d08:	4a31      	ldr	r2, [pc, #196]	; (8000dd0 <display7SEG1+0xd0>)
 8000d0a:	687b      	ldr	r3, [r7, #4]
 8000d0c:	4413      	add	r3, r2
 8000d0e:	781b      	ldrb	r3, [r3, #0]
 8000d10:	f003 0301 	and.w	r3, r3, #1
 8000d14:	b2db      	uxtb	r3, r3
 8000d16:	461a      	mov	r2, r3
 8000d18:	2101      	movs	r1, #1
 8000d1a:	482e      	ldr	r0, [pc, #184]	; (8000dd4 <display7SEG1+0xd4>)
 8000d1c:	f000 ff85 	bl	8001c2a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(b_GPIO_Port, b_Pin, ((SEG7[num]>>1)&0x01));
 8000d20:	4a2b      	ldr	r2, [pc, #172]	; (8000dd0 <display7SEG1+0xd0>)
 8000d22:	687b      	ldr	r3, [r7, #4]
 8000d24:	4413      	add	r3, r2
 8000d26:	781b      	ldrb	r3, [r3, #0]
 8000d28:	085b      	lsrs	r3, r3, #1
 8000d2a:	b2db      	uxtb	r3, r3
 8000d2c:	f003 0301 	and.w	r3, r3, #1
 8000d30:	b2db      	uxtb	r3, r3
 8000d32:	461a      	mov	r2, r3
 8000d34:	2102      	movs	r1, #2
 8000d36:	4827      	ldr	r0, [pc, #156]	; (8000dd4 <display7SEG1+0xd4>)
 8000d38:	f000 ff77 	bl	8001c2a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(c_GPIO_Port, c_Pin, ((SEG7[num]>>2)&0x01));
 8000d3c:	4a24      	ldr	r2, [pc, #144]	; (8000dd0 <display7SEG1+0xd0>)
 8000d3e:	687b      	ldr	r3, [r7, #4]
 8000d40:	4413      	add	r3, r2
 8000d42:	781b      	ldrb	r3, [r3, #0]
 8000d44:	089b      	lsrs	r3, r3, #2
 8000d46:	b2db      	uxtb	r3, r3
 8000d48:	f003 0301 	and.w	r3, r3, #1
 8000d4c:	b2db      	uxtb	r3, r3
 8000d4e:	461a      	mov	r2, r3
 8000d50:	2104      	movs	r1, #4
 8000d52:	4820      	ldr	r0, [pc, #128]	; (8000dd4 <display7SEG1+0xd4>)
 8000d54:	f000 ff69 	bl	8001c2a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(d_GPIO_Port, d_Pin, ((SEG7[num]>>3)&0x01));
 8000d58:	4a1d      	ldr	r2, [pc, #116]	; (8000dd0 <display7SEG1+0xd0>)
 8000d5a:	687b      	ldr	r3, [r7, #4]
 8000d5c:	4413      	add	r3, r2
 8000d5e:	781b      	ldrb	r3, [r3, #0]
 8000d60:	08db      	lsrs	r3, r3, #3
 8000d62:	b2db      	uxtb	r3, r3
 8000d64:	f003 0301 	and.w	r3, r3, #1
 8000d68:	b2db      	uxtb	r3, r3
 8000d6a:	461a      	mov	r2, r3
 8000d6c:	2108      	movs	r1, #8
 8000d6e:	4819      	ldr	r0, [pc, #100]	; (8000dd4 <display7SEG1+0xd4>)
 8000d70:	f000 ff5b 	bl	8001c2a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(e_GPIO_Port, e_Pin, ((SEG7[num]>>4)&0x01));
 8000d74:	4a16      	ldr	r2, [pc, #88]	; (8000dd0 <display7SEG1+0xd0>)
 8000d76:	687b      	ldr	r3, [r7, #4]
 8000d78:	4413      	add	r3, r2
 8000d7a:	781b      	ldrb	r3, [r3, #0]
 8000d7c:	091b      	lsrs	r3, r3, #4
 8000d7e:	b2db      	uxtb	r3, r3
 8000d80:	f003 0301 	and.w	r3, r3, #1
 8000d84:	b2db      	uxtb	r3, r3
 8000d86:	461a      	mov	r2, r3
 8000d88:	2110      	movs	r1, #16
 8000d8a:	4812      	ldr	r0, [pc, #72]	; (8000dd4 <display7SEG1+0xd4>)
 8000d8c:	f000 ff4d 	bl	8001c2a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(f_GPIO_Port, f_Pin, ((SEG7[num]>>5)&0x01));
 8000d90:	4a0f      	ldr	r2, [pc, #60]	; (8000dd0 <display7SEG1+0xd0>)
 8000d92:	687b      	ldr	r3, [r7, #4]
 8000d94:	4413      	add	r3, r2
 8000d96:	781b      	ldrb	r3, [r3, #0]
 8000d98:	095b      	lsrs	r3, r3, #5
 8000d9a:	b2db      	uxtb	r3, r3
 8000d9c:	f003 0301 	and.w	r3, r3, #1
 8000da0:	b2db      	uxtb	r3, r3
 8000da2:	461a      	mov	r2, r3
 8000da4:	2120      	movs	r1, #32
 8000da6:	480b      	ldr	r0, [pc, #44]	; (8000dd4 <display7SEG1+0xd4>)
 8000da8:	f000 ff3f 	bl	8001c2a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(g_GPIO_Port, g_Pin, ((SEG7[num]>>6)&0x01));
 8000dac:	4a08      	ldr	r2, [pc, #32]	; (8000dd0 <display7SEG1+0xd0>)
 8000dae:	687b      	ldr	r3, [r7, #4]
 8000db0:	4413      	add	r3, r2
 8000db2:	781b      	ldrb	r3, [r3, #0]
 8000db4:	099b      	lsrs	r3, r3, #6
 8000db6:	b2db      	uxtb	r3, r3
 8000db8:	f003 0301 	and.w	r3, r3, #1
 8000dbc:	b2db      	uxtb	r3, r3
 8000dbe:	461a      	mov	r2, r3
 8000dc0:	2140      	movs	r1, #64	; 0x40
 8000dc2:	4804      	ldr	r0, [pc, #16]	; (8000dd4 <display7SEG1+0xd4>)
 8000dc4:	f000 ff31 	bl	8001c2a <HAL_GPIO_WritePin>
}
 8000dc8:	bf00      	nop
 8000dca:	3708      	adds	r7, #8
 8000dcc:	46bd      	mov	sp, r7
 8000dce:	bd80      	pop	{r7, pc}
 8000dd0:	08002ca4 	.word	0x08002ca4
 8000dd4:	40010c00 	.word	0x40010c00

08000dd8 <display7SEG2>:

void display7SEG2(int num){
 8000dd8:	b580      	push	{r7, lr}
 8000dda:	b082      	sub	sp, #8
 8000ddc:	af00      	add	r7, sp, #0
 8000dde:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(a1_GPIO_Port, a1_Pin, ((SEG7[num]>>0)&0x01));
 8000de0:	4a34      	ldr	r2, [pc, #208]	; (8000eb4 <display7SEG2+0xdc>)
 8000de2:	687b      	ldr	r3, [r7, #4]
 8000de4:	4413      	add	r3, r2
 8000de6:	781b      	ldrb	r3, [r3, #0]
 8000de8:	f003 0301 	and.w	r3, r3, #1
 8000dec:	b2db      	uxtb	r3, r3
 8000dee:	461a      	mov	r2, r3
 8000df0:	2180      	movs	r1, #128	; 0x80
 8000df2:	4831      	ldr	r0, [pc, #196]	; (8000eb8 <display7SEG2+0xe0>)
 8000df4:	f000 ff19 	bl	8001c2a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(b1_GPIO_Port, b1_Pin, ((SEG7[num]>>1)&0x01));
 8000df8:	4a2e      	ldr	r2, [pc, #184]	; (8000eb4 <display7SEG2+0xdc>)
 8000dfa:	687b      	ldr	r3, [r7, #4]
 8000dfc:	4413      	add	r3, r2
 8000dfe:	781b      	ldrb	r3, [r3, #0]
 8000e00:	085b      	lsrs	r3, r3, #1
 8000e02:	b2db      	uxtb	r3, r3
 8000e04:	f003 0301 	and.w	r3, r3, #1
 8000e08:	b2db      	uxtb	r3, r3
 8000e0a:	461a      	mov	r2, r3
 8000e0c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000e10:	4829      	ldr	r0, [pc, #164]	; (8000eb8 <display7SEG2+0xe0>)
 8000e12:	f000 ff0a 	bl	8001c2a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(c1_GPIO_Port, c1_Pin, ((SEG7[num]>>2)&0x01));
 8000e16:	4a27      	ldr	r2, [pc, #156]	; (8000eb4 <display7SEG2+0xdc>)
 8000e18:	687b      	ldr	r3, [r7, #4]
 8000e1a:	4413      	add	r3, r2
 8000e1c:	781b      	ldrb	r3, [r3, #0]
 8000e1e:	089b      	lsrs	r3, r3, #2
 8000e20:	b2db      	uxtb	r3, r3
 8000e22:	f003 0301 	and.w	r3, r3, #1
 8000e26:	b2db      	uxtb	r3, r3
 8000e28:	461a      	mov	r2, r3
 8000e2a:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000e2e:	4822      	ldr	r0, [pc, #136]	; (8000eb8 <display7SEG2+0xe0>)
 8000e30:	f000 fefb 	bl	8001c2a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(d1_GPIO_Port, d1_Pin, ((SEG7[num]>>3)&0x01));
 8000e34:	4a1f      	ldr	r2, [pc, #124]	; (8000eb4 <display7SEG2+0xdc>)
 8000e36:	687b      	ldr	r3, [r7, #4]
 8000e38:	4413      	add	r3, r2
 8000e3a:	781b      	ldrb	r3, [r3, #0]
 8000e3c:	08db      	lsrs	r3, r3, #3
 8000e3e:	b2db      	uxtb	r3, r3
 8000e40:	f003 0301 	and.w	r3, r3, #1
 8000e44:	b2db      	uxtb	r3, r3
 8000e46:	461a      	mov	r2, r3
 8000e48:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000e4c:	481a      	ldr	r0, [pc, #104]	; (8000eb8 <display7SEG2+0xe0>)
 8000e4e:	f000 feec 	bl	8001c2a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(e1_GPIO_Port, e1_Pin, ((SEG7[num]>>4)&0x01));
 8000e52:	4a18      	ldr	r2, [pc, #96]	; (8000eb4 <display7SEG2+0xdc>)
 8000e54:	687b      	ldr	r3, [r7, #4]
 8000e56:	4413      	add	r3, r2
 8000e58:	781b      	ldrb	r3, [r3, #0]
 8000e5a:	091b      	lsrs	r3, r3, #4
 8000e5c:	b2db      	uxtb	r3, r3
 8000e5e:	f003 0301 	and.w	r3, r3, #1
 8000e62:	b2db      	uxtb	r3, r3
 8000e64:	461a      	mov	r2, r3
 8000e66:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000e6a:	4813      	ldr	r0, [pc, #76]	; (8000eb8 <display7SEG2+0xe0>)
 8000e6c:	f000 fedd 	bl	8001c2a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(f1_GPIO_Port, f1_Pin, ((SEG7[num]>>5)&0x01));
 8000e70:	4a10      	ldr	r2, [pc, #64]	; (8000eb4 <display7SEG2+0xdc>)
 8000e72:	687b      	ldr	r3, [r7, #4]
 8000e74:	4413      	add	r3, r2
 8000e76:	781b      	ldrb	r3, [r3, #0]
 8000e78:	095b      	lsrs	r3, r3, #5
 8000e7a:	b2db      	uxtb	r3, r3
 8000e7c:	f003 0301 	and.w	r3, r3, #1
 8000e80:	b2db      	uxtb	r3, r3
 8000e82:	461a      	mov	r2, r3
 8000e84:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000e88:	480b      	ldr	r0, [pc, #44]	; (8000eb8 <display7SEG2+0xe0>)
 8000e8a:	f000 fece 	bl	8001c2a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(g1_GPIO_Port, g1_Pin, ((SEG7[num]>>6)&0x01));
 8000e8e:	4a09      	ldr	r2, [pc, #36]	; (8000eb4 <display7SEG2+0xdc>)
 8000e90:	687b      	ldr	r3, [r7, #4]
 8000e92:	4413      	add	r3, r2
 8000e94:	781b      	ldrb	r3, [r3, #0]
 8000e96:	099b      	lsrs	r3, r3, #6
 8000e98:	b2db      	uxtb	r3, r3
 8000e9a:	f003 0301 	and.w	r3, r3, #1
 8000e9e:	b2db      	uxtb	r3, r3
 8000ea0:	461a      	mov	r2, r3
 8000ea2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000ea6:	4804      	ldr	r0, [pc, #16]	; (8000eb8 <display7SEG2+0xe0>)
 8000ea8:	f000 febf 	bl	8001c2a <HAL_GPIO_WritePin>
}
 8000eac:	bf00      	nop
 8000eae:	3708      	adds	r7, #8
 8000eb0:	46bd      	mov	sp, r7
 8000eb2:	bd80      	pop	{r7, pc}
 8000eb4:	08002ca4 	.word	0x08002ca4
 8000eb8:	40010c00 	.word	0x40010c00

08000ebc <display_chuc>:

void display_chuc(int num1, int num2){
 8000ebc:	b580      	push	{r7, lr}
 8000ebe:	b082      	sub	sp, #8
 8000ec0:	af00      	add	r7, sp, #0
 8000ec2:	6078      	str	r0, [r7, #4]
 8000ec4:	6039      	str	r1, [r7, #0]
	HAL_GPIO_WritePin(EN0_GPIO_Port, EN0_Pin, RESET);
 8000ec6:	2200      	movs	r2, #0
 8000ec8:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000ecc:	4816      	ldr	r0, [pc, #88]	; (8000f28 <display_chuc+0x6c>)
 8000ece:	f000 feac 	bl	8001c2a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(EN1_GPIO_Port, EN1_Pin, SET);
 8000ed2:	2201      	movs	r2, #1
 8000ed4:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000ed8:	4813      	ldr	r0, [pc, #76]	; (8000f28 <display_chuc+0x6c>)
 8000eda:	f000 fea6 	bl	8001c2a <HAL_GPIO_WritePin>
	display7SEG1(num1/10);
 8000ede:	687b      	ldr	r3, [r7, #4]
 8000ee0:	4a12      	ldr	r2, [pc, #72]	; (8000f2c <display_chuc+0x70>)
 8000ee2:	fb82 1203 	smull	r1, r2, r2, r3
 8000ee6:	1092      	asrs	r2, r2, #2
 8000ee8:	17db      	asrs	r3, r3, #31
 8000eea:	1ad3      	subs	r3, r2, r3
 8000eec:	4618      	mov	r0, r3
 8000eee:	f7ff ff07 	bl	8000d00 <display7SEG1>

	HAL_GPIO_WritePin(EN2_GPIO_Port, EN2_Pin, RESET);
 8000ef2:	2200      	movs	r2, #0
 8000ef4:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000ef8:	480b      	ldr	r0, [pc, #44]	; (8000f28 <display_chuc+0x6c>)
 8000efa:	f000 fe96 	bl	8001c2a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(EN3_GPIO_Port, EN3_Pin, SET);
 8000efe:	2201      	movs	r2, #1
 8000f00:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000f04:	4808      	ldr	r0, [pc, #32]	; (8000f28 <display_chuc+0x6c>)
 8000f06:	f000 fe90 	bl	8001c2a <HAL_GPIO_WritePin>
	display7SEG2(num2/10);
 8000f0a:	683b      	ldr	r3, [r7, #0]
 8000f0c:	4a07      	ldr	r2, [pc, #28]	; (8000f2c <display_chuc+0x70>)
 8000f0e:	fb82 1203 	smull	r1, r2, r2, r3
 8000f12:	1092      	asrs	r2, r2, #2
 8000f14:	17db      	asrs	r3, r3, #31
 8000f16:	1ad3      	subs	r3, r2, r3
 8000f18:	4618      	mov	r0, r3
 8000f1a:	f7ff ff5d 	bl	8000dd8 <display7SEG2>
}
 8000f1e:	bf00      	nop
 8000f20:	3708      	adds	r7, #8
 8000f22:	46bd      	mov	sp, r7
 8000f24:	bd80      	pop	{r7, pc}
 8000f26:	bf00      	nop
 8000f28:	40010800 	.word	0x40010800
 8000f2c:	66666667 	.word	0x66666667

08000f30 <display_don_vi>:

void display_don_vi(int num1, int num2){
 8000f30:	b580      	push	{r7, lr}
 8000f32:	b082      	sub	sp, #8
 8000f34:	af00      	add	r7, sp, #0
 8000f36:	6078      	str	r0, [r7, #4]
 8000f38:	6039      	str	r1, [r7, #0]
	HAL_GPIO_WritePin(EN0_GPIO_Port, EN0_Pin, SET);
 8000f3a:	2201      	movs	r2, #1
 8000f3c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000f40:	481b      	ldr	r0, [pc, #108]	; (8000fb0 <display_don_vi+0x80>)
 8000f42:	f000 fe72 	bl	8001c2a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(EN1_GPIO_Port, EN1_Pin, RESET);
 8000f46:	2200      	movs	r2, #0
 8000f48:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000f4c:	4818      	ldr	r0, [pc, #96]	; (8000fb0 <display_don_vi+0x80>)
 8000f4e:	f000 fe6c 	bl	8001c2a <HAL_GPIO_WritePin>
	display7SEG1(num1%10);
 8000f52:	687a      	ldr	r2, [r7, #4]
 8000f54:	4b17      	ldr	r3, [pc, #92]	; (8000fb4 <display_don_vi+0x84>)
 8000f56:	fb83 1302 	smull	r1, r3, r3, r2
 8000f5a:	1099      	asrs	r1, r3, #2
 8000f5c:	17d3      	asrs	r3, r2, #31
 8000f5e:	1ac9      	subs	r1, r1, r3
 8000f60:	460b      	mov	r3, r1
 8000f62:	009b      	lsls	r3, r3, #2
 8000f64:	440b      	add	r3, r1
 8000f66:	005b      	lsls	r3, r3, #1
 8000f68:	1ad1      	subs	r1, r2, r3
 8000f6a:	4608      	mov	r0, r1
 8000f6c:	f7ff fec8 	bl	8000d00 <display7SEG1>

	HAL_GPIO_WritePin(EN2_GPIO_Port, EN2_Pin, SET);
 8000f70:	2201      	movs	r2, #1
 8000f72:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000f76:	480e      	ldr	r0, [pc, #56]	; (8000fb0 <display_don_vi+0x80>)
 8000f78:	f000 fe57 	bl	8001c2a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(EN3_GPIO_Port, EN3_Pin, RESET);
 8000f7c:	2200      	movs	r2, #0
 8000f7e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000f82:	480b      	ldr	r0, [pc, #44]	; (8000fb0 <display_don_vi+0x80>)
 8000f84:	f000 fe51 	bl	8001c2a <HAL_GPIO_WritePin>
	display7SEG2(num2%10);
 8000f88:	683a      	ldr	r2, [r7, #0]
 8000f8a:	4b0a      	ldr	r3, [pc, #40]	; (8000fb4 <display_don_vi+0x84>)
 8000f8c:	fb83 1302 	smull	r1, r3, r3, r2
 8000f90:	1099      	asrs	r1, r3, #2
 8000f92:	17d3      	asrs	r3, r2, #31
 8000f94:	1ac9      	subs	r1, r1, r3
 8000f96:	460b      	mov	r3, r1
 8000f98:	009b      	lsls	r3, r3, #2
 8000f9a:	440b      	add	r3, r1
 8000f9c:	005b      	lsls	r3, r3, #1
 8000f9e:	1ad1      	subs	r1, r2, r3
 8000fa0:	4608      	mov	r0, r1
 8000fa2:	f7ff ff19 	bl	8000dd8 <display7SEG2>
}
 8000fa6:	bf00      	nop
 8000fa8:	3708      	adds	r7, #8
 8000faa:	46bd      	mov	sp, r7
 8000fac:	bd80      	pop	{r7, pc}
 8000fae:	bf00      	nop
 8000fb0:	40010800 	.word	0x40010800
 8000fb4:	66666667 	.word	0x66666667

08000fb8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000fb8:	b580      	push	{r7, lr}
 8000fba:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000fbc:	f000 fb34 	bl	8001628 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000fc0:	f000 f812 	bl	8000fe8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_TIM2_Init();
 8000fc4:	f000 f84c 	bl	8001060 <MX_TIM2_Init>
  MX_GPIO_Init();
 8000fc8:	f000 f896 	bl	80010f8 <MX_GPIO_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT (&htim2);
 8000fcc:	4805      	ldr	r0, [pc, #20]	; (8000fe4 <main+0x2c>)
 8000fce:	f001 fa95 	bl	80024fc <HAL_TIM_Base_Start_IT>
  LedTimeInit();
 8000fd2:	f7ff fd1f 	bl	8000a14 <LedTimeInit>
  Setup();
 8000fd6:	f7ff fd33 	bl	8000a40 <Setup>
  while (1)
  {
	  //if (isButtonPressed(BUTTON1)==1) RIDE_ON();
	  //if (isButtonPressed(BUTTON2)==1) toggleGREENs();
	  //if (isButtonPressed(BUTTON3)==1) toggleYELLOWs();
	  fsm_auto_run();
 8000fda:	f7ff f961 	bl	80002a0 <fsm_auto_run>
	  fsm_manual_run();
 8000fde:	f7ff fafd 	bl	80005dc <fsm_manual_run>
	  fsm_auto_run();
 8000fe2:	e7fa      	b.n	8000fda <main+0x22>
 8000fe4:	20000120 	.word	0x20000120

08000fe8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000fe8:	b580      	push	{r7, lr}
 8000fea:	b090      	sub	sp, #64	; 0x40
 8000fec:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000fee:	f107 0318 	add.w	r3, r7, #24
 8000ff2:	2228      	movs	r2, #40	; 0x28
 8000ff4:	2100      	movs	r1, #0
 8000ff6:	4618      	mov	r0, r3
 8000ff8:	f001 fe38 	bl	8002c6c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000ffc:	1d3b      	adds	r3, r7, #4
 8000ffe:	2200      	movs	r2, #0
 8001000:	601a      	str	r2, [r3, #0]
 8001002:	605a      	str	r2, [r3, #4]
 8001004:	609a      	str	r2, [r3, #8]
 8001006:	60da      	str	r2, [r3, #12]
 8001008:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800100a:	2302      	movs	r3, #2
 800100c:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800100e:	2301      	movs	r3, #1
 8001010:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001012:	2310      	movs	r3, #16
 8001014:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001016:	2300      	movs	r3, #0
 8001018:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800101a:	f107 0318 	add.w	r3, r7, #24
 800101e:	4618      	mov	r0, r3
 8001020:	f000 fe34 	bl	8001c8c <HAL_RCC_OscConfig>
 8001024:	4603      	mov	r3, r0
 8001026:	2b00      	cmp	r3, #0
 8001028:	d001      	beq.n	800102e <SystemClock_Config+0x46>
  {
    Error_Handler();
 800102a:	f000 f8d5 	bl	80011d8 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800102e:	230f      	movs	r3, #15
 8001030:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8001032:	2300      	movs	r3, #0
 8001034:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001036:	2300      	movs	r3, #0
 8001038:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800103a:	2300      	movs	r3, #0
 800103c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800103e:	2300      	movs	r3, #0
 8001040:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001042:	1d3b      	adds	r3, r7, #4
 8001044:	2100      	movs	r1, #0
 8001046:	4618      	mov	r0, r3
 8001048:	f001 f8a0 	bl	800218c <HAL_RCC_ClockConfig>
 800104c:	4603      	mov	r3, r0
 800104e:	2b00      	cmp	r3, #0
 8001050:	d001      	beq.n	8001056 <SystemClock_Config+0x6e>
  {
    Error_Handler();
 8001052:	f000 f8c1 	bl	80011d8 <Error_Handler>
  }
}
 8001056:	bf00      	nop
 8001058:	3740      	adds	r7, #64	; 0x40
 800105a:	46bd      	mov	sp, r7
 800105c:	bd80      	pop	{r7, pc}
	...

08001060 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001060:	b580      	push	{r7, lr}
 8001062:	b086      	sub	sp, #24
 8001064:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001066:	f107 0308 	add.w	r3, r7, #8
 800106a:	2200      	movs	r2, #0
 800106c:	601a      	str	r2, [r3, #0]
 800106e:	605a      	str	r2, [r3, #4]
 8001070:	609a      	str	r2, [r3, #8]
 8001072:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001074:	463b      	mov	r3, r7
 8001076:	2200      	movs	r2, #0
 8001078:	601a      	str	r2, [r3, #0]
 800107a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800107c:	4b1d      	ldr	r3, [pc, #116]	; (80010f4 <MX_TIM2_Init+0x94>)
 800107e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001082:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 7999;
 8001084:	4b1b      	ldr	r3, [pc, #108]	; (80010f4 <MX_TIM2_Init+0x94>)
 8001086:	f641 723f 	movw	r2, #7999	; 0x1f3f
 800108a:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800108c:	4b19      	ldr	r3, [pc, #100]	; (80010f4 <MX_TIM2_Init+0x94>)
 800108e:	2200      	movs	r2, #0
 8001090:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 9;
 8001092:	4b18      	ldr	r3, [pc, #96]	; (80010f4 <MX_TIM2_Init+0x94>)
 8001094:	2209      	movs	r2, #9
 8001096:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001098:	4b16      	ldr	r3, [pc, #88]	; (80010f4 <MX_TIM2_Init+0x94>)
 800109a:	2200      	movs	r2, #0
 800109c:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800109e:	4b15      	ldr	r3, [pc, #84]	; (80010f4 <MX_TIM2_Init+0x94>)
 80010a0:	2200      	movs	r2, #0
 80010a2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80010a4:	4813      	ldr	r0, [pc, #76]	; (80010f4 <MX_TIM2_Init+0x94>)
 80010a6:	f001 f9d9 	bl	800245c <HAL_TIM_Base_Init>
 80010aa:	4603      	mov	r3, r0
 80010ac:	2b00      	cmp	r3, #0
 80010ae:	d001      	beq.n	80010b4 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 80010b0:	f000 f892 	bl	80011d8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80010b4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80010b8:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80010ba:	f107 0308 	add.w	r3, r7, #8
 80010be:	4619      	mov	r1, r3
 80010c0:	480c      	ldr	r0, [pc, #48]	; (80010f4 <MX_TIM2_Init+0x94>)
 80010c2:	f001 fb6f 	bl	80027a4 <HAL_TIM_ConfigClockSource>
 80010c6:	4603      	mov	r3, r0
 80010c8:	2b00      	cmp	r3, #0
 80010ca:	d001      	beq.n	80010d0 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 80010cc:	f000 f884 	bl	80011d8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80010d0:	2300      	movs	r3, #0
 80010d2:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80010d4:	2300      	movs	r3, #0
 80010d6:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80010d8:	463b      	mov	r3, r7
 80010da:	4619      	mov	r1, r3
 80010dc:	4805      	ldr	r0, [pc, #20]	; (80010f4 <MX_TIM2_Init+0x94>)
 80010de:	f001 fd37 	bl	8002b50 <HAL_TIMEx_MasterConfigSynchronization>
 80010e2:	4603      	mov	r3, r0
 80010e4:	2b00      	cmp	r3, #0
 80010e6:	d001      	beq.n	80010ec <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 80010e8:	f000 f876 	bl	80011d8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80010ec:	bf00      	nop
 80010ee:	3718      	adds	r7, #24
 80010f0:	46bd      	mov	sp, r7
 80010f2:	bd80      	pop	{r7, pc}
 80010f4:	20000120 	.word	0x20000120

080010f8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80010f8:	b580      	push	{r7, lr}
 80010fa:	b086      	sub	sp, #24
 80010fc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010fe:	f107 0308 	add.w	r3, r7, #8
 8001102:	2200      	movs	r2, #0
 8001104:	601a      	str	r2, [r3, #0]
 8001106:	605a      	str	r2, [r3, #4]
 8001108:	609a      	str	r2, [r3, #8]
 800110a:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800110c:	4b29      	ldr	r3, [pc, #164]	; (80011b4 <MX_GPIO_Init+0xbc>)
 800110e:	699b      	ldr	r3, [r3, #24]
 8001110:	4a28      	ldr	r2, [pc, #160]	; (80011b4 <MX_GPIO_Init+0xbc>)
 8001112:	f043 0304 	orr.w	r3, r3, #4
 8001116:	6193      	str	r3, [r2, #24]
 8001118:	4b26      	ldr	r3, [pc, #152]	; (80011b4 <MX_GPIO_Init+0xbc>)
 800111a:	699b      	ldr	r3, [r3, #24]
 800111c:	f003 0304 	and.w	r3, r3, #4
 8001120:	607b      	str	r3, [r7, #4]
 8001122:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001124:	4b23      	ldr	r3, [pc, #140]	; (80011b4 <MX_GPIO_Init+0xbc>)
 8001126:	699b      	ldr	r3, [r3, #24]
 8001128:	4a22      	ldr	r2, [pc, #136]	; (80011b4 <MX_GPIO_Init+0xbc>)
 800112a:	f043 0308 	orr.w	r3, r3, #8
 800112e:	6193      	str	r3, [r2, #24]
 8001130:	4b20      	ldr	r3, [pc, #128]	; (80011b4 <MX_GPIO_Init+0xbc>)
 8001132:	699b      	ldr	r3, [r3, #24]
 8001134:	f003 0308 	and.w	r3, r3, #8
 8001138:	603b      	str	r3, [r7, #0]
 800113a:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, RED_WEST_Pin|YELLOW_WEST_Pin|GREEN_WEST_Pin|RED_NORTH_Pin
 800113c:	2200      	movs	r2, #0
 800113e:	f640 71fc 	movw	r1, #4092	; 0xffc
 8001142:	481d      	ldr	r0, [pc, #116]	; (80011b8 <MX_GPIO_Init+0xc0>)
 8001144:	f000 fd71 	bl	8001c2a <HAL_GPIO_WritePin>
                          |YELLOW_NORTH_Pin|GREEN_NORTH_Pin|EN0_Pin|EN1_Pin
                          |EN2_Pin|EN3_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, a_Pin|b_Pin|c_Pin|d1_Pin
 8001148:	2200      	movs	r2, #0
 800114a:	f643 71ff 	movw	r1, #16383	; 0x3fff
 800114e:	481b      	ldr	r0, [pc, #108]	; (80011bc <MX_GPIO_Init+0xc4>)
 8001150:	f000 fd6b 	bl	8001c2a <HAL_GPIO_WritePin>
                          |b1_Pin|c1_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : RED_WEST_Pin YELLOW_WEST_Pin GREEN_WEST_Pin RED_NORTH_Pin
                           YELLOW_NORTH_Pin GREEN_NORTH_Pin EN0_Pin EN1_Pin
                           EN2_Pin EN3_Pin */
  GPIO_InitStruct.Pin = RED_WEST_Pin|YELLOW_WEST_Pin|GREEN_WEST_Pin|RED_NORTH_Pin
 8001154:	f640 73fc 	movw	r3, #4092	; 0xffc
 8001158:	60bb      	str	r3, [r7, #8]
                          |YELLOW_NORTH_Pin|GREEN_NORTH_Pin|EN0_Pin|EN1_Pin
                          |EN2_Pin|EN3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800115a:	2301      	movs	r3, #1
 800115c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800115e:	2300      	movs	r3, #0
 8001160:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001162:	2302      	movs	r3, #2
 8001164:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001166:	f107 0308 	add.w	r3, r7, #8
 800116a:	4619      	mov	r1, r3
 800116c:	4812      	ldr	r0, [pc, #72]	; (80011b8 <MX_GPIO_Init+0xc0>)
 800116e:	f000 fbcb 	bl	8001908 <HAL_GPIO_Init>

  /*Configure GPIO pins : a_Pin b_Pin c_Pin d1_Pin
                           e1_Pin f1_Pin g1_Pin d_Pin
                           e_Pin f_Pin g_Pin a1_Pin
                           b1_Pin c1_Pin */
  GPIO_InitStruct.Pin = a_Pin|b_Pin|c_Pin|d1_Pin
 8001172:	f643 73ff 	movw	r3, #16383	; 0x3fff
 8001176:	60bb      	str	r3, [r7, #8]
                          |e1_Pin|f1_Pin|g1_Pin|d_Pin
                          |e_Pin|f_Pin|g_Pin|a1_Pin
                          |b1_Pin|c1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001178:	2301      	movs	r3, #1
 800117a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800117c:	2300      	movs	r3, #0
 800117e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001180:	2302      	movs	r3, #2
 8001182:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001184:	f107 0308 	add.w	r3, r7, #8
 8001188:	4619      	mov	r1, r3
 800118a:	480c      	ldr	r0, [pc, #48]	; (80011bc <MX_GPIO_Init+0xc4>)
 800118c:	f000 fbbc 	bl	8001908 <HAL_GPIO_Init>

  /*Configure GPIO pins : BUTTON1_Pin BUTTON2_Pin BUTTON3_Pin */
  GPIO_InitStruct.Pin = BUTTON1_Pin|BUTTON2_Pin|BUTTON3_Pin;
 8001190:	f44f 43e0 	mov.w	r3, #28672	; 0x7000
 8001194:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001196:	2300      	movs	r3, #0
 8001198:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800119a:	2301      	movs	r3, #1
 800119c:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800119e:	f107 0308 	add.w	r3, r7, #8
 80011a2:	4619      	mov	r1, r3
 80011a4:	4804      	ldr	r0, [pc, #16]	; (80011b8 <MX_GPIO_Init+0xc0>)
 80011a6:	f000 fbaf 	bl	8001908 <HAL_GPIO_Init>

}
 80011aa:	bf00      	nop
 80011ac:	3718      	adds	r7, #24
 80011ae:	46bd      	mov	sp, r7
 80011b0:	bd80      	pop	{r7, pc}
 80011b2:	bf00      	nop
 80011b4:	40021000 	.word	0x40021000
 80011b8:	40010800 	.word	0x40010800
 80011bc:	40010c00 	.word	0x40010c00

080011c0 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 80011c0:	b580      	push	{r7, lr}
 80011c2:	b082      	sub	sp, #8
 80011c4:	af00      	add	r7, sp, #0
 80011c6:	6078      	str	r0, [r7, #4]
	timerRun();
 80011c8:	f000 f8c0 	bl	800134c <timerRun>
	getKeyInput();
 80011cc:	f7fe ffe8 	bl	80001a0 <getKeyInput>
}
 80011d0:	bf00      	nop
 80011d2:	3708      	adds	r7, #8
 80011d4:	46bd      	mov	sp, r7
 80011d6:	bd80      	pop	{r7, pc}

080011d8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80011d8:	b480      	push	{r7}
 80011da:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80011dc:	b672      	cpsid	i
}
 80011de:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80011e0:	e7fe      	b.n	80011e0 <Error_Handler+0x8>
	...

080011e4 <setTimer1>:
int timer8_flag = 0;

int timer9_counter = 0;
int timer9_flag = 0;

void setTimer1(int duration){
 80011e4:	b480      	push	{r7}
 80011e6:	b083      	sub	sp, #12
 80011e8:	af00      	add	r7, sp, #0
 80011ea:	6078      	str	r0, [r7, #4]
	timer1_counter = duration;
 80011ec:	4a05      	ldr	r2, [pc, #20]	; (8001204 <setTimer1+0x20>)
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	6013      	str	r3, [r2, #0]
	timer1_flag = 0;
 80011f2:	4b05      	ldr	r3, [pc, #20]	; (8001208 <setTimer1+0x24>)
 80011f4:	2200      	movs	r2, #0
 80011f6:	601a      	str	r2, [r3, #0]
}
 80011f8:	bf00      	nop
 80011fa:	370c      	adds	r7, #12
 80011fc:	46bd      	mov	sp, r7
 80011fe:	bc80      	pop	{r7}
 8001200:	4770      	bx	lr
 8001202:	bf00      	nop
 8001204:	200000d8 	.word	0x200000d8
 8001208:	200000dc 	.word	0x200000dc

0800120c <setTimer2>:

void setTimer2(int duration){
 800120c:	b480      	push	{r7}
 800120e:	b083      	sub	sp, #12
 8001210:	af00      	add	r7, sp, #0
 8001212:	6078      	str	r0, [r7, #4]
	timer2_counter = duration;
 8001214:	4a05      	ldr	r2, [pc, #20]	; (800122c <setTimer2+0x20>)
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	6013      	str	r3, [r2, #0]
	timer2_flag = 0;
 800121a:	4b05      	ldr	r3, [pc, #20]	; (8001230 <setTimer2+0x24>)
 800121c:	2200      	movs	r2, #0
 800121e:	601a      	str	r2, [r3, #0]
}
 8001220:	bf00      	nop
 8001222:	370c      	adds	r7, #12
 8001224:	46bd      	mov	sp, r7
 8001226:	bc80      	pop	{r7}
 8001228:	4770      	bx	lr
 800122a:	bf00      	nop
 800122c:	200000e0 	.word	0x200000e0
 8001230:	200000e4 	.word	0x200000e4

08001234 <setTimer3>:

void setTimer3(int duration){
 8001234:	b480      	push	{r7}
 8001236:	b083      	sub	sp, #12
 8001238:	af00      	add	r7, sp, #0
 800123a:	6078      	str	r0, [r7, #4]
	timer3_counter = duration;
 800123c:	4a05      	ldr	r2, [pc, #20]	; (8001254 <setTimer3+0x20>)
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	6013      	str	r3, [r2, #0]
	timer3_flag = 0;
 8001242:	4b05      	ldr	r3, [pc, #20]	; (8001258 <setTimer3+0x24>)
 8001244:	2200      	movs	r2, #0
 8001246:	601a      	str	r2, [r3, #0]
}
 8001248:	bf00      	nop
 800124a:	370c      	adds	r7, #12
 800124c:	46bd      	mov	sp, r7
 800124e:	bc80      	pop	{r7}
 8001250:	4770      	bx	lr
 8001252:	bf00      	nop
 8001254:	200000e8 	.word	0x200000e8
 8001258:	200000ec 	.word	0x200000ec

0800125c <setTimer4>:

void setTimer4(int duration){
 800125c:	b480      	push	{r7}
 800125e:	b083      	sub	sp, #12
 8001260:	af00      	add	r7, sp, #0
 8001262:	6078      	str	r0, [r7, #4]
	timer4_counter = duration;
 8001264:	4a05      	ldr	r2, [pc, #20]	; (800127c <setTimer4+0x20>)
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	6013      	str	r3, [r2, #0]
	timer4_flag = 0;
 800126a:	4b05      	ldr	r3, [pc, #20]	; (8001280 <setTimer4+0x24>)
 800126c:	2200      	movs	r2, #0
 800126e:	601a      	str	r2, [r3, #0]
}
 8001270:	bf00      	nop
 8001272:	370c      	adds	r7, #12
 8001274:	46bd      	mov	sp, r7
 8001276:	bc80      	pop	{r7}
 8001278:	4770      	bx	lr
 800127a:	bf00      	nop
 800127c:	200000f0 	.word	0x200000f0
 8001280:	200000f4 	.word	0x200000f4

08001284 <setTimer5>:

void setTimer5(int duration){
 8001284:	b480      	push	{r7}
 8001286:	b083      	sub	sp, #12
 8001288:	af00      	add	r7, sp, #0
 800128a:	6078      	str	r0, [r7, #4]
	timer5_counter = duration;
 800128c:	4a05      	ldr	r2, [pc, #20]	; (80012a4 <setTimer5+0x20>)
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	6013      	str	r3, [r2, #0]
	timer5_flag = 0;
 8001292:	4b05      	ldr	r3, [pc, #20]	; (80012a8 <setTimer5+0x24>)
 8001294:	2200      	movs	r2, #0
 8001296:	601a      	str	r2, [r3, #0]
}
 8001298:	bf00      	nop
 800129a:	370c      	adds	r7, #12
 800129c:	46bd      	mov	sp, r7
 800129e:	bc80      	pop	{r7}
 80012a0:	4770      	bx	lr
 80012a2:	bf00      	nop
 80012a4:	200000f8 	.word	0x200000f8
 80012a8:	200000fc 	.word	0x200000fc

080012ac <setTimer6>:

void setTimer6(int duration){
 80012ac:	b480      	push	{r7}
 80012ae:	b083      	sub	sp, #12
 80012b0:	af00      	add	r7, sp, #0
 80012b2:	6078      	str	r0, [r7, #4]
	timer6_counter = duration;
 80012b4:	4a05      	ldr	r2, [pc, #20]	; (80012cc <setTimer6+0x20>)
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	6013      	str	r3, [r2, #0]
	timer6_flag = 0;
 80012ba:	4b05      	ldr	r3, [pc, #20]	; (80012d0 <setTimer6+0x24>)
 80012bc:	2200      	movs	r2, #0
 80012be:	601a      	str	r2, [r3, #0]
}
 80012c0:	bf00      	nop
 80012c2:	370c      	adds	r7, #12
 80012c4:	46bd      	mov	sp, r7
 80012c6:	bc80      	pop	{r7}
 80012c8:	4770      	bx	lr
 80012ca:	bf00      	nop
 80012cc:	20000100 	.word	0x20000100
 80012d0:	20000104 	.word	0x20000104

080012d4 <setTimer7>:

void setTimer7(int duration){
 80012d4:	b480      	push	{r7}
 80012d6:	b083      	sub	sp, #12
 80012d8:	af00      	add	r7, sp, #0
 80012da:	6078      	str	r0, [r7, #4]
	timer7_counter = duration;
 80012dc:	4a05      	ldr	r2, [pc, #20]	; (80012f4 <setTimer7+0x20>)
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	6013      	str	r3, [r2, #0]
	timer7_flag = 0;
 80012e2:	4b05      	ldr	r3, [pc, #20]	; (80012f8 <setTimer7+0x24>)
 80012e4:	2200      	movs	r2, #0
 80012e6:	601a      	str	r2, [r3, #0]
}
 80012e8:	bf00      	nop
 80012ea:	370c      	adds	r7, #12
 80012ec:	46bd      	mov	sp, r7
 80012ee:	bc80      	pop	{r7}
 80012f0:	4770      	bx	lr
 80012f2:	bf00      	nop
 80012f4:	20000108 	.word	0x20000108
 80012f8:	2000010c 	.word	0x2000010c

080012fc <setTimer8>:

void setTimer8(int duration){
 80012fc:	b480      	push	{r7}
 80012fe:	b083      	sub	sp, #12
 8001300:	af00      	add	r7, sp, #0
 8001302:	6078      	str	r0, [r7, #4]
	timer8_counter = duration;
 8001304:	4a05      	ldr	r2, [pc, #20]	; (800131c <setTimer8+0x20>)
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	6013      	str	r3, [r2, #0]
	timer8_flag = 0;
 800130a:	4b05      	ldr	r3, [pc, #20]	; (8001320 <setTimer8+0x24>)
 800130c:	2200      	movs	r2, #0
 800130e:	601a      	str	r2, [r3, #0]
}
 8001310:	bf00      	nop
 8001312:	370c      	adds	r7, #12
 8001314:	46bd      	mov	sp, r7
 8001316:	bc80      	pop	{r7}
 8001318:	4770      	bx	lr
 800131a:	bf00      	nop
 800131c:	20000110 	.word	0x20000110
 8001320:	20000114 	.word	0x20000114

08001324 <setTimer9>:

void setTimer9(int duration){
 8001324:	b480      	push	{r7}
 8001326:	b083      	sub	sp, #12
 8001328:	af00      	add	r7, sp, #0
 800132a:	6078      	str	r0, [r7, #4]
	timer9_counter = duration;
 800132c:	4a05      	ldr	r2, [pc, #20]	; (8001344 <setTimer9+0x20>)
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	6013      	str	r3, [r2, #0]
	timer9_flag = 0;
 8001332:	4b05      	ldr	r3, [pc, #20]	; (8001348 <setTimer9+0x24>)
 8001334:	2200      	movs	r2, #0
 8001336:	601a      	str	r2, [r3, #0]
}
 8001338:	bf00      	nop
 800133a:	370c      	adds	r7, #12
 800133c:	46bd      	mov	sp, r7
 800133e:	bc80      	pop	{r7}
 8001340:	4770      	bx	lr
 8001342:	bf00      	nop
 8001344:	20000118 	.word	0x20000118
 8001348:	2000011c 	.word	0x2000011c

0800134c <timerRun>:

void timerRun(){
 800134c:	b480      	push	{r7}
 800134e:	af00      	add	r7, sp, #0
	if(timer1_counter > 0){
 8001350:	4b49      	ldr	r3, [pc, #292]	; (8001478 <timerRun+0x12c>)
 8001352:	681b      	ldr	r3, [r3, #0]
 8001354:	2b00      	cmp	r3, #0
 8001356:	dd0b      	ble.n	8001370 <timerRun+0x24>
		timer1_counter--;
 8001358:	4b47      	ldr	r3, [pc, #284]	; (8001478 <timerRun+0x12c>)
 800135a:	681b      	ldr	r3, [r3, #0]
 800135c:	3b01      	subs	r3, #1
 800135e:	4a46      	ldr	r2, [pc, #280]	; (8001478 <timerRun+0x12c>)
 8001360:	6013      	str	r3, [r2, #0]
		if(timer1_counter <= 0) timer1_flag = 1;
 8001362:	4b45      	ldr	r3, [pc, #276]	; (8001478 <timerRun+0x12c>)
 8001364:	681b      	ldr	r3, [r3, #0]
 8001366:	2b00      	cmp	r3, #0
 8001368:	dc02      	bgt.n	8001370 <timerRun+0x24>
 800136a:	4b44      	ldr	r3, [pc, #272]	; (800147c <timerRun+0x130>)
 800136c:	2201      	movs	r2, #1
 800136e:	601a      	str	r2, [r3, #0]
	}

	if(timer2_counter > 0){
 8001370:	4b43      	ldr	r3, [pc, #268]	; (8001480 <timerRun+0x134>)
 8001372:	681b      	ldr	r3, [r3, #0]
 8001374:	2b00      	cmp	r3, #0
 8001376:	dd0b      	ble.n	8001390 <timerRun+0x44>
		timer2_counter--;
 8001378:	4b41      	ldr	r3, [pc, #260]	; (8001480 <timerRun+0x134>)
 800137a:	681b      	ldr	r3, [r3, #0]
 800137c:	3b01      	subs	r3, #1
 800137e:	4a40      	ldr	r2, [pc, #256]	; (8001480 <timerRun+0x134>)
 8001380:	6013      	str	r3, [r2, #0]
		if(timer2_counter <= 0) timer2_flag = 1;
 8001382:	4b3f      	ldr	r3, [pc, #252]	; (8001480 <timerRun+0x134>)
 8001384:	681b      	ldr	r3, [r3, #0]
 8001386:	2b00      	cmp	r3, #0
 8001388:	dc02      	bgt.n	8001390 <timerRun+0x44>
 800138a:	4b3e      	ldr	r3, [pc, #248]	; (8001484 <timerRun+0x138>)
 800138c:	2201      	movs	r2, #1
 800138e:	601a      	str	r2, [r3, #0]
	}

	if(timer3_counter > 0){
 8001390:	4b3d      	ldr	r3, [pc, #244]	; (8001488 <timerRun+0x13c>)
 8001392:	681b      	ldr	r3, [r3, #0]
 8001394:	2b00      	cmp	r3, #0
 8001396:	dd0b      	ble.n	80013b0 <timerRun+0x64>
		timer3_counter--;
 8001398:	4b3b      	ldr	r3, [pc, #236]	; (8001488 <timerRun+0x13c>)
 800139a:	681b      	ldr	r3, [r3, #0]
 800139c:	3b01      	subs	r3, #1
 800139e:	4a3a      	ldr	r2, [pc, #232]	; (8001488 <timerRun+0x13c>)
 80013a0:	6013      	str	r3, [r2, #0]
		if(timer3_counter <= 0) timer3_flag = 1;
 80013a2:	4b39      	ldr	r3, [pc, #228]	; (8001488 <timerRun+0x13c>)
 80013a4:	681b      	ldr	r3, [r3, #0]
 80013a6:	2b00      	cmp	r3, #0
 80013a8:	dc02      	bgt.n	80013b0 <timerRun+0x64>
 80013aa:	4b38      	ldr	r3, [pc, #224]	; (800148c <timerRun+0x140>)
 80013ac:	2201      	movs	r2, #1
 80013ae:	601a      	str	r2, [r3, #0]
	}

	if(timer4_counter > 0){
 80013b0:	4b37      	ldr	r3, [pc, #220]	; (8001490 <timerRun+0x144>)
 80013b2:	681b      	ldr	r3, [r3, #0]
 80013b4:	2b00      	cmp	r3, #0
 80013b6:	dd0b      	ble.n	80013d0 <timerRun+0x84>
		timer4_counter--;
 80013b8:	4b35      	ldr	r3, [pc, #212]	; (8001490 <timerRun+0x144>)
 80013ba:	681b      	ldr	r3, [r3, #0]
 80013bc:	3b01      	subs	r3, #1
 80013be:	4a34      	ldr	r2, [pc, #208]	; (8001490 <timerRun+0x144>)
 80013c0:	6013      	str	r3, [r2, #0]
		if(timer4_counter <= 0) timer4_flag = 1;
 80013c2:	4b33      	ldr	r3, [pc, #204]	; (8001490 <timerRun+0x144>)
 80013c4:	681b      	ldr	r3, [r3, #0]
 80013c6:	2b00      	cmp	r3, #0
 80013c8:	dc02      	bgt.n	80013d0 <timerRun+0x84>
 80013ca:	4b32      	ldr	r3, [pc, #200]	; (8001494 <timerRun+0x148>)
 80013cc:	2201      	movs	r2, #1
 80013ce:	601a      	str	r2, [r3, #0]
	}

	if(timer5_counter > 0){
 80013d0:	4b31      	ldr	r3, [pc, #196]	; (8001498 <timerRun+0x14c>)
 80013d2:	681b      	ldr	r3, [r3, #0]
 80013d4:	2b00      	cmp	r3, #0
 80013d6:	dd0b      	ble.n	80013f0 <timerRun+0xa4>
		timer5_counter--;
 80013d8:	4b2f      	ldr	r3, [pc, #188]	; (8001498 <timerRun+0x14c>)
 80013da:	681b      	ldr	r3, [r3, #0]
 80013dc:	3b01      	subs	r3, #1
 80013de:	4a2e      	ldr	r2, [pc, #184]	; (8001498 <timerRun+0x14c>)
 80013e0:	6013      	str	r3, [r2, #0]
		if(timer5_counter <= 0) timer5_flag = 1;
 80013e2:	4b2d      	ldr	r3, [pc, #180]	; (8001498 <timerRun+0x14c>)
 80013e4:	681b      	ldr	r3, [r3, #0]
 80013e6:	2b00      	cmp	r3, #0
 80013e8:	dc02      	bgt.n	80013f0 <timerRun+0xa4>
 80013ea:	4b2c      	ldr	r3, [pc, #176]	; (800149c <timerRun+0x150>)
 80013ec:	2201      	movs	r2, #1
 80013ee:	601a      	str	r2, [r3, #0]
	}

	if(timer6_counter > 0){
 80013f0:	4b2b      	ldr	r3, [pc, #172]	; (80014a0 <timerRun+0x154>)
 80013f2:	681b      	ldr	r3, [r3, #0]
 80013f4:	2b00      	cmp	r3, #0
 80013f6:	dd0b      	ble.n	8001410 <timerRun+0xc4>
		timer6_counter--;
 80013f8:	4b29      	ldr	r3, [pc, #164]	; (80014a0 <timerRun+0x154>)
 80013fa:	681b      	ldr	r3, [r3, #0]
 80013fc:	3b01      	subs	r3, #1
 80013fe:	4a28      	ldr	r2, [pc, #160]	; (80014a0 <timerRun+0x154>)
 8001400:	6013      	str	r3, [r2, #0]
		if(timer6_counter <= 0) timer6_flag = 1;
 8001402:	4b27      	ldr	r3, [pc, #156]	; (80014a0 <timerRun+0x154>)
 8001404:	681b      	ldr	r3, [r3, #0]
 8001406:	2b00      	cmp	r3, #0
 8001408:	dc02      	bgt.n	8001410 <timerRun+0xc4>
 800140a:	4b26      	ldr	r3, [pc, #152]	; (80014a4 <timerRun+0x158>)
 800140c:	2201      	movs	r2, #1
 800140e:	601a      	str	r2, [r3, #0]
	}

	if(timer7_counter > 0){
 8001410:	4b25      	ldr	r3, [pc, #148]	; (80014a8 <timerRun+0x15c>)
 8001412:	681b      	ldr	r3, [r3, #0]
 8001414:	2b00      	cmp	r3, #0
 8001416:	dd0b      	ble.n	8001430 <timerRun+0xe4>
		timer7_counter--;
 8001418:	4b23      	ldr	r3, [pc, #140]	; (80014a8 <timerRun+0x15c>)
 800141a:	681b      	ldr	r3, [r3, #0]
 800141c:	3b01      	subs	r3, #1
 800141e:	4a22      	ldr	r2, [pc, #136]	; (80014a8 <timerRun+0x15c>)
 8001420:	6013      	str	r3, [r2, #0]
		if(timer7_counter <= 0) timer7_flag = 1;
 8001422:	4b21      	ldr	r3, [pc, #132]	; (80014a8 <timerRun+0x15c>)
 8001424:	681b      	ldr	r3, [r3, #0]
 8001426:	2b00      	cmp	r3, #0
 8001428:	dc02      	bgt.n	8001430 <timerRun+0xe4>
 800142a:	4b20      	ldr	r3, [pc, #128]	; (80014ac <timerRun+0x160>)
 800142c:	2201      	movs	r2, #1
 800142e:	601a      	str	r2, [r3, #0]
	}

	if(timer8_counter > 0){
 8001430:	4b1f      	ldr	r3, [pc, #124]	; (80014b0 <timerRun+0x164>)
 8001432:	681b      	ldr	r3, [r3, #0]
 8001434:	2b00      	cmp	r3, #0
 8001436:	dd0b      	ble.n	8001450 <timerRun+0x104>
		timer8_counter--;
 8001438:	4b1d      	ldr	r3, [pc, #116]	; (80014b0 <timerRun+0x164>)
 800143a:	681b      	ldr	r3, [r3, #0]
 800143c:	3b01      	subs	r3, #1
 800143e:	4a1c      	ldr	r2, [pc, #112]	; (80014b0 <timerRun+0x164>)
 8001440:	6013      	str	r3, [r2, #0]
		if(timer8_counter <= 0) timer8_flag = 1;
 8001442:	4b1b      	ldr	r3, [pc, #108]	; (80014b0 <timerRun+0x164>)
 8001444:	681b      	ldr	r3, [r3, #0]
 8001446:	2b00      	cmp	r3, #0
 8001448:	dc02      	bgt.n	8001450 <timerRun+0x104>
 800144a:	4b1a      	ldr	r3, [pc, #104]	; (80014b4 <timerRun+0x168>)
 800144c:	2201      	movs	r2, #1
 800144e:	601a      	str	r2, [r3, #0]
	}

	if(timer9_counter > 0){
 8001450:	4b19      	ldr	r3, [pc, #100]	; (80014b8 <timerRun+0x16c>)
 8001452:	681b      	ldr	r3, [r3, #0]
 8001454:	2b00      	cmp	r3, #0
 8001456:	dd0b      	ble.n	8001470 <timerRun+0x124>
		timer9_counter--;
 8001458:	4b17      	ldr	r3, [pc, #92]	; (80014b8 <timerRun+0x16c>)
 800145a:	681b      	ldr	r3, [r3, #0]
 800145c:	3b01      	subs	r3, #1
 800145e:	4a16      	ldr	r2, [pc, #88]	; (80014b8 <timerRun+0x16c>)
 8001460:	6013      	str	r3, [r2, #0]
		if(timer9_counter <= 0) timer9_flag = 1;
 8001462:	4b15      	ldr	r3, [pc, #84]	; (80014b8 <timerRun+0x16c>)
 8001464:	681b      	ldr	r3, [r3, #0]
 8001466:	2b00      	cmp	r3, #0
 8001468:	dc02      	bgt.n	8001470 <timerRun+0x124>
 800146a:	4b14      	ldr	r3, [pc, #80]	; (80014bc <timerRun+0x170>)
 800146c:	2201      	movs	r2, #1
 800146e:	601a      	str	r2, [r3, #0]
	}
}
 8001470:	bf00      	nop
 8001472:	46bd      	mov	sp, r7
 8001474:	bc80      	pop	{r7}
 8001476:	4770      	bx	lr
 8001478:	200000d8 	.word	0x200000d8
 800147c:	200000dc 	.word	0x200000dc
 8001480:	200000e0 	.word	0x200000e0
 8001484:	200000e4 	.word	0x200000e4
 8001488:	200000e8 	.word	0x200000e8
 800148c:	200000ec 	.word	0x200000ec
 8001490:	200000f0 	.word	0x200000f0
 8001494:	200000f4 	.word	0x200000f4
 8001498:	200000f8 	.word	0x200000f8
 800149c:	200000fc 	.word	0x200000fc
 80014a0:	20000100 	.word	0x20000100
 80014a4:	20000104 	.word	0x20000104
 80014a8:	20000108 	.word	0x20000108
 80014ac:	2000010c 	.word	0x2000010c
 80014b0:	20000110 	.word	0x20000110
 80014b4:	20000114 	.word	0x20000114
 80014b8:	20000118 	.word	0x20000118
 80014bc:	2000011c 	.word	0x2000011c

080014c0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80014c0:	b480      	push	{r7}
 80014c2:	b085      	sub	sp, #20
 80014c4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80014c6:	4b15      	ldr	r3, [pc, #84]	; (800151c <HAL_MspInit+0x5c>)
 80014c8:	699b      	ldr	r3, [r3, #24]
 80014ca:	4a14      	ldr	r2, [pc, #80]	; (800151c <HAL_MspInit+0x5c>)
 80014cc:	f043 0301 	orr.w	r3, r3, #1
 80014d0:	6193      	str	r3, [r2, #24]
 80014d2:	4b12      	ldr	r3, [pc, #72]	; (800151c <HAL_MspInit+0x5c>)
 80014d4:	699b      	ldr	r3, [r3, #24]
 80014d6:	f003 0301 	and.w	r3, r3, #1
 80014da:	60bb      	str	r3, [r7, #8]
 80014dc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80014de:	4b0f      	ldr	r3, [pc, #60]	; (800151c <HAL_MspInit+0x5c>)
 80014e0:	69db      	ldr	r3, [r3, #28]
 80014e2:	4a0e      	ldr	r2, [pc, #56]	; (800151c <HAL_MspInit+0x5c>)
 80014e4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80014e8:	61d3      	str	r3, [r2, #28]
 80014ea:	4b0c      	ldr	r3, [pc, #48]	; (800151c <HAL_MspInit+0x5c>)
 80014ec:	69db      	ldr	r3, [r3, #28]
 80014ee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80014f2:	607b      	str	r3, [r7, #4]
 80014f4:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** DISABLE: JTAG-DP Disabled and SW-DP Disabled
  */
  __HAL_AFIO_REMAP_SWJ_DISABLE();
 80014f6:	4b0a      	ldr	r3, [pc, #40]	; (8001520 <HAL_MspInit+0x60>)
 80014f8:	685b      	ldr	r3, [r3, #4]
 80014fa:	60fb      	str	r3, [r7, #12]
 80014fc:	68fb      	ldr	r3, [r7, #12]
 80014fe:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8001502:	60fb      	str	r3, [r7, #12]
 8001504:	68fb      	ldr	r3, [r7, #12]
 8001506:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800150a:	60fb      	str	r3, [r7, #12]
 800150c:	4a04      	ldr	r2, [pc, #16]	; (8001520 <HAL_MspInit+0x60>)
 800150e:	68fb      	ldr	r3, [r7, #12]
 8001510:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001512:	bf00      	nop
 8001514:	3714      	adds	r7, #20
 8001516:	46bd      	mov	sp, r7
 8001518:	bc80      	pop	{r7}
 800151a:	4770      	bx	lr
 800151c:	40021000 	.word	0x40021000
 8001520:	40010000 	.word	0x40010000

08001524 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001524:	b580      	push	{r7, lr}
 8001526:	b084      	sub	sp, #16
 8001528:	af00      	add	r7, sp, #0
 800152a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	681b      	ldr	r3, [r3, #0]
 8001530:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001534:	d113      	bne.n	800155e <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001536:	4b0c      	ldr	r3, [pc, #48]	; (8001568 <HAL_TIM_Base_MspInit+0x44>)
 8001538:	69db      	ldr	r3, [r3, #28]
 800153a:	4a0b      	ldr	r2, [pc, #44]	; (8001568 <HAL_TIM_Base_MspInit+0x44>)
 800153c:	f043 0301 	orr.w	r3, r3, #1
 8001540:	61d3      	str	r3, [r2, #28]
 8001542:	4b09      	ldr	r3, [pc, #36]	; (8001568 <HAL_TIM_Base_MspInit+0x44>)
 8001544:	69db      	ldr	r3, [r3, #28]
 8001546:	f003 0301 	and.w	r3, r3, #1
 800154a:	60fb      	str	r3, [r7, #12]
 800154c:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 800154e:	2200      	movs	r2, #0
 8001550:	2100      	movs	r1, #0
 8001552:	201c      	movs	r0, #28
 8001554:	f000 f9a1 	bl	800189a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001558:	201c      	movs	r0, #28
 800155a:	f000 f9ba 	bl	80018d2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 800155e:	bf00      	nop
 8001560:	3710      	adds	r7, #16
 8001562:	46bd      	mov	sp, r7
 8001564:	bd80      	pop	{r7, pc}
 8001566:	bf00      	nop
 8001568:	40021000 	.word	0x40021000

0800156c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800156c:	b480      	push	{r7}
 800156e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001570:	e7fe      	b.n	8001570 <NMI_Handler+0x4>

08001572 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001572:	b480      	push	{r7}
 8001574:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001576:	e7fe      	b.n	8001576 <HardFault_Handler+0x4>

08001578 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001578:	b480      	push	{r7}
 800157a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800157c:	e7fe      	b.n	800157c <MemManage_Handler+0x4>

0800157e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800157e:	b480      	push	{r7}
 8001580:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001582:	e7fe      	b.n	8001582 <BusFault_Handler+0x4>

08001584 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001584:	b480      	push	{r7}
 8001586:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001588:	e7fe      	b.n	8001588 <UsageFault_Handler+0x4>

0800158a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800158a:	b480      	push	{r7}
 800158c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800158e:	bf00      	nop
 8001590:	46bd      	mov	sp, r7
 8001592:	bc80      	pop	{r7}
 8001594:	4770      	bx	lr

08001596 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001596:	b480      	push	{r7}
 8001598:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800159a:	bf00      	nop
 800159c:	46bd      	mov	sp, r7
 800159e:	bc80      	pop	{r7}
 80015a0:	4770      	bx	lr

080015a2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80015a2:	b480      	push	{r7}
 80015a4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80015a6:	bf00      	nop
 80015a8:	46bd      	mov	sp, r7
 80015aa:	bc80      	pop	{r7}
 80015ac:	4770      	bx	lr

080015ae <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80015ae:	b580      	push	{r7, lr}
 80015b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80015b2:	f000 f87f 	bl	80016b4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80015b6:	bf00      	nop
 80015b8:	bd80      	pop	{r7, pc}
	...

080015bc <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80015bc:	b580      	push	{r7, lr}
 80015be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80015c0:	4802      	ldr	r0, [pc, #8]	; (80015cc <TIM2_IRQHandler+0x10>)
 80015c2:	f000 ffe7 	bl	8002594 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80015c6:	bf00      	nop
 80015c8:	bd80      	pop	{r7, pc}
 80015ca:	bf00      	nop
 80015cc:	20000120 	.word	0x20000120

080015d0 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80015d0:	b480      	push	{r7}
 80015d2:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80015d4:	bf00      	nop
 80015d6:	46bd      	mov	sp, r7
 80015d8:	bc80      	pop	{r7}
 80015da:	4770      	bx	lr

080015dc <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80015dc:	480c      	ldr	r0, [pc, #48]	; (8001610 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80015de:	490d      	ldr	r1, [pc, #52]	; (8001614 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80015e0:	4a0d      	ldr	r2, [pc, #52]	; (8001618 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80015e2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80015e4:	e002      	b.n	80015ec <LoopCopyDataInit>

080015e6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80015e6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80015e8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80015ea:	3304      	adds	r3, #4

080015ec <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80015ec:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80015ee:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80015f0:	d3f9      	bcc.n	80015e6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80015f2:	4a0a      	ldr	r2, [pc, #40]	; (800161c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80015f4:	4c0a      	ldr	r4, [pc, #40]	; (8001620 <LoopFillZerobss+0x22>)
  movs r3, #0
 80015f6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80015f8:	e001      	b.n	80015fe <LoopFillZerobss>

080015fa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80015fa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80015fc:	3204      	adds	r2, #4

080015fe <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80015fe:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001600:	d3fb      	bcc.n	80015fa <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001602:	f7ff ffe5 	bl	80015d0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001606:	f001 fb0d 	bl	8002c24 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800160a:	f7ff fcd5 	bl	8000fb8 <main>
  bx lr
 800160e:	4770      	bx	lr
  ldr r0, =_sdata
 8001610:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001614:	2000004c 	.word	0x2000004c
  ldr r2, =_sidata
 8001618:	08002cc8 	.word	0x08002cc8
  ldr r2, =_sbss
 800161c:	2000004c 	.word	0x2000004c
  ldr r4, =_ebss
 8001620:	2000016c 	.word	0x2000016c

08001624 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001624:	e7fe      	b.n	8001624 <ADC1_2_IRQHandler>
	...

08001628 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001628:	b580      	push	{r7, lr}
 800162a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800162c:	4b08      	ldr	r3, [pc, #32]	; (8001650 <HAL_Init+0x28>)
 800162e:	681b      	ldr	r3, [r3, #0]
 8001630:	4a07      	ldr	r2, [pc, #28]	; (8001650 <HAL_Init+0x28>)
 8001632:	f043 0310 	orr.w	r3, r3, #16
 8001636:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001638:	2003      	movs	r0, #3
 800163a:	f000 f923 	bl	8001884 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800163e:	200f      	movs	r0, #15
 8001640:	f000 f808 	bl	8001654 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001644:	f7ff ff3c 	bl	80014c0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001648:	2300      	movs	r3, #0
}
 800164a:	4618      	mov	r0, r3
 800164c:	bd80      	pop	{r7, pc}
 800164e:	bf00      	nop
 8001650:	40022000 	.word	0x40022000

08001654 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001654:	b580      	push	{r7, lr}
 8001656:	b082      	sub	sp, #8
 8001658:	af00      	add	r7, sp, #0
 800165a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800165c:	4b12      	ldr	r3, [pc, #72]	; (80016a8 <HAL_InitTick+0x54>)
 800165e:	681a      	ldr	r2, [r3, #0]
 8001660:	4b12      	ldr	r3, [pc, #72]	; (80016ac <HAL_InitTick+0x58>)
 8001662:	781b      	ldrb	r3, [r3, #0]
 8001664:	4619      	mov	r1, r3
 8001666:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800166a:	fbb3 f3f1 	udiv	r3, r3, r1
 800166e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001672:	4618      	mov	r0, r3
 8001674:	f000 f93b 	bl	80018ee <HAL_SYSTICK_Config>
 8001678:	4603      	mov	r3, r0
 800167a:	2b00      	cmp	r3, #0
 800167c:	d001      	beq.n	8001682 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800167e:	2301      	movs	r3, #1
 8001680:	e00e      	b.n	80016a0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	2b0f      	cmp	r3, #15
 8001686:	d80a      	bhi.n	800169e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001688:	2200      	movs	r2, #0
 800168a:	6879      	ldr	r1, [r7, #4]
 800168c:	f04f 30ff 	mov.w	r0, #4294967295
 8001690:	f000 f903 	bl	800189a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001694:	4a06      	ldr	r2, [pc, #24]	; (80016b0 <HAL_InitTick+0x5c>)
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800169a:	2300      	movs	r3, #0
 800169c:	e000      	b.n	80016a0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800169e:	2301      	movs	r3, #1
}
 80016a0:	4618      	mov	r0, r3
 80016a2:	3708      	adds	r7, #8
 80016a4:	46bd      	mov	sp, r7
 80016a6:	bd80      	pop	{r7, pc}
 80016a8:	20000040 	.word	0x20000040
 80016ac:	20000048 	.word	0x20000048
 80016b0:	20000044 	.word	0x20000044

080016b4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80016b4:	b480      	push	{r7}
 80016b6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80016b8:	4b05      	ldr	r3, [pc, #20]	; (80016d0 <HAL_IncTick+0x1c>)
 80016ba:	781b      	ldrb	r3, [r3, #0]
 80016bc:	461a      	mov	r2, r3
 80016be:	4b05      	ldr	r3, [pc, #20]	; (80016d4 <HAL_IncTick+0x20>)
 80016c0:	681b      	ldr	r3, [r3, #0]
 80016c2:	4413      	add	r3, r2
 80016c4:	4a03      	ldr	r2, [pc, #12]	; (80016d4 <HAL_IncTick+0x20>)
 80016c6:	6013      	str	r3, [r2, #0]
}
 80016c8:	bf00      	nop
 80016ca:	46bd      	mov	sp, r7
 80016cc:	bc80      	pop	{r7}
 80016ce:	4770      	bx	lr
 80016d0:	20000048 	.word	0x20000048
 80016d4:	20000168 	.word	0x20000168

080016d8 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80016d8:	b480      	push	{r7}
 80016da:	af00      	add	r7, sp, #0
  return uwTick;
 80016dc:	4b02      	ldr	r3, [pc, #8]	; (80016e8 <HAL_GetTick+0x10>)
 80016de:	681b      	ldr	r3, [r3, #0]
}
 80016e0:	4618      	mov	r0, r3
 80016e2:	46bd      	mov	sp, r7
 80016e4:	bc80      	pop	{r7}
 80016e6:	4770      	bx	lr
 80016e8:	20000168 	.word	0x20000168

080016ec <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80016ec:	b480      	push	{r7}
 80016ee:	b085      	sub	sp, #20
 80016f0:	af00      	add	r7, sp, #0
 80016f2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	f003 0307 	and.w	r3, r3, #7
 80016fa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80016fc:	4b0c      	ldr	r3, [pc, #48]	; (8001730 <__NVIC_SetPriorityGrouping+0x44>)
 80016fe:	68db      	ldr	r3, [r3, #12]
 8001700:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001702:	68ba      	ldr	r2, [r7, #8]
 8001704:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001708:	4013      	ands	r3, r2
 800170a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 800170c:	68fb      	ldr	r3, [r7, #12]
 800170e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001710:	68bb      	ldr	r3, [r7, #8]
 8001712:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001714:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001718:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800171c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800171e:	4a04      	ldr	r2, [pc, #16]	; (8001730 <__NVIC_SetPriorityGrouping+0x44>)
 8001720:	68bb      	ldr	r3, [r7, #8]
 8001722:	60d3      	str	r3, [r2, #12]
}
 8001724:	bf00      	nop
 8001726:	3714      	adds	r7, #20
 8001728:	46bd      	mov	sp, r7
 800172a:	bc80      	pop	{r7}
 800172c:	4770      	bx	lr
 800172e:	bf00      	nop
 8001730:	e000ed00 	.word	0xe000ed00

08001734 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001734:	b480      	push	{r7}
 8001736:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001738:	4b04      	ldr	r3, [pc, #16]	; (800174c <__NVIC_GetPriorityGrouping+0x18>)
 800173a:	68db      	ldr	r3, [r3, #12]
 800173c:	0a1b      	lsrs	r3, r3, #8
 800173e:	f003 0307 	and.w	r3, r3, #7
}
 8001742:	4618      	mov	r0, r3
 8001744:	46bd      	mov	sp, r7
 8001746:	bc80      	pop	{r7}
 8001748:	4770      	bx	lr
 800174a:	bf00      	nop
 800174c:	e000ed00 	.word	0xe000ed00

08001750 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001750:	b480      	push	{r7}
 8001752:	b083      	sub	sp, #12
 8001754:	af00      	add	r7, sp, #0
 8001756:	4603      	mov	r3, r0
 8001758:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800175a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800175e:	2b00      	cmp	r3, #0
 8001760:	db0b      	blt.n	800177a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001762:	79fb      	ldrb	r3, [r7, #7]
 8001764:	f003 021f 	and.w	r2, r3, #31
 8001768:	4906      	ldr	r1, [pc, #24]	; (8001784 <__NVIC_EnableIRQ+0x34>)
 800176a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800176e:	095b      	lsrs	r3, r3, #5
 8001770:	2001      	movs	r0, #1
 8001772:	fa00 f202 	lsl.w	r2, r0, r2
 8001776:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800177a:	bf00      	nop
 800177c:	370c      	adds	r7, #12
 800177e:	46bd      	mov	sp, r7
 8001780:	bc80      	pop	{r7}
 8001782:	4770      	bx	lr
 8001784:	e000e100 	.word	0xe000e100

08001788 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001788:	b480      	push	{r7}
 800178a:	b083      	sub	sp, #12
 800178c:	af00      	add	r7, sp, #0
 800178e:	4603      	mov	r3, r0
 8001790:	6039      	str	r1, [r7, #0]
 8001792:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001794:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001798:	2b00      	cmp	r3, #0
 800179a:	db0a      	blt.n	80017b2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800179c:	683b      	ldr	r3, [r7, #0]
 800179e:	b2da      	uxtb	r2, r3
 80017a0:	490c      	ldr	r1, [pc, #48]	; (80017d4 <__NVIC_SetPriority+0x4c>)
 80017a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017a6:	0112      	lsls	r2, r2, #4
 80017a8:	b2d2      	uxtb	r2, r2
 80017aa:	440b      	add	r3, r1
 80017ac:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80017b0:	e00a      	b.n	80017c8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80017b2:	683b      	ldr	r3, [r7, #0]
 80017b4:	b2da      	uxtb	r2, r3
 80017b6:	4908      	ldr	r1, [pc, #32]	; (80017d8 <__NVIC_SetPriority+0x50>)
 80017b8:	79fb      	ldrb	r3, [r7, #7]
 80017ba:	f003 030f 	and.w	r3, r3, #15
 80017be:	3b04      	subs	r3, #4
 80017c0:	0112      	lsls	r2, r2, #4
 80017c2:	b2d2      	uxtb	r2, r2
 80017c4:	440b      	add	r3, r1
 80017c6:	761a      	strb	r2, [r3, #24]
}
 80017c8:	bf00      	nop
 80017ca:	370c      	adds	r7, #12
 80017cc:	46bd      	mov	sp, r7
 80017ce:	bc80      	pop	{r7}
 80017d0:	4770      	bx	lr
 80017d2:	bf00      	nop
 80017d4:	e000e100 	.word	0xe000e100
 80017d8:	e000ed00 	.word	0xe000ed00

080017dc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80017dc:	b480      	push	{r7}
 80017de:	b089      	sub	sp, #36	; 0x24
 80017e0:	af00      	add	r7, sp, #0
 80017e2:	60f8      	str	r0, [r7, #12]
 80017e4:	60b9      	str	r1, [r7, #8]
 80017e6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80017e8:	68fb      	ldr	r3, [r7, #12]
 80017ea:	f003 0307 	and.w	r3, r3, #7
 80017ee:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80017f0:	69fb      	ldr	r3, [r7, #28]
 80017f2:	f1c3 0307 	rsb	r3, r3, #7
 80017f6:	2b04      	cmp	r3, #4
 80017f8:	bf28      	it	cs
 80017fa:	2304      	movcs	r3, #4
 80017fc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80017fe:	69fb      	ldr	r3, [r7, #28]
 8001800:	3304      	adds	r3, #4
 8001802:	2b06      	cmp	r3, #6
 8001804:	d902      	bls.n	800180c <NVIC_EncodePriority+0x30>
 8001806:	69fb      	ldr	r3, [r7, #28]
 8001808:	3b03      	subs	r3, #3
 800180a:	e000      	b.n	800180e <NVIC_EncodePriority+0x32>
 800180c:	2300      	movs	r3, #0
 800180e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001810:	f04f 32ff 	mov.w	r2, #4294967295
 8001814:	69bb      	ldr	r3, [r7, #24]
 8001816:	fa02 f303 	lsl.w	r3, r2, r3
 800181a:	43da      	mvns	r2, r3
 800181c:	68bb      	ldr	r3, [r7, #8]
 800181e:	401a      	ands	r2, r3
 8001820:	697b      	ldr	r3, [r7, #20]
 8001822:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001824:	f04f 31ff 	mov.w	r1, #4294967295
 8001828:	697b      	ldr	r3, [r7, #20]
 800182a:	fa01 f303 	lsl.w	r3, r1, r3
 800182e:	43d9      	mvns	r1, r3
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001834:	4313      	orrs	r3, r2
         );
}
 8001836:	4618      	mov	r0, r3
 8001838:	3724      	adds	r7, #36	; 0x24
 800183a:	46bd      	mov	sp, r7
 800183c:	bc80      	pop	{r7}
 800183e:	4770      	bx	lr

08001840 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001840:	b580      	push	{r7, lr}
 8001842:	b082      	sub	sp, #8
 8001844:	af00      	add	r7, sp, #0
 8001846:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	3b01      	subs	r3, #1
 800184c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001850:	d301      	bcc.n	8001856 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001852:	2301      	movs	r3, #1
 8001854:	e00f      	b.n	8001876 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001856:	4a0a      	ldr	r2, [pc, #40]	; (8001880 <SysTick_Config+0x40>)
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	3b01      	subs	r3, #1
 800185c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800185e:	210f      	movs	r1, #15
 8001860:	f04f 30ff 	mov.w	r0, #4294967295
 8001864:	f7ff ff90 	bl	8001788 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001868:	4b05      	ldr	r3, [pc, #20]	; (8001880 <SysTick_Config+0x40>)
 800186a:	2200      	movs	r2, #0
 800186c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800186e:	4b04      	ldr	r3, [pc, #16]	; (8001880 <SysTick_Config+0x40>)
 8001870:	2207      	movs	r2, #7
 8001872:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001874:	2300      	movs	r3, #0
}
 8001876:	4618      	mov	r0, r3
 8001878:	3708      	adds	r7, #8
 800187a:	46bd      	mov	sp, r7
 800187c:	bd80      	pop	{r7, pc}
 800187e:	bf00      	nop
 8001880:	e000e010 	.word	0xe000e010

08001884 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001884:	b580      	push	{r7, lr}
 8001886:	b082      	sub	sp, #8
 8001888:	af00      	add	r7, sp, #0
 800188a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800188c:	6878      	ldr	r0, [r7, #4]
 800188e:	f7ff ff2d 	bl	80016ec <__NVIC_SetPriorityGrouping>
}
 8001892:	bf00      	nop
 8001894:	3708      	adds	r7, #8
 8001896:	46bd      	mov	sp, r7
 8001898:	bd80      	pop	{r7, pc}

0800189a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800189a:	b580      	push	{r7, lr}
 800189c:	b086      	sub	sp, #24
 800189e:	af00      	add	r7, sp, #0
 80018a0:	4603      	mov	r3, r0
 80018a2:	60b9      	str	r1, [r7, #8]
 80018a4:	607a      	str	r2, [r7, #4]
 80018a6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80018a8:	2300      	movs	r3, #0
 80018aa:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80018ac:	f7ff ff42 	bl	8001734 <__NVIC_GetPriorityGrouping>
 80018b0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80018b2:	687a      	ldr	r2, [r7, #4]
 80018b4:	68b9      	ldr	r1, [r7, #8]
 80018b6:	6978      	ldr	r0, [r7, #20]
 80018b8:	f7ff ff90 	bl	80017dc <NVIC_EncodePriority>
 80018bc:	4602      	mov	r2, r0
 80018be:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80018c2:	4611      	mov	r1, r2
 80018c4:	4618      	mov	r0, r3
 80018c6:	f7ff ff5f 	bl	8001788 <__NVIC_SetPriority>
}
 80018ca:	bf00      	nop
 80018cc:	3718      	adds	r7, #24
 80018ce:	46bd      	mov	sp, r7
 80018d0:	bd80      	pop	{r7, pc}

080018d2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80018d2:	b580      	push	{r7, lr}
 80018d4:	b082      	sub	sp, #8
 80018d6:	af00      	add	r7, sp, #0
 80018d8:	4603      	mov	r3, r0
 80018da:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80018dc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018e0:	4618      	mov	r0, r3
 80018e2:	f7ff ff35 	bl	8001750 <__NVIC_EnableIRQ>
}
 80018e6:	bf00      	nop
 80018e8:	3708      	adds	r7, #8
 80018ea:	46bd      	mov	sp, r7
 80018ec:	bd80      	pop	{r7, pc}

080018ee <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80018ee:	b580      	push	{r7, lr}
 80018f0:	b082      	sub	sp, #8
 80018f2:	af00      	add	r7, sp, #0
 80018f4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80018f6:	6878      	ldr	r0, [r7, #4]
 80018f8:	f7ff ffa2 	bl	8001840 <SysTick_Config>
 80018fc:	4603      	mov	r3, r0
}
 80018fe:	4618      	mov	r0, r3
 8001900:	3708      	adds	r7, #8
 8001902:	46bd      	mov	sp, r7
 8001904:	bd80      	pop	{r7, pc}
	...

08001908 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001908:	b480      	push	{r7}
 800190a:	b08b      	sub	sp, #44	; 0x2c
 800190c:	af00      	add	r7, sp, #0
 800190e:	6078      	str	r0, [r7, #4]
 8001910:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001912:	2300      	movs	r3, #0
 8001914:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001916:	2300      	movs	r3, #0
 8001918:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800191a:	e148      	b.n	8001bae <HAL_GPIO_Init+0x2a6>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 800191c:	2201      	movs	r2, #1
 800191e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001920:	fa02 f303 	lsl.w	r3, r2, r3
 8001924:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001926:	683b      	ldr	r3, [r7, #0]
 8001928:	681b      	ldr	r3, [r3, #0]
 800192a:	69fa      	ldr	r2, [r7, #28]
 800192c:	4013      	ands	r3, r2
 800192e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001930:	69ba      	ldr	r2, [r7, #24]
 8001932:	69fb      	ldr	r3, [r7, #28]
 8001934:	429a      	cmp	r2, r3
 8001936:	f040 8137 	bne.w	8001ba8 <HAL_GPIO_Init+0x2a0>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800193a:	683b      	ldr	r3, [r7, #0]
 800193c:	685b      	ldr	r3, [r3, #4]
 800193e:	4aa3      	ldr	r2, [pc, #652]	; (8001bcc <HAL_GPIO_Init+0x2c4>)
 8001940:	4293      	cmp	r3, r2
 8001942:	d05e      	beq.n	8001a02 <HAL_GPIO_Init+0xfa>
 8001944:	4aa1      	ldr	r2, [pc, #644]	; (8001bcc <HAL_GPIO_Init+0x2c4>)
 8001946:	4293      	cmp	r3, r2
 8001948:	d875      	bhi.n	8001a36 <HAL_GPIO_Init+0x12e>
 800194a:	4aa1      	ldr	r2, [pc, #644]	; (8001bd0 <HAL_GPIO_Init+0x2c8>)
 800194c:	4293      	cmp	r3, r2
 800194e:	d058      	beq.n	8001a02 <HAL_GPIO_Init+0xfa>
 8001950:	4a9f      	ldr	r2, [pc, #636]	; (8001bd0 <HAL_GPIO_Init+0x2c8>)
 8001952:	4293      	cmp	r3, r2
 8001954:	d86f      	bhi.n	8001a36 <HAL_GPIO_Init+0x12e>
 8001956:	4a9f      	ldr	r2, [pc, #636]	; (8001bd4 <HAL_GPIO_Init+0x2cc>)
 8001958:	4293      	cmp	r3, r2
 800195a:	d052      	beq.n	8001a02 <HAL_GPIO_Init+0xfa>
 800195c:	4a9d      	ldr	r2, [pc, #628]	; (8001bd4 <HAL_GPIO_Init+0x2cc>)
 800195e:	4293      	cmp	r3, r2
 8001960:	d869      	bhi.n	8001a36 <HAL_GPIO_Init+0x12e>
 8001962:	4a9d      	ldr	r2, [pc, #628]	; (8001bd8 <HAL_GPIO_Init+0x2d0>)
 8001964:	4293      	cmp	r3, r2
 8001966:	d04c      	beq.n	8001a02 <HAL_GPIO_Init+0xfa>
 8001968:	4a9b      	ldr	r2, [pc, #620]	; (8001bd8 <HAL_GPIO_Init+0x2d0>)
 800196a:	4293      	cmp	r3, r2
 800196c:	d863      	bhi.n	8001a36 <HAL_GPIO_Init+0x12e>
 800196e:	4a9b      	ldr	r2, [pc, #620]	; (8001bdc <HAL_GPIO_Init+0x2d4>)
 8001970:	4293      	cmp	r3, r2
 8001972:	d046      	beq.n	8001a02 <HAL_GPIO_Init+0xfa>
 8001974:	4a99      	ldr	r2, [pc, #612]	; (8001bdc <HAL_GPIO_Init+0x2d4>)
 8001976:	4293      	cmp	r3, r2
 8001978:	d85d      	bhi.n	8001a36 <HAL_GPIO_Init+0x12e>
 800197a:	2b12      	cmp	r3, #18
 800197c:	d82a      	bhi.n	80019d4 <HAL_GPIO_Init+0xcc>
 800197e:	2b12      	cmp	r3, #18
 8001980:	d859      	bhi.n	8001a36 <HAL_GPIO_Init+0x12e>
 8001982:	a201      	add	r2, pc, #4	; (adr r2, 8001988 <HAL_GPIO_Init+0x80>)
 8001984:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001988:	08001a03 	.word	0x08001a03
 800198c:	080019dd 	.word	0x080019dd
 8001990:	080019ef 	.word	0x080019ef
 8001994:	08001a31 	.word	0x08001a31
 8001998:	08001a37 	.word	0x08001a37
 800199c:	08001a37 	.word	0x08001a37
 80019a0:	08001a37 	.word	0x08001a37
 80019a4:	08001a37 	.word	0x08001a37
 80019a8:	08001a37 	.word	0x08001a37
 80019ac:	08001a37 	.word	0x08001a37
 80019b0:	08001a37 	.word	0x08001a37
 80019b4:	08001a37 	.word	0x08001a37
 80019b8:	08001a37 	.word	0x08001a37
 80019bc:	08001a37 	.word	0x08001a37
 80019c0:	08001a37 	.word	0x08001a37
 80019c4:	08001a37 	.word	0x08001a37
 80019c8:	08001a37 	.word	0x08001a37
 80019cc:	080019e5 	.word	0x080019e5
 80019d0:	080019f9 	.word	0x080019f9
 80019d4:	4a82      	ldr	r2, [pc, #520]	; (8001be0 <HAL_GPIO_Init+0x2d8>)
 80019d6:	4293      	cmp	r3, r2
 80019d8:	d013      	beq.n	8001a02 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80019da:	e02c      	b.n	8001a36 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80019dc:	683b      	ldr	r3, [r7, #0]
 80019de:	68db      	ldr	r3, [r3, #12]
 80019e0:	623b      	str	r3, [r7, #32]
          break;
 80019e2:	e029      	b.n	8001a38 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80019e4:	683b      	ldr	r3, [r7, #0]
 80019e6:	68db      	ldr	r3, [r3, #12]
 80019e8:	3304      	adds	r3, #4
 80019ea:	623b      	str	r3, [r7, #32]
          break;
 80019ec:	e024      	b.n	8001a38 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80019ee:	683b      	ldr	r3, [r7, #0]
 80019f0:	68db      	ldr	r3, [r3, #12]
 80019f2:	3308      	adds	r3, #8
 80019f4:	623b      	str	r3, [r7, #32]
          break;
 80019f6:	e01f      	b.n	8001a38 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80019f8:	683b      	ldr	r3, [r7, #0]
 80019fa:	68db      	ldr	r3, [r3, #12]
 80019fc:	330c      	adds	r3, #12
 80019fe:	623b      	str	r3, [r7, #32]
          break;
 8001a00:	e01a      	b.n	8001a38 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001a02:	683b      	ldr	r3, [r7, #0]
 8001a04:	689b      	ldr	r3, [r3, #8]
 8001a06:	2b00      	cmp	r3, #0
 8001a08:	d102      	bne.n	8001a10 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001a0a:	2304      	movs	r3, #4
 8001a0c:	623b      	str	r3, [r7, #32]
          break;
 8001a0e:	e013      	b.n	8001a38 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001a10:	683b      	ldr	r3, [r7, #0]
 8001a12:	689b      	ldr	r3, [r3, #8]
 8001a14:	2b01      	cmp	r3, #1
 8001a16:	d105      	bne.n	8001a24 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001a18:	2308      	movs	r3, #8
 8001a1a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	69fa      	ldr	r2, [r7, #28]
 8001a20:	611a      	str	r2, [r3, #16]
          break;
 8001a22:	e009      	b.n	8001a38 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001a24:	2308      	movs	r3, #8
 8001a26:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	69fa      	ldr	r2, [r7, #28]
 8001a2c:	615a      	str	r2, [r3, #20]
          break;
 8001a2e:	e003      	b.n	8001a38 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001a30:	2300      	movs	r3, #0
 8001a32:	623b      	str	r3, [r7, #32]
          break;
 8001a34:	e000      	b.n	8001a38 <HAL_GPIO_Init+0x130>
          break;
 8001a36:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001a38:	69bb      	ldr	r3, [r7, #24]
 8001a3a:	2bff      	cmp	r3, #255	; 0xff
 8001a3c:	d801      	bhi.n	8001a42 <HAL_GPIO_Init+0x13a>
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	e001      	b.n	8001a46 <HAL_GPIO_Init+0x13e>
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	3304      	adds	r3, #4
 8001a46:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001a48:	69bb      	ldr	r3, [r7, #24]
 8001a4a:	2bff      	cmp	r3, #255	; 0xff
 8001a4c:	d802      	bhi.n	8001a54 <HAL_GPIO_Init+0x14c>
 8001a4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a50:	009b      	lsls	r3, r3, #2
 8001a52:	e002      	b.n	8001a5a <HAL_GPIO_Init+0x152>
 8001a54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a56:	3b08      	subs	r3, #8
 8001a58:	009b      	lsls	r3, r3, #2
 8001a5a:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001a5c:	697b      	ldr	r3, [r7, #20]
 8001a5e:	681a      	ldr	r2, [r3, #0]
 8001a60:	210f      	movs	r1, #15
 8001a62:	693b      	ldr	r3, [r7, #16]
 8001a64:	fa01 f303 	lsl.w	r3, r1, r3
 8001a68:	43db      	mvns	r3, r3
 8001a6a:	401a      	ands	r2, r3
 8001a6c:	6a39      	ldr	r1, [r7, #32]
 8001a6e:	693b      	ldr	r3, [r7, #16]
 8001a70:	fa01 f303 	lsl.w	r3, r1, r3
 8001a74:	431a      	orrs	r2, r3
 8001a76:	697b      	ldr	r3, [r7, #20]
 8001a78:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001a7a:	683b      	ldr	r3, [r7, #0]
 8001a7c:	685b      	ldr	r3, [r3, #4]
 8001a7e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a82:	2b00      	cmp	r3, #0
 8001a84:	f000 8090 	beq.w	8001ba8 <HAL_GPIO_Init+0x2a0>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001a88:	4b56      	ldr	r3, [pc, #344]	; (8001be4 <HAL_GPIO_Init+0x2dc>)
 8001a8a:	699b      	ldr	r3, [r3, #24]
 8001a8c:	4a55      	ldr	r2, [pc, #340]	; (8001be4 <HAL_GPIO_Init+0x2dc>)
 8001a8e:	f043 0301 	orr.w	r3, r3, #1
 8001a92:	6193      	str	r3, [r2, #24]
 8001a94:	4b53      	ldr	r3, [pc, #332]	; (8001be4 <HAL_GPIO_Init+0x2dc>)
 8001a96:	699b      	ldr	r3, [r3, #24]
 8001a98:	f003 0301 	and.w	r3, r3, #1
 8001a9c:	60bb      	str	r3, [r7, #8]
 8001a9e:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001aa0:	4a51      	ldr	r2, [pc, #324]	; (8001be8 <HAL_GPIO_Init+0x2e0>)
 8001aa2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001aa4:	089b      	lsrs	r3, r3, #2
 8001aa6:	3302      	adds	r3, #2
 8001aa8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001aac:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001aae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ab0:	f003 0303 	and.w	r3, r3, #3
 8001ab4:	009b      	lsls	r3, r3, #2
 8001ab6:	220f      	movs	r2, #15
 8001ab8:	fa02 f303 	lsl.w	r3, r2, r3
 8001abc:	43db      	mvns	r3, r3
 8001abe:	68fa      	ldr	r2, [r7, #12]
 8001ac0:	4013      	ands	r3, r2
 8001ac2:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	4a49      	ldr	r2, [pc, #292]	; (8001bec <HAL_GPIO_Init+0x2e4>)
 8001ac8:	4293      	cmp	r3, r2
 8001aca:	d00d      	beq.n	8001ae8 <HAL_GPIO_Init+0x1e0>
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	4a48      	ldr	r2, [pc, #288]	; (8001bf0 <HAL_GPIO_Init+0x2e8>)
 8001ad0:	4293      	cmp	r3, r2
 8001ad2:	d007      	beq.n	8001ae4 <HAL_GPIO_Init+0x1dc>
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	4a47      	ldr	r2, [pc, #284]	; (8001bf4 <HAL_GPIO_Init+0x2ec>)
 8001ad8:	4293      	cmp	r3, r2
 8001ada:	d101      	bne.n	8001ae0 <HAL_GPIO_Init+0x1d8>
 8001adc:	2302      	movs	r3, #2
 8001ade:	e004      	b.n	8001aea <HAL_GPIO_Init+0x1e2>
 8001ae0:	2303      	movs	r3, #3
 8001ae2:	e002      	b.n	8001aea <HAL_GPIO_Init+0x1e2>
 8001ae4:	2301      	movs	r3, #1
 8001ae6:	e000      	b.n	8001aea <HAL_GPIO_Init+0x1e2>
 8001ae8:	2300      	movs	r3, #0
 8001aea:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001aec:	f002 0203 	and.w	r2, r2, #3
 8001af0:	0092      	lsls	r2, r2, #2
 8001af2:	4093      	lsls	r3, r2
 8001af4:	68fa      	ldr	r2, [r7, #12]
 8001af6:	4313      	orrs	r3, r2
 8001af8:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001afa:	493b      	ldr	r1, [pc, #236]	; (8001be8 <HAL_GPIO_Init+0x2e0>)
 8001afc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001afe:	089b      	lsrs	r3, r3, #2
 8001b00:	3302      	adds	r3, #2
 8001b02:	68fa      	ldr	r2, [r7, #12]
 8001b04:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001b08:	683b      	ldr	r3, [r7, #0]
 8001b0a:	685b      	ldr	r3, [r3, #4]
 8001b0c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001b10:	2b00      	cmp	r3, #0
 8001b12:	d006      	beq.n	8001b22 <HAL_GPIO_Init+0x21a>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001b14:	4b38      	ldr	r3, [pc, #224]	; (8001bf8 <HAL_GPIO_Init+0x2f0>)
 8001b16:	681a      	ldr	r2, [r3, #0]
 8001b18:	4937      	ldr	r1, [pc, #220]	; (8001bf8 <HAL_GPIO_Init+0x2f0>)
 8001b1a:	69bb      	ldr	r3, [r7, #24]
 8001b1c:	4313      	orrs	r3, r2
 8001b1e:	600b      	str	r3, [r1, #0]
 8001b20:	e006      	b.n	8001b30 <HAL_GPIO_Init+0x228>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001b22:	4b35      	ldr	r3, [pc, #212]	; (8001bf8 <HAL_GPIO_Init+0x2f0>)
 8001b24:	681a      	ldr	r2, [r3, #0]
 8001b26:	69bb      	ldr	r3, [r7, #24]
 8001b28:	43db      	mvns	r3, r3
 8001b2a:	4933      	ldr	r1, [pc, #204]	; (8001bf8 <HAL_GPIO_Init+0x2f0>)
 8001b2c:	4013      	ands	r3, r2
 8001b2e:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001b30:	683b      	ldr	r3, [r7, #0]
 8001b32:	685b      	ldr	r3, [r3, #4]
 8001b34:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b38:	2b00      	cmp	r3, #0
 8001b3a:	d006      	beq.n	8001b4a <HAL_GPIO_Init+0x242>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001b3c:	4b2e      	ldr	r3, [pc, #184]	; (8001bf8 <HAL_GPIO_Init+0x2f0>)
 8001b3e:	685a      	ldr	r2, [r3, #4]
 8001b40:	492d      	ldr	r1, [pc, #180]	; (8001bf8 <HAL_GPIO_Init+0x2f0>)
 8001b42:	69bb      	ldr	r3, [r7, #24]
 8001b44:	4313      	orrs	r3, r2
 8001b46:	604b      	str	r3, [r1, #4]
 8001b48:	e006      	b.n	8001b58 <HAL_GPIO_Init+0x250>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001b4a:	4b2b      	ldr	r3, [pc, #172]	; (8001bf8 <HAL_GPIO_Init+0x2f0>)
 8001b4c:	685a      	ldr	r2, [r3, #4]
 8001b4e:	69bb      	ldr	r3, [r7, #24]
 8001b50:	43db      	mvns	r3, r3
 8001b52:	4929      	ldr	r1, [pc, #164]	; (8001bf8 <HAL_GPIO_Init+0x2f0>)
 8001b54:	4013      	ands	r3, r2
 8001b56:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001b58:	683b      	ldr	r3, [r7, #0]
 8001b5a:	685b      	ldr	r3, [r3, #4]
 8001b5c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001b60:	2b00      	cmp	r3, #0
 8001b62:	d006      	beq.n	8001b72 <HAL_GPIO_Init+0x26a>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001b64:	4b24      	ldr	r3, [pc, #144]	; (8001bf8 <HAL_GPIO_Init+0x2f0>)
 8001b66:	689a      	ldr	r2, [r3, #8]
 8001b68:	4923      	ldr	r1, [pc, #140]	; (8001bf8 <HAL_GPIO_Init+0x2f0>)
 8001b6a:	69bb      	ldr	r3, [r7, #24]
 8001b6c:	4313      	orrs	r3, r2
 8001b6e:	608b      	str	r3, [r1, #8]
 8001b70:	e006      	b.n	8001b80 <HAL_GPIO_Init+0x278>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001b72:	4b21      	ldr	r3, [pc, #132]	; (8001bf8 <HAL_GPIO_Init+0x2f0>)
 8001b74:	689a      	ldr	r2, [r3, #8]
 8001b76:	69bb      	ldr	r3, [r7, #24]
 8001b78:	43db      	mvns	r3, r3
 8001b7a:	491f      	ldr	r1, [pc, #124]	; (8001bf8 <HAL_GPIO_Init+0x2f0>)
 8001b7c:	4013      	ands	r3, r2
 8001b7e:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001b80:	683b      	ldr	r3, [r7, #0]
 8001b82:	685b      	ldr	r3, [r3, #4]
 8001b84:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001b88:	2b00      	cmp	r3, #0
 8001b8a:	d006      	beq.n	8001b9a <HAL_GPIO_Init+0x292>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001b8c:	4b1a      	ldr	r3, [pc, #104]	; (8001bf8 <HAL_GPIO_Init+0x2f0>)
 8001b8e:	68da      	ldr	r2, [r3, #12]
 8001b90:	4919      	ldr	r1, [pc, #100]	; (8001bf8 <HAL_GPIO_Init+0x2f0>)
 8001b92:	69bb      	ldr	r3, [r7, #24]
 8001b94:	4313      	orrs	r3, r2
 8001b96:	60cb      	str	r3, [r1, #12]
 8001b98:	e006      	b.n	8001ba8 <HAL_GPIO_Init+0x2a0>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001b9a:	4b17      	ldr	r3, [pc, #92]	; (8001bf8 <HAL_GPIO_Init+0x2f0>)
 8001b9c:	68da      	ldr	r2, [r3, #12]
 8001b9e:	69bb      	ldr	r3, [r7, #24]
 8001ba0:	43db      	mvns	r3, r3
 8001ba2:	4915      	ldr	r1, [pc, #84]	; (8001bf8 <HAL_GPIO_Init+0x2f0>)
 8001ba4:	4013      	ands	r3, r2
 8001ba6:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8001ba8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001baa:	3301      	adds	r3, #1
 8001bac:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001bae:	683b      	ldr	r3, [r7, #0]
 8001bb0:	681a      	ldr	r2, [r3, #0]
 8001bb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bb4:	fa22 f303 	lsr.w	r3, r2, r3
 8001bb8:	2b00      	cmp	r3, #0
 8001bba:	f47f aeaf 	bne.w	800191c <HAL_GPIO_Init+0x14>
  }
}
 8001bbe:	bf00      	nop
 8001bc0:	bf00      	nop
 8001bc2:	372c      	adds	r7, #44	; 0x2c
 8001bc4:	46bd      	mov	sp, r7
 8001bc6:	bc80      	pop	{r7}
 8001bc8:	4770      	bx	lr
 8001bca:	bf00      	nop
 8001bcc:	10320000 	.word	0x10320000
 8001bd0:	10310000 	.word	0x10310000
 8001bd4:	10220000 	.word	0x10220000
 8001bd8:	10210000 	.word	0x10210000
 8001bdc:	10120000 	.word	0x10120000
 8001be0:	10110000 	.word	0x10110000
 8001be4:	40021000 	.word	0x40021000
 8001be8:	40010000 	.word	0x40010000
 8001bec:	40010800 	.word	0x40010800
 8001bf0:	40010c00 	.word	0x40010c00
 8001bf4:	40011000 	.word	0x40011000
 8001bf8:	40010400 	.word	0x40010400

08001bfc <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001bfc:	b480      	push	{r7}
 8001bfe:	b085      	sub	sp, #20
 8001c00:	af00      	add	r7, sp, #0
 8001c02:	6078      	str	r0, [r7, #4]
 8001c04:	460b      	mov	r3, r1
 8001c06:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	689a      	ldr	r2, [r3, #8]
 8001c0c:	887b      	ldrh	r3, [r7, #2]
 8001c0e:	4013      	ands	r3, r2
 8001c10:	2b00      	cmp	r3, #0
 8001c12:	d002      	beq.n	8001c1a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001c14:	2301      	movs	r3, #1
 8001c16:	73fb      	strb	r3, [r7, #15]
 8001c18:	e001      	b.n	8001c1e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001c1a:	2300      	movs	r3, #0
 8001c1c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001c1e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001c20:	4618      	mov	r0, r3
 8001c22:	3714      	adds	r7, #20
 8001c24:	46bd      	mov	sp, r7
 8001c26:	bc80      	pop	{r7}
 8001c28:	4770      	bx	lr

08001c2a <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001c2a:	b480      	push	{r7}
 8001c2c:	b083      	sub	sp, #12
 8001c2e:	af00      	add	r7, sp, #0
 8001c30:	6078      	str	r0, [r7, #4]
 8001c32:	460b      	mov	r3, r1
 8001c34:	807b      	strh	r3, [r7, #2]
 8001c36:	4613      	mov	r3, r2
 8001c38:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001c3a:	787b      	ldrb	r3, [r7, #1]
 8001c3c:	2b00      	cmp	r3, #0
 8001c3e:	d003      	beq.n	8001c48 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001c40:	887a      	ldrh	r2, [r7, #2]
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001c46:	e003      	b.n	8001c50 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001c48:	887b      	ldrh	r3, [r7, #2]
 8001c4a:	041a      	lsls	r2, r3, #16
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	611a      	str	r2, [r3, #16]
}
 8001c50:	bf00      	nop
 8001c52:	370c      	adds	r7, #12
 8001c54:	46bd      	mov	sp, r7
 8001c56:	bc80      	pop	{r7}
 8001c58:	4770      	bx	lr

08001c5a <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001c5a:	b480      	push	{r7}
 8001c5c:	b085      	sub	sp, #20
 8001c5e:	af00      	add	r7, sp, #0
 8001c60:	6078      	str	r0, [r7, #4]
 8001c62:	460b      	mov	r3, r1
 8001c64:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	68db      	ldr	r3, [r3, #12]
 8001c6a:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001c6c:	887a      	ldrh	r2, [r7, #2]
 8001c6e:	68fb      	ldr	r3, [r7, #12]
 8001c70:	4013      	ands	r3, r2
 8001c72:	041a      	lsls	r2, r3, #16
 8001c74:	68fb      	ldr	r3, [r7, #12]
 8001c76:	43d9      	mvns	r1, r3
 8001c78:	887b      	ldrh	r3, [r7, #2]
 8001c7a:	400b      	ands	r3, r1
 8001c7c:	431a      	orrs	r2, r3
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	611a      	str	r2, [r3, #16]
}
 8001c82:	bf00      	nop
 8001c84:	3714      	adds	r7, #20
 8001c86:	46bd      	mov	sp, r7
 8001c88:	bc80      	pop	{r7}
 8001c8a:	4770      	bx	lr

08001c8c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001c8c:	b580      	push	{r7, lr}
 8001c8e:	b086      	sub	sp, #24
 8001c90:	af00      	add	r7, sp, #0
 8001c92:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	2b00      	cmp	r3, #0
 8001c98:	d101      	bne.n	8001c9e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001c9a:	2301      	movs	r3, #1
 8001c9c:	e26c      	b.n	8002178 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	f003 0301 	and.w	r3, r3, #1
 8001ca6:	2b00      	cmp	r3, #0
 8001ca8:	f000 8087 	beq.w	8001dba <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001cac:	4b92      	ldr	r3, [pc, #584]	; (8001ef8 <HAL_RCC_OscConfig+0x26c>)
 8001cae:	685b      	ldr	r3, [r3, #4]
 8001cb0:	f003 030c 	and.w	r3, r3, #12
 8001cb4:	2b04      	cmp	r3, #4
 8001cb6:	d00c      	beq.n	8001cd2 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001cb8:	4b8f      	ldr	r3, [pc, #572]	; (8001ef8 <HAL_RCC_OscConfig+0x26c>)
 8001cba:	685b      	ldr	r3, [r3, #4]
 8001cbc:	f003 030c 	and.w	r3, r3, #12
 8001cc0:	2b08      	cmp	r3, #8
 8001cc2:	d112      	bne.n	8001cea <HAL_RCC_OscConfig+0x5e>
 8001cc4:	4b8c      	ldr	r3, [pc, #560]	; (8001ef8 <HAL_RCC_OscConfig+0x26c>)
 8001cc6:	685b      	ldr	r3, [r3, #4]
 8001cc8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001ccc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001cd0:	d10b      	bne.n	8001cea <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001cd2:	4b89      	ldr	r3, [pc, #548]	; (8001ef8 <HAL_RCC_OscConfig+0x26c>)
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001cda:	2b00      	cmp	r3, #0
 8001cdc:	d06c      	beq.n	8001db8 <HAL_RCC_OscConfig+0x12c>
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	685b      	ldr	r3, [r3, #4]
 8001ce2:	2b00      	cmp	r3, #0
 8001ce4:	d168      	bne.n	8001db8 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001ce6:	2301      	movs	r3, #1
 8001ce8:	e246      	b.n	8002178 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	685b      	ldr	r3, [r3, #4]
 8001cee:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001cf2:	d106      	bne.n	8001d02 <HAL_RCC_OscConfig+0x76>
 8001cf4:	4b80      	ldr	r3, [pc, #512]	; (8001ef8 <HAL_RCC_OscConfig+0x26c>)
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	4a7f      	ldr	r2, [pc, #508]	; (8001ef8 <HAL_RCC_OscConfig+0x26c>)
 8001cfa:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001cfe:	6013      	str	r3, [r2, #0]
 8001d00:	e02e      	b.n	8001d60 <HAL_RCC_OscConfig+0xd4>
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	685b      	ldr	r3, [r3, #4]
 8001d06:	2b00      	cmp	r3, #0
 8001d08:	d10c      	bne.n	8001d24 <HAL_RCC_OscConfig+0x98>
 8001d0a:	4b7b      	ldr	r3, [pc, #492]	; (8001ef8 <HAL_RCC_OscConfig+0x26c>)
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	4a7a      	ldr	r2, [pc, #488]	; (8001ef8 <HAL_RCC_OscConfig+0x26c>)
 8001d10:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001d14:	6013      	str	r3, [r2, #0]
 8001d16:	4b78      	ldr	r3, [pc, #480]	; (8001ef8 <HAL_RCC_OscConfig+0x26c>)
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	4a77      	ldr	r2, [pc, #476]	; (8001ef8 <HAL_RCC_OscConfig+0x26c>)
 8001d1c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001d20:	6013      	str	r3, [r2, #0]
 8001d22:	e01d      	b.n	8001d60 <HAL_RCC_OscConfig+0xd4>
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	685b      	ldr	r3, [r3, #4]
 8001d28:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001d2c:	d10c      	bne.n	8001d48 <HAL_RCC_OscConfig+0xbc>
 8001d2e:	4b72      	ldr	r3, [pc, #456]	; (8001ef8 <HAL_RCC_OscConfig+0x26c>)
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	4a71      	ldr	r2, [pc, #452]	; (8001ef8 <HAL_RCC_OscConfig+0x26c>)
 8001d34:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001d38:	6013      	str	r3, [r2, #0]
 8001d3a:	4b6f      	ldr	r3, [pc, #444]	; (8001ef8 <HAL_RCC_OscConfig+0x26c>)
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	4a6e      	ldr	r2, [pc, #440]	; (8001ef8 <HAL_RCC_OscConfig+0x26c>)
 8001d40:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001d44:	6013      	str	r3, [r2, #0]
 8001d46:	e00b      	b.n	8001d60 <HAL_RCC_OscConfig+0xd4>
 8001d48:	4b6b      	ldr	r3, [pc, #428]	; (8001ef8 <HAL_RCC_OscConfig+0x26c>)
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	4a6a      	ldr	r2, [pc, #424]	; (8001ef8 <HAL_RCC_OscConfig+0x26c>)
 8001d4e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001d52:	6013      	str	r3, [r2, #0]
 8001d54:	4b68      	ldr	r3, [pc, #416]	; (8001ef8 <HAL_RCC_OscConfig+0x26c>)
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	4a67      	ldr	r2, [pc, #412]	; (8001ef8 <HAL_RCC_OscConfig+0x26c>)
 8001d5a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001d5e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	685b      	ldr	r3, [r3, #4]
 8001d64:	2b00      	cmp	r3, #0
 8001d66:	d013      	beq.n	8001d90 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d68:	f7ff fcb6 	bl	80016d8 <HAL_GetTick>
 8001d6c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001d6e:	e008      	b.n	8001d82 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001d70:	f7ff fcb2 	bl	80016d8 <HAL_GetTick>
 8001d74:	4602      	mov	r2, r0
 8001d76:	693b      	ldr	r3, [r7, #16]
 8001d78:	1ad3      	subs	r3, r2, r3
 8001d7a:	2b64      	cmp	r3, #100	; 0x64
 8001d7c:	d901      	bls.n	8001d82 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001d7e:	2303      	movs	r3, #3
 8001d80:	e1fa      	b.n	8002178 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001d82:	4b5d      	ldr	r3, [pc, #372]	; (8001ef8 <HAL_RCC_OscConfig+0x26c>)
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d8a:	2b00      	cmp	r3, #0
 8001d8c:	d0f0      	beq.n	8001d70 <HAL_RCC_OscConfig+0xe4>
 8001d8e:	e014      	b.n	8001dba <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d90:	f7ff fca2 	bl	80016d8 <HAL_GetTick>
 8001d94:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001d96:	e008      	b.n	8001daa <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001d98:	f7ff fc9e 	bl	80016d8 <HAL_GetTick>
 8001d9c:	4602      	mov	r2, r0
 8001d9e:	693b      	ldr	r3, [r7, #16]
 8001da0:	1ad3      	subs	r3, r2, r3
 8001da2:	2b64      	cmp	r3, #100	; 0x64
 8001da4:	d901      	bls.n	8001daa <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001da6:	2303      	movs	r3, #3
 8001da8:	e1e6      	b.n	8002178 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001daa:	4b53      	ldr	r3, [pc, #332]	; (8001ef8 <HAL_RCC_OscConfig+0x26c>)
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001db2:	2b00      	cmp	r3, #0
 8001db4:	d1f0      	bne.n	8001d98 <HAL_RCC_OscConfig+0x10c>
 8001db6:	e000      	b.n	8001dba <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001db8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	f003 0302 	and.w	r3, r3, #2
 8001dc2:	2b00      	cmp	r3, #0
 8001dc4:	d063      	beq.n	8001e8e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001dc6:	4b4c      	ldr	r3, [pc, #304]	; (8001ef8 <HAL_RCC_OscConfig+0x26c>)
 8001dc8:	685b      	ldr	r3, [r3, #4]
 8001dca:	f003 030c 	and.w	r3, r3, #12
 8001dce:	2b00      	cmp	r3, #0
 8001dd0:	d00b      	beq.n	8001dea <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001dd2:	4b49      	ldr	r3, [pc, #292]	; (8001ef8 <HAL_RCC_OscConfig+0x26c>)
 8001dd4:	685b      	ldr	r3, [r3, #4]
 8001dd6:	f003 030c 	and.w	r3, r3, #12
 8001dda:	2b08      	cmp	r3, #8
 8001ddc:	d11c      	bne.n	8001e18 <HAL_RCC_OscConfig+0x18c>
 8001dde:	4b46      	ldr	r3, [pc, #280]	; (8001ef8 <HAL_RCC_OscConfig+0x26c>)
 8001de0:	685b      	ldr	r3, [r3, #4]
 8001de2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001de6:	2b00      	cmp	r3, #0
 8001de8:	d116      	bne.n	8001e18 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001dea:	4b43      	ldr	r3, [pc, #268]	; (8001ef8 <HAL_RCC_OscConfig+0x26c>)
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	f003 0302 	and.w	r3, r3, #2
 8001df2:	2b00      	cmp	r3, #0
 8001df4:	d005      	beq.n	8001e02 <HAL_RCC_OscConfig+0x176>
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	691b      	ldr	r3, [r3, #16]
 8001dfa:	2b01      	cmp	r3, #1
 8001dfc:	d001      	beq.n	8001e02 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001dfe:	2301      	movs	r3, #1
 8001e00:	e1ba      	b.n	8002178 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001e02:	4b3d      	ldr	r3, [pc, #244]	; (8001ef8 <HAL_RCC_OscConfig+0x26c>)
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	695b      	ldr	r3, [r3, #20]
 8001e0e:	00db      	lsls	r3, r3, #3
 8001e10:	4939      	ldr	r1, [pc, #228]	; (8001ef8 <HAL_RCC_OscConfig+0x26c>)
 8001e12:	4313      	orrs	r3, r2
 8001e14:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001e16:	e03a      	b.n	8001e8e <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	691b      	ldr	r3, [r3, #16]
 8001e1c:	2b00      	cmp	r3, #0
 8001e1e:	d020      	beq.n	8001e62 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001e20:	4b36      	ldr	r3, [pc, #216]	; (8001efc <HAL_RCC_OscConfig+0x270>)
 8001e22:	2201      	movs	r2, #1
 8001e24:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e26:	f7ff fc57 	bl	80016d8 <HAL_GetTick>
 8001e2a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001e2c:	e008      	b.n	8001e40 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001e2e:	f7ff fc53 	bl	80016d8 <HAL_GetTick>
 8001e32:	4602      	mov	r2, r0
 8001e34:	693b      	ldr	r3, [r7, #16]
 8001e36:	1ad3      	subs	r3, r2, r3
 8001e38:	2b02      	cmp	r3, #2
 8001e3a:	d901      	bls.n	8001e40 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001e3c:	2303      	movs	r3, #3
 8001e3e:	e19b      	b.n	8002178 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001e40:	4b2d      	ldr	r3, [pc, #180]	; (8001ef8 <HAL_RCC_OscConfig+0x26c>)
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	f003 0302 	and.w	r3, r3, #2
 8001e48:	2b00      	cmp	r3, #0
 8001e4a:	d0f0      	beq.n	8001e2e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001e4c:	4b2a      	ldr	r3, [pc, #168]	; (8001ef8 <HAL_RCC_OscConfig+0x26c>)
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	695b      	ldr	r3, [r3, #20]
 8001e58:	00db      	lsls	r3, r3, #3
 8001e5a:	4927      	ldr	r1, [pc, #156]	; (8001ef8 <HAL_RCC_OscConfig+0x26c>)
 8001e5c:	4313      	orrs	r3, r2
 8001e5e:	600b      	str	r3, [r1, #0]
 8001e60:	e015      	b.n	8001e8e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001e62:	4b26      	ldr	r3, [pc, #152]	; (8001efc <HAL_RCC_OscConfig+0x270>)
 8001e64:	2200      	movs	r2, #0
 8001e66:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e68:	f7ff fc36 	bl	80016d8 <HAL_GetTick>
 8001e6c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001e6e:	e008      	b.n	8001e82 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001e70:	f7ff fc32 	bl	80016d8 <HAL_GetTick>
 8001e74:	4602      	mov	r2, r0
 8001e76:	693b      	ldr	r3, [r7, #16]
 8001e78:	1ad3      	subs	r3, r2, r3
 8001e7a:	2b02      	cmp	r3, #2
 8001e7c:	d901      	bls.n	8001e82 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001e7e:	2303      	movs	r3, #3
 8001e80:	e17a      	b.n	8002178 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001e82:	4b1d      	ldr	r3, [pc, #116]	; (8001ef8 <HAL_RCC_OscConfig+0x26c>)
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	f003 0302 	and.w	r3, r3, #2
 8001e8a:	2b00      	cmp	r3, #0
 8001e8c:	d1f0      	bne.n	8001e70 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	f003 0308 	and.w	r3, r3, #8
 8001e96:	2b00      	cmp	r3, #0
 8001e98:	d03a      	beq.n	8001f10 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	699b      	ldr	r3, [r3, #24]
 8001e9e:	2b00      	cmp	r3, #0
 8001ea0:	d019      	beq.n	8001ed6 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001ea2:	4b17      	ldr	r3, [pc, #92]	; (8001f00 <HAL_RCC_OscConfig+0x274>)
 8001ea4:	2201      	movs	r2, #1
 8001ea6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001ea8:	f7ff fc16 	bl	80016d8 <HAL_GetTick>
 8001eac:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001eae:	e008      	b.n	8001ec2 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001eb0:	f7ff fc12 	bl	80016d8 <HAL_GetTick>
 8001eb4:	4602      	mov	r2, r0
 8001eb6:	693b      	ldr	r3, [r7, #16]
 8001eb8:	1ad3      	subs	r3, r2, r3
 8001eba:	2b02      	cmp	r3, #2
 8001ebc:	d901      	bls.n	8001ec2 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001ebe:	2303      	movs	r3, #3
 8001ec0:	e15a      	b.n	8002178 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001ec2:	4b0d      	ldr	r3, [pc, #52]	; (8001ef8 <HAL_RCC_OscConfig+0x26c>)
 8001ec4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ec6:	f003 0302 	and.w	r3, r3, #2
 8001eca:	2b00      	cmp	r3, #0
 8001ecc:	d0f0      	beq.n	8001eb0 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001ece:	2001      	movs	r0, #1
 8001ed0:	f000 faa6 	bl	8002420 <RCC_Delay>
 8001ed4:	e01c      	b.n	8001f10 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001ed6:	4b0a      	ldr	r3, [pc, #40]	; (8001f00 <HAL_RCC_OscConfig+0x274>)
 8001ed8:	2200      	movs	r2, #0
 8001eda:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001edc:	f7ff fbfc 	bl	80016d8 <HAL_GetTick>
 8001ee0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001ee2:	e00f      	b.n	8001f04 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001ee4:	f7ff fbf8 	bl	80016d8 <HAL_GetTick>
 8001ee8:	4602      	mov	r2, r0
 8001eea:	693b      	ldr	r3, [r7, #16]
 8001eec:	1ad3      	subs	r3, r2, r3
 8001eee:	2b02      	cmp	r3, #2
 8001ef0:	d908      	bls.n	8001f04 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001ef2:	2303      	movs	r3, #3
 8001ef4:	e140      	b.n	8002178 <HAL_RCC_OscConfig+0x4ec>
 8001ef6:	bf00      	nop
 8001ef8:	40021000 	.word	0x40021000
 8001efc:	42420000 	.word	0x42420000
 8001f00:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001f04:	4b9e      	ldr	r3, [pc, #632]	; (8002180 <HAL_RCC_OscConfig+0x4f4>)
 8001f06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f08:	f003 0302 	and.w	r3, r3, #2
 8001f0c:	2b00      	cmp	r3, #0
 8001f0e:	d1e9      	bne.n	8001ee4 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	f003 0304 	and.w	r3, r3, #4
 8001f18:	2b00      	cmp	r3, #0
 8001f1a:	f000 80a6 	beq.w	800206a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001f1e:	2300      	movs	r3, #0
 8001f20:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001f22:	4b97      	ldr	r3, [pc, #604]	; (8002180 <HAL_RCC_OscConfig+0x4f4>)
 8001f24:	69db      	ldr	r3, [r3, #28]
 8001f26:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f2a:	2b00      	cmp	r3, #0
 8001f2c:	d10d      	bne.n	8001f4a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001f2e:	4b94      	ldr	r3, [pc, #592]	; (8002180 <HAL_RCC_OscConfig+0x4f4>)
 8001f30:	69db      	ldr	r3, [r3, #28]
 8001f32:	4a93      	ldr	r2, [pc, #588]	; (8002180 <HAL_RCC_OscConfig+0x4f4>)
 8001f34:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001f38:	61d3      	str	r3, [r2, #28]
 8001f3a:	4b91      	ldr	r3, [pc, #580]	; (8002180 <HAL_RCC_OscConfig+0x4f4>)
 8001f3c:	69db      	ldr	r3, [r3, #28]
 8001f3e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f42:	60bb      	str	r3, [r7, #8]
 8001f44:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001f46:	2301      	movs	r3, #1
 8001f48:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001f4a:	4b8e      	ldr	r3, [pc, #568]	; (8002184 <HAL_RCC_OscConfig+0x4f8>)
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f52:	2b00      	cmp	r3, #0
 8001f54:	d118      	bne.n	8001f88 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001f56:	4b8b      	ldr	r3, [pc, #556]	; (8002184 <HAL_RCC_OscConfig+0x4f8>)
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	4a8a      	ldr	r2, [pc, #552]	; (8002184 <HAL_RCC_OscConfig+0x4f8>)
 8001f5c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001f60:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001f62:	f7ff fbb9 	bl	80016d8 <HAL_GetTick>
 8001f66:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001f68:	e008      	b.n	8001f7c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001f6a:	f7ff fbb5 	bl	80016d8 <HAL_GetTick>
 8001f6e:	4602      	mov	r2, r0
 8001f70:	693b      	ldr	r3, [r7, #16]
 8001f72:	1ad3      	subs	r3, r2, r3
 8001f74:	2b64      	cmp	r3, #100	; 0x64
 8001f76:	d901      	bls.n	8001f7c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001f78:	2303      	movs	r3, #3
 8001f7a:	e0fd      	b.n	8002178 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001f7c:	4b81      	ldr	r3, [pc, #516]	; (8002184 <HAL_RCC_OscConfig+0x4f8>)
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f84:	2b00      	cmp	r3, #0
 8001f86:	d0f0      	beq.n	8001f6a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	68db      	ldr	r3, [r3, #12]
 8001f8c:	2b01      	cmp	r3, #1
 8001f8e:	d106      	bne.n	8001f9e <HAL_RCC_OscConfig+0x312>
 8001f90:	4b7b      	ldr	r3, [pc, #492]	; (8002180 <HAL_RCC_OscConfig+0x4f4>)
 8001f92:	6a1b      	ldr	r3, [r3, #32]
 8001f94:	4a7a      	ldr	r2, [pc, #488]	; (8002180 <HAL_RCC_OscConfig+0x4f4>)
 8001f96:	f043 0301 	orr.w	r3, r3, #1
 8001f9a:	6213      	str	r3, [r2, #32]
 8001f9c:	e02d      	b.n	8001ffa <HAL_RCC_OscConfig+0x36e>
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	68db      	ldr	r3, [r3, #12]
 8001fa2:	2b00      	cmp	r3, #0
 8001fa4:	d10c      	bne.n	8001fc0 <HAL_RCC_OscConfig+0x334>
 8001fa6:	4b76      	ldr	r3, [pc, #472]	; (8002180 <HAL_RCC_OscConfig+0x4f4>)
 8001fa8:	6a1b      	ldr	r3, [r3, #32]
 8001faa:	4a75      	ldr	r2, [pc, #468]	; (8002180 <HAL_RCC_OscConfig+0x4f4>)
 8001fac:	f023 0301 	bic.w	r3, r3, #1
 8001fb0:	6213      	str	r3, [r2, #32]
 8001fb2:	4b73      	ldr	r3, [pc, #460]	; (8002180 <HAL_RCC_OscConfig+0x4f4>)
 8001fb4:	6a1b      	ldr	r3, [r3, #32]
 8001fb6:	4a72      	ldr	r2, [pc, #456]	; (8002180 <HAL_RCC_OscConfig+0x4f4>)
 8001fb8:	f023 0304 	bic.w	r3, r3, #4
 8001fbc:	6213      	str	r3, [r2, #32]
 8001fbe:	e01c      	b.n	8001ffa <HAL_RCC_OscConfig+0x36e>
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	68db      	ldr	r3, [r3, #12]
 8001fc4:	2b05      	cmp	r3, #5
 8001fc6:	d10c      	bne.n	8001fe2 <HAL_RCC_OscConfig+0x356>
 8001fc8:	4b6d      	ldr	r3, [pc, #436]	; (8002180 <HAL_RCC_OscConfig+0x4f4>)
 8001fca:	6a1b      	ldr	r3, [r3, #32]
 8001fcc:	4a6c      	ldr	r2, [pc, #432]	; (8002180 <HAL_RCC_OscConfig+0x4f4>)
 8001fce:	f043 0304 	orr.w	r3, r3, #4
 8001fd2:	6213      	str	r3, [r2, #32]
 8001fd4:	4b6a      	ldr	r3, [pc, #424]	; (8002180 <HAL_RCC_OscConfig+0x4f4>)
 8001fd6:	6a1b      	ldr	r3, [r3, #32]
 8001fd8:	4a69      	ldr	r2, [pc, #420]	; (8002180 <HAL_RCC_OscConfig+0x4f4>)
 8001fda:	f043 0301 	orr.w	r3, r3, #1
 8001fde:	6213      	str	r3, [r2, #32]
 8001fe0:	e00b      	b.n	8001ffa <HAL_RCC_OscConfig+0x36e>
 8001fe2:	4b67      	ldr	r3, [pc, #412]	; (8002180 <HAL_RCC_OscConfig+0x4f4>)
 8001fe4:	6a1b      	ldr	r3, [r3, #32]
 8001fe6:	4a66      	ldr	r2, [pc, #408]	; (8002180 <HAL_RCC_OscConfig+0x4f4>)
 8001fe8:	f023 0301 	bic.w	r3, r3, #1
 8001fec:	6213      	str	r3, [r2, #32]
 8001fee:	4b64      	ldr	r3, [pc, #400]	; (8002180 <HAL_RCC_OscConfig+0x4f4>)
 8001ff0:	6a1b      	ldr	r3, [r3, #32]
 8001ff2:	4a63      	ldr	r2, [pc, #396]	; (8002180 <HAL_RCC_OscConfig+0x4f4>)
 8001ff4:	f023 0304 	bic.w	r3, r3, #4
 8001ff8:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	68db      	ldr	r3, [r3, #12]
 8001ffe:	2b00      	cmp	r3, #0
 8002000:	d015      	beq.n	800202e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002002:	f7ff fb69 	bl	80016d8 <HAL_GetTick>
 8002006:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002008:	e00a      	b.n	8002020 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800200a:	f7ff fb65 	bl	80016d8 <HAL_GetTick>
 800200e:	4602      	mov	r2, r0
 8002010:	693b      	ldr	r3, [r7, #16]
 8002012:	1ad3      	subs	r3, r2, r3
 8002014:	f241 3288 	movw	r2, #5000	; 0x1388
 8002018:	4293      	cmp	r3, r2
 800201a:	d901      	bls.n	8002020 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 800201c:	2303      	movs	r3, #3
 800201e:	e0ab      	b.n	8002178 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002020:	4b57      	ldr	r3, [pc, #348]	; (8002180 <HAL_RCC_OscConfig+0x4f4>)
 8002022:	6a1b      	ldr	r3, [r3, #32]
 8002024:	f003 0302 	and.w	r3, r3, #2
 8002028:	2b00      	cmp	r3, #0
 800202a:	d0ee      	beq.n	800200a <HAL_RCC_OscConfig+0x37e>
 800202c:	e014      	b.n	8002058 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800202e:	f7ff fb53 	bl	80016d8 <HAL_GetTick>
 8002032:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002034:	e00a      	b.n	800204c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002036:	f7ff fb4f 	bl	80016d8 <HAL_GetTick>
 800203a:	4602      	mov	r2, r0
 800203c:	693b      	ldr	r3, [r7, #16]
 800203e:	1ad3      	subs	r3, r2, r3
 8002040:	f241 3288 	movw	r2, #5000	; 0x1388
 8002044:	4293      	cmp	r3, r2
 8002046:	d901      	bls.n	800204c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002048:	2303      	movs	r3, #3
 800204a:	e095      	b.n	8002178 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800204c:	4b4c      	ldr	r3, [pc, #304]	; (8002180 <HAL_RCC_OscConfig+0x4f4>)
 800204e:	6a1b      	ldr	r3, [r3, #32]
 8002050:	f003 0302 	and.w	r3, r3, #2
 8002054:	2b00      	cmp	r3, #0
 8002056:	d1ee      	bne.n	8002036 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002058:	7dfb      	ldrb	r3, [r7, #23]
 800205a:	2b01      	cmp	r3, #1
 800205c:	d105      	bne.n	800206a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800205e:	4b48      	ldr	r3, [pc, #288]	; (8002180 <HAL_RCC_OscConfig+0x4f4>)
 8002060:	69db      	ldr	r3, [r3, #28]
 8002062:	4a47      	ldr	r2, [pc, #284]	; (8002180 <HAL_RCC_OscConfig+0x4f4>)
 8002064:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002068:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	69db      	ldr	r3, [r3, #28]
 800206e:	2b00      	cmp	r3, #0
 8002070:	f000 8081 	beq.w	8002176 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002074:	4b42      	ldr	r3, [pc, #264]	; (8002180 <HAL_RCC_OscConfig+0x4f4>)
 8002076:	685b      	ldr	r3, [r3, #4]
 8002078:	f003 030c 	and.w	r3, r3, #12
 800207c:	2b08      	cmp	r3, #8
 800207e:	d061      	beq.n	8002144 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	69db      	ldr	r3, [r3, #28]
 8002084:	2b02      	cmp	r3, #2
 8002086:	d146      	bne.n	8002116 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002088:	4b3f      	ldr	r3, [pc, #252]	; (8002188 <HAL_RCC_OscConfig+0x4fc>)
 800208a:	2200      	movs	r2, #0
 800208c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800208e:	f7ff fb23 	bl	80016d8 <HAL_GetTick>
 8002092:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002094:	e008      	b.n	80020a8 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002096:	f7ff fb1f 	bl	80016d8 <HAL_GetTick>
 800209a:	4602      	mov	r2, r0
 800209c:	693b      	ldr	r3, [r7, #16]
 800209e:	1ad3      	subs	r3, r2, r3
 80020a0:	2b02      	cmp	r3, #2
 80020a2:	d901      	bls.n	80020a8 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80020a4:	2303      	movs	r3, #3
 80020a6:	e067      	b.n	8002178 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80020a8:	4b35      	ldr	r3, [pc, #212]	; (8002180 <HAL_RCC_OscConfig+0x4f4>)
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80020b0:	2b00      	cmp	r3, #0
 80020b2:	d1f0      	bne.n	8002096 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	6a1b      	ldr	r3, [r3, #32]
 80020b8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80020bc:	d108      	bne.n	80020d0 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80020be:	4b30      	ldr	r3, [pc, #192]	; (8002180 <HAL_RCC_OscConfig+0x4f4>)
 80020c0:	685b      	ldr	r3, [r3, #4]
 80020c2:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	689b      	ldr	r3, [r3, #8]
 80020ca:	492d      	ldr	r1, [pc, #180]	; (8002180 <HAL_RCC_OscConfig+0x4f4>)
 80020cc:	4313      	orrs	r3, r2
 80020ce:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80020d0:	4b2b      	ldr	r3, [pc, #172]	; (8002180 <HAL_RCC_OscConfig+0x4f4>)
 80020d2:	685b      	ldr	r3, [r3, #4]
 80020d4:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	6a19      	ldr	r1, [r3, #32]
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020e0:	430b      	orrs	r3, r1
 80020e2:	4927      	ldr	r1, [pc, #156]	; (8002180 <HAL_RCC_OscConfig+0x4f4>)
 80020e4:	4313      	orrs	r3, r2
 80020e6:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80020e8:	4b27      	ldr	r3, [pc, #156]	; (8002188 <HAL_RCC_OscConfig+0x4fc>)
 80020ea:	2201      	movs	r2, #1
 80020ec:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80020ee:	f7ff faf3 	bl	80016d8 <HAL_GetTick>
 80020f2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80020f4:	e008      	b.n	8002108 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80020f6:	f7ff faef 	bl	80016d8 <HAL_GetTick>
 80020fa:	4602      	mov	r2, r0
 80020fc:	693b      	ldr	r3, [r7, #16]
 80020fe:	1ad3      	subs	r3, r2, r3
 8002100:	2b02      	cmp	r3, #2
 8002102:	d901      	bls.n	8002108 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002104:	2303      	movs	r3, #3
 8002106:	e037      	b.n	8002178 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002108:	4b1d      	ldr	r3, [pc, #116]	; (8002180 <HAL_RCC_OscConfig+0x4f4>)
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002110:	2b00      	cmp	r3, #0
 8002112:	d0f0      	beq.n	80020f6 <HAL_RCC_OscConfig+0x46a>
 8002114:	e02f      	b.n	8002176 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002116:	4b1c      	ldr	r3, [pc, #112]	; (8002188 <HAL_RCC_OscConfig+0x4fc>)
 8002118:	2200      	movs	r2, #0
 800211a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800211c:	f7ff fadc 	bl	80016d8 <HAL_GetTick>
 8002120:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002122:	e008      	b.n	8002136 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002124:	f7ff fad8 	bl	80016d8 <HAL_GetTick>
 8002128:	4602      	mov	r2, r0
 800212a:	693b      	ldr	r3, [r7, #16]
 800212c:	1ad3      	subs	r3, r2, r3
 800212e:	2b02      	cmp	r3, #2
 8002130:	d901      	bls.n	8002136 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8002132:	2303      	movs	r3, #3
 8002134:	e020      	b.n	8002178 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002136:	4b12      	ldr	r3, [pc, #72]	; (8002180 <HAL_RCC_OscConfig+0x4f4>)
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800213e:	2b00      	cmp	r3, #0
 8002140:	d1f0      	bne.n	8002124 <HAL_RCC_OscConfig+0x498>
 8002142:	e018      	b.n	8002176 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	69db      	ldr	r3, [r3, #28]
 8002148:	2b01      	cmp	r3, #1
 800214a:	d101      	bne.n	8002150 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 800214c:	2301      	movs	r3, #1
 800214e:	e013      	b.n	8002178 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002150:	4b0b      	ldr	r3, [pc, #44]	; (8002180 <HAL_RCC_OscConfig+0x4f4>)
 8002152:	685b      	ldr	r3, [r3, #4]
 8002154:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002156:	68fb      	ldr	r3, [r7, #12]
 8002158:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	6a1b      	ldr	r3, [r3, #32]
 8002160:	429a      	cmp	r2, r3
 8002162:	d106      	bne.n	8002172 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002164:	68fb      	ldr	r3, [r7, #12]
 8002166:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800216e:	429a      	cmp	r2, r3
 8002170:	d001      	beq.n	8002176 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8002172:	2301      	movs	r3, #1
 8002174:	e000      	b.n	8002178 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8002176:	2300      	movs	r3, #0
}
 8002178:	4618      	mov	r0, r3
 800217a:	3718      	adds	r7, #24
 800217c:	46bd      	mov	sp, r7
 800217e:	bd80      	pop	{r7, pc}
 8002180:	40021000 	.word	0x40021000
 8002184:	40007000 	.word	0x40007000
 8002188:	42420060 	.word	0x42420060

0800218c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800218c:	b580      	push	{r7, lr}
 800218e:	b084      	sub	sp, #16
 8002190:	af00      	add	r7, sp, #0
 8002192:	6078      	str	r0, [r7, #4]
 8002194:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	2b00      	cmp	r3, #0
 800219a:	d101      	bne.n	80021a0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800219c:	2301      	movs	r3, #1
 800219e:	e0d0      	b.n	8002342 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80021a0:	4b6a      	ldr	r3, [pc, #424]	; (800234c <HAL_RCC_ClockConfig+0x1c0>)
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	f003 0307 	and.w	r3, r3, #7
 80021a8:	683a      	ldr	r2, [r7, #0]
 80021aa:	429a      	cmp	r2, r3
 80021ac:	d910      	bls.n	80021d0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80021ae:	4b67      	ldr	r3, [pc, #412]	; (800234c <HAL_RCC_ClockConfig+0x1c0>)
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	f023 0207 	bic.w	r2, r3, #7
 80021b6:	4965      	ldr	r1, [pc, #404]	; (800234c <HAL_RCC_ClockConfig+0x1c0>)
 80021b8:	683b      	ldr	r3, [r7, #0]
 80021ba:	4313      	orrs	r3, r2
 80021bc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80021be:	4b63      	ldr	r3, [pc, #396]	; (800234c <HAL_RCC_ClockConfig+0x1c0>)
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	f003 0307 	and.w	r3, r3, #7
 80021c6:	683a      	ldr	r2, [r7, #0]
 80021c8:	429a      	cmp	r2, r3
 80021ca:	d001      	beq.n	80021d0 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80021cc:	2301      	movs	r3, #1
 80021ce:	e0b8      	b.n	8002342 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	f003 0302 	and.w	r3, r3, #2
 80021d8:	2b00      	cmp	r3, #0
 80021da:	d020      	beq.n	800221e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	f003 0304 	and.w	r3, r3, #4
 80021e4:	2b00      	cmp	r3, #0
 80021e6:	d005      	beq.n	80021f4 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80021e8:	4b59      	ldr	r3, [pc, #356]	; (8002350 <HAL_RCC_ClockConfig+0x1c4>)
 80021ea:	685b      	ldr	r3, [r3, #4]
 80021ec:	4a58      	ldr	r2, [pc, #352]	; (8002350 <HAL_RCC_ClockConfig+0x1c4>)
 80021ee:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80021f2:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	f003 0308 	and.w	r3, r3, #8
 80021fc:	2b00      	cmp	r3, #0
 80021fe:	d005      	beq.n	800220c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002200:	4b53      	ldr	r3, [pc, #332]	; (8002350 <HAL_RCC_ClockConfig+0x1c4>)
 8002202:	685b      	ldr	r3, [r3, #4]
 8002204:	4a52      	ldr	r2, [pc, #328]	; (8002350 <HAL_RCC_ClockConfig+0x1c4>)
 8002206:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800220a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800220c:	4b50      	ldr	r3, [pc, #320]	; (8002350 <HAL_RCC_ClockConfig+0x1c4>)
 800220e:	685b      	ldr	r3, [r3, #4]
 8002210:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	689b      	ldr	r3, [r3, #8]
 8002218:	494d      	ldr	r1, [pc, #308]	; (8002350 <HAL_RCC_ClockConfig+0x1c4>)
 800221a:	4313      	orrs	r3, r2
 800221c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	f003 0301 	and.w	r3, r3, #1
 8002226:	2b00      	cmp	r3, #0
 8002228:	d040      	beq.n	80022ac <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	685b      	ldr	r3, [r3, #4]
 800222e:	2b01      	cmp	r3, #1
 8002230:	d107      	bne.n	8002242 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002232:	4b47      	ldr	r3, [pc, #284]	; (8002350 <HAL_RCC_ClockConfig+0x1c4>)
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800223a:	2b00      	cmp	r3, #0
 800223c:	d115      	bne.n	800226a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800223e:	2301      	movs	r3, #1
 8002240:	e07f      	b.n	8002342 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	685b      	ldr	r3, [r3, #4]
 8002246:	2b02      	cmp	r3, #2
 8002248:	d107      	bne.n	800225a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800224a:	4b41      	ldr	r3, [pc, #260]	; (8002350 <HAL_RCC_ClockConfig+0x1c4>)
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002252:	2b00      	cmp	r3, #0
 8002254:	d109      	bne.n	800226a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002256:	2301      	movs	r3, #1
 8002258:	e073      	b.n	8002342 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800225a:	4b3d      	ldr	r3, [pc, #244]	; (8002350 <HAL_RCC_ClockConfig+0x1c4>)
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	f003 0302 	and.w	r3, r3, #2
 8002262:	2b00      	cmp	r3, #0
 8002264:	d101      	bne.n	800226a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002266:	2301      	movs	r3, #1
 8002268:	e06b      	b.n	8002342 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800226a:	4b39      	ldr	r3, [pc, #228]	; (8002350 <HAL_RCC_ClockConfig+0x1c4>)
 800226c:	685b      	ldr	r3, [r3, #4]
 800226e:	f023 0203 	bic.w	r2, r3, #3
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	685b      	ldr	r3, [r3, #4]
 8002276:	4936      	ldr	r1, [pc, #216]	; (8002350 <HAL_RCC_ClockConfig+0x1c4>)
 8002278:	4313      	orrs	r3, r2
 800227a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800227c:	f7ff fa2c 	bl	80016d8 <HAL_GetTick>
 8002280:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002282:	e00a      	b.n	800229a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002284:	f7ff fa28 	bl	80016d8 <HAL_GetTick>
 8002288:	4602      	mov	r2, r0
 800228a:	68fb      	ldr	r3, [r7, #12]
 800228c:	1ad3      	subs	r3, r2, r3
 800228e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002292:	4293      	cmp	r3, r2
 8002294:	d901      	bls.n	800229a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002296:	2303      	movs	r3, #3
 8002298:	e053      	b.n	8002342 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800229a:	4b2d      	ldr	r3, [pc, #180]	; (8002350 <HAL_RCC_ClockConfig+0x1c4>)
 800229c:	685b      	ldr	r3, [r3, #4]
 800229e:	f003 020c 	and.w	r2, r3, #12
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	685b      	ldr	r3, [r3, #4]
 80022a6:	009b      	lsls	r3, r3, #2
 80022a8:	429a      	cmp	r2, r3
 80022aa:	d1eb      	bne.n	8002284 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80022ac:	4b27      	ldr	r3, [pc, #156]	; (800234c <HAL_RCC_ClockConfig+0x1c0>)
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	f003 0307 	and.w	r3, r3, #7
 80022b4:	683a      	ldr	r2, [r7, #0]
 80022b6:	429a      	cmp	r2, r3
 80022b8:	d210      	bcs.n	80022dc <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80022ba:	4b24      	ldr	r3, [pc, #144]	; (800234c <HAL_RCC_ClockConfig+0x1c0>)
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	f023 0207 	bic.w	r2, r3, #7
 80022c2:	4922      	ldr	r1, [pc, #136]	; (800234c <HAL_RCC_ClockConfig+0x1c0>)
 80022c4:	683b      	ldr	r3, [r7, #0]
 80022c6:	4313      	orrs	r3, r2
 80022c8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80022ca:	4b20      	ldr	r3, [pc, #128]	; (800234c <HAL_RCC_ClockConfig+0x1c0>)
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	f003 0307 	and.w	r3, r3, #7
 80022d2:	683a      	ldr	r2, [r7, #0]
 80022d4:	429a      	cmp	r2, r3
 80022d6:	d001      	beq.n	80022dc <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80022d8:	2301      	movs	r3, #1
 80022da:	e032      	b.n	8002342 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	f003 0304 	and.w	r3, r3, #4
 80022e4:	2b00      	cmp	r3, #0
 80022e6:	d008      	beq.n	80022fa <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80022e8:	4b19      	ldr	r3, [pc, #100]	; (8002350 <HAL_RCC_ClockConfig+0x1c4>)
 80022ea:	685b      	ldr	r3, [r3, #4]
 80022ec:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	68db      	ldr	r3, [r3, #12]
 80022f4:	4916      	ldr	r1, [pc, #88]	; (8002350 <HAL_RCC_ClockConfig+0x1c4>)
 80022f6:	4313      	orrs	r3, r2
 80022f8:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	f003 0308 	and.w	r3, r3, #8
 8002302:	2b00      	cmp	r3, #0
 8002304:	d009      	beq.n	800231a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002306:	4b12      	ldr	r3, [pc, #72]	; (8002350 <HAL_RCC_ClockConfig+0x1c4>)
 8002308:	685b      	ldr	r3, [r3, #4]
 800230a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	691b      	ldr	r3, [r3, #16]
 8002312:	00db      	lsls	r3, r3, #3
 8002314:	490e      	ldr	r1, [pc, #56]	; (8002350 <HAL_RCC_ClockConfig+0x1c4>)
 8002316:	4313      	orrs	r3, r2
 8002318:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800231a:	f000 f821 	bl	8002360 <HAL_RCC_GetSysClockFreq>
 800231e:	4602      	mov	r2, r0
 8002320:	4b0b      	ldr	r3, [pc, #44]	; (8002350 <HAL_RCC_ClockConfig+0x1c4>)
 8002322:	685b      	ldr	r3, [r3, #4]
 8002324:	091b      	lsrs	r3, r3, #4
 8002326:	f003 030f 	and.w	r3, r3, #15
 800232a:	490a      	ldr	r1, [pc, #40]	; (8002354 <HAL_RCC_ClockConfig+0x1c8>)
 800232c:	5ccb      	ldrb	r3, [r1, r3]
 800232e:	fa22 f303 	lsr.w	r3, r2, r3
 8002332:	4a09      	ldr	r2, [pc, #36]	; (8002358 <HAL_RCC_ClockConfig+0x1cc>)
 8002334:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002336:	4b09      	ldr	r3, [pc, #36]	; (800235c <HAL_RCC_ClockConfig+0x1d0>)
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	4618      	mov	r0, r3
 800233c:	f7ff f98a 	bl	8001654 <HAL_InitTick>

  return HAL_OK;
 8002340:	2300      	movs	r3, #0
}
 8002342:	4618      	mov	r0, r3
 8002344:	3710      	adds	r7, #16
 8002346:	46bd      	mov	sp, r7
 8002348:	bd80      	pop	{r7, pc}
 800234a:	bf00      	nop
 800234c:	40022000 	.word	0x40022000
 8002350:	40021000 	.word	0x40021000
 8002354:	08002cb0 	.word	0x08002cb0
 8002358:	20000040 	.word	0x20000040
 800235c:	20000044 	.word	0x20000044

08002360 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002360:	b490      	push	{r4, r7}
 8002362:	b08a      	sub	sp, #40	; 0x28
 8002364:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8002366:	4b2a      	ldr	r3, [pc, #168]	; (8002410 <HAL_RCC_GetSysClockFreq+0xb0>)
 8002368:	1d3c      	adds	r4, r7, #4
 800236a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800236c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8002370:	f240 2301 	movw	r3, #513	; 0x201
 8002374:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002376:	2300      	movs	r3, #0
 8002378:	61fb      	str	r3, [r7, #28]
 800237a:	2300      	movs	r3, #0
 800237c:	61bb      	str	r3, [r7, #24]
 800237e:	2300      	movs	r3, #0
 8002380:	627b      	str	r3, [r7, #36]	; 0x24
 8002382:	2300      	movs	r3, #0
 8002384:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8002386:	2300      	movs	r3, #0
 8002388:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800238a:	4b22      	ldr	r3, [pc, #136]	; (8002414 <HAL_RCC_GetSysClockFreq+0xb4>)
 800238c:	685b      	ldr	r3, [r3, #4]
 800238e:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002390:	69fb      	ldr	r3, [r7, #28]
 8002392:	f003 030c 	and.w	r3, r3, #12
 8002396:	2b04      	cmp	r3, #4
 8002398:	d002      	beq.n	80023a0 <HAL_RCC_GetSysClockFreq+0x40>
 800239a:	2b08      	cmp	r3, #8
 800239c:	d003      	beq.n	80023a6 <HAL_RCC_GetSysClockFreq+0x46>
 800239e:	e02d      	b.n	80023fc <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80023a0:	4b1d      	ldr	r3, [pc, #116]	; (8002418 <HAL_RCC_GetSysClockFreq+0xb8>)
 80023a2:	623b      	str	r3, [r7, #32]
      break;
 80023a4:	e02d      	b.n	8002402 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80023a6:	69fb      	ldr	r3, [r7, #28]
 80023a8:	0c9b      	lsrs	r3, r3, #18
 80023aa:	f003 030f 	and.w	r3, r3, #15
 80023ae:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80023b2:	4413      	add	r3, r2
 80023b4:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 80023b8:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80023ba:	69fb      	ldr	r3, [r7, #28]
 80023bc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80023c0:	2b00      	cmp	r3, #0
 80023c2:	d013      	beq.n	80023ec <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80023c4:	4b13      	ldr	r3, [pc, #76]	; (8002414 <HAL_RCC_GetSysClockFreq+0xb4>)
 80023c6:	685b      	ldr	r3, [r3, #4]
 80023c8:	0c5b      	lsrs	r3, r3, #17
 80023ca:	f003 0301 	and.w	r3, r3, #1
 80023ce:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80023d2:	4413      	add	r3, r2
 80023d4:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 80023d8:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80023da:	697b      	ldr	r3, [r7, #20]
 80023dc:	4a0e      	ldr	r2, [pc, #56]	; (8002418 <HAL_RCC_GetSysClockFreq+0xb8>)
 80023de:	fb02 f203 	mul.w	r2, r2, r3
 80023e2:	69bb      	ldr	r3, [r7, #24]
 80023e4:	fbb2 f3f3 	udiv	r3, r2, r3
 80023e8:	627b      	str	r3, [r7, #36]	; 0x24
 80023ea:	e004      	b.n	80023f6 <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80023ec:	697b      	ldr	r3, [r7, #20]
 80023ee:	4a0b      	ldr	r2, [pc, #44]	; (800241c <HAL_RCC_GetSysClockFreq+0xbc>)
 80023f0:	fb02 f303 	mul.w	r3, r2, r3
 80023f4:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 80023f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023f8:	623b      	str	r3, [r7, #32]
      break;
 80023fa:	e002      	b.n	8002402 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80023fc:	4b06      	ldr	r3, [pc, #24]	; (8002418 <HAL_RCC_GetSysClockFreq+0xb8>)
 80023fe:	623b      	str	r3, [r7, #32]
      break;
 8002400:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002402:	6a3b      	ldr	r3, [r7, #32]
}
 8002404:	4618      	mov	r0, r3
 8002406:	3728      	adds	r7, #40	; 0x28
 8002408:	46bd      	mov	sp, r7
 800240a:	bc90      	pop	{r4, r7}
 800240c:	4770      	bx	lr
 800240e:	bf00      	nop
 8002410:	08002c94 	.word	0x08002c94
 8002414:	40021000 	.word	0x40021000
 8002418:	007a1200 	.word	0x007a1200
 800241c:	003d0900 	.word	0x003d0900

08002420 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002420:	b480      	push	{r7}
 8002422:	b085      	sub	sp, #20
 8002424:	af00      	add	r7, sp, #0
 8002426:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002428:	4b0a      	ldr	r3, [pc, #40]	; (8002454 <RCC_Delay+0x34>)
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	4a0a      	ldr	r2, [pc, #40]	; (8002458 <RCC_Delay+0x38>)
 800242e:	fba2 2303 	umull	r2, r3, r2, r3
 8002432:	0a5b      	lsrs	r3, r3, #9
 8002434:	687a      	ldr	r2, [r7, #4]
 8002436:	fb02 f303 	mul.w	r3, r2, r3
 800243a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 800243c:	bf00      	nop
  }
  while (Delay --);
 800243e:	68fb      	ldr	r3, [r7, #12]
 8002440:	1e5a      	subs	r2, r3, #1
 8002442:	60fa      	str	r2, [r7, #12]
 8002444:	2b00      	cmp	r3, #0
 8002446:	d1f9      	bne.n	800243c <RCC_Delay+0x1c>
}
 8002448:	bf00      	nop
 800244a:	bf00      	nop
 800244c:	3714      	adds	r7, #20
 800244e:	46bd      	mov	sp, r7
 8002450:	bc80      	pop	{r7}
 8002452:	4770      	bx	lr
 8002454:	20000040 	.word	0x20000040
 8002458:	10624dd3 	.word	0x10624dd3

0800245c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800245c:	b580      	push	{r7, lr}
 800245e:	b082      	sub	sp, #8
 8002460:	af00      	add	r7, sp, #0
 8002462:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	2b00      	cmp	r3, #0
 8002468:	d101      	bne.n	800246e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800246a:	2301      	movs	r3, #1
 800246c:	e041      	b.n	80024f2 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002474:	b2db      	uxtb	r3, r3
 8002476:	2b00      	cmp	r3, #0
 8002478:	d106      	bne.n	8002488 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	2200      	movs	r2, #0
 800247e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002482:	6878      	ldr	r0, [r7, #4]
 8002484:	f7ff f84e 	bl	8001524 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	2202      	movs	r2, #2
 800248c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	681a      	ldr	r2, [r3, #0]
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	3304      	adds	r3, #4
 8002498:	4619      	mov	r1, r3
 800249a:	4610      	mov	r0, r2
 800249c:	f000 fa6a 	bl	8002974 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	2201      	movs	r2, #1
 80024a4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	2201      	movs	r2, #1
 80024ac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	2201      	movs	r2, #1
 80024b4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	2201      	movs	r2, #1
 80024bc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	2201      	movs	r2, #1
 80024c4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	2201      	movs	r2, #1
 80024cc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	2201      	movs	r2, #1
 80024d4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	2201      	movs	r2, #1
 80024dc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	2201      	movs	r2, #1
 80024e4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	2201      	movs	r2, #1
 80024ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80024f0:	2300      	movs	r3, #0
}
 80024f2:	4618      	mov	r0, r3
 80024f4:	3708      	adds	r7, #8
 80024f6:	46bd      	mov	sp, r7
 80024f8:	bd80      	pop	{r7, pc}
	...

080024fc <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80024fc:	b480      	push	{r7}
 80024fe:	b085      	sub	sp, #20
 8002500:	af00      	add	r7, sp, #0
 8002502:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800250a:	b2db      	uxtb	r3, r3
 800250c:	2b01      	cmp	r3, #1
 800250e:	d001      	beq.n	8002514 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002510:	2301      	movs	r3, #1
 8002512:	e035      	b.n	8002580 <HAL_TIM_Base_Start_IT+0x84>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	2202      	movs	r2, #2
 8002518:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	68da      	ldr	r2, [r3, #12]
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	f042 0201 	orr.w	r2, r2, #1
 800252a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	4a16      	ldr	r2, [pc, #88]	; (800258c <HAL_TIM_Base_Start_IT+0x90>)
 8002532:	4293      	cmp	r3, r2
 8002534:	d009      	beq.n	800254a <HAL_TIM_Base_Start_IT+0x4e>
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800253e:	d004      	beq.n	800254a <HAL_TIM_Base_Start_IT+0x4e>
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	4a12      	ldr	r2, [pc, #72]	; (8002590 <HAL_TIM_Base_Start_IT+0x94>)
 8002546:	4293      	cmp	r3, r2
 8002548:	d111      	bne.n	800256e <HAL_TIM_Base_Start_IT+0x72>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	689b      	ldr	r3, [r3, #8]
 8002550:	f003 0307 	and.w	r3, r3, #7
 8002554:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002556:	68fb      	ldr	r3, [r7, #12]
 8002558:	2b06      	cmp	r3, #6
 800255a:	d010      	beq.n	800257e <HAL_TIM_Base_Start_IT+0x82>
    {
      __HAL_TIM_ENABLE(htim);
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	681a      	ldr	r2, [r3, #0]
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	f042 0201 	orr.w	r2, r2, #1
 800256a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800256c:	e007      	b.n	800257e <HAL_TIM_Base_Start_IT+0x82>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	681a      	ldr	r2, [r3, #0]
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	f042 0201 	orr.w	r2, r2, #1
 800257c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800257e:	2300      	movs	r3, #0
}
 8002580:	4618      	mov	r0, r3
 8002582:	3714      	adds	r7, #20
 8002584:	46bd      	mov	sp, r7
 8002586:	bc80      	pop	{r7}
 8002588:	4770      	bx	lr
 800258a:	bf00      	nop
 800258c:	40012c00 	.word	0x40012c00
 8002590:	40000400 	.word	0x40000400

08002594 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002594:	b580      	push	{r7, lr}
 8002596:	b082      	sub	sp, #8
 8002598:	af00      	add	r7, sp, #0
 800259a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	691b      	ldr	r3, [r3, #16]
 80025a2:	f003 0302 	and.w	r3, r3, #2
 80025a6:	2b02      	cmp	r3, #2
 80025a8:	d122      	bne.n	80025f0 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	68db      	ldr	r3, [r3, #12]
 80025b0:	f003 0302 	and.w	r3, r3, #2
 80025b4:	2b02      	cmp	r3, #2
 80025b6:	d11b      	bne.n	80025f0 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	f06f 0202 	mvn.w	r2, #2
 80025c0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	2201      	movs	r2, #1
 80025c6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	699b      	ldr	r3, [r3, #24]
 80025ce:	f003 0303 	and.w	r3, r3, #3
 80025d2:	2b00      	cmp	r3, #0
 80025d4:	d003      	beq.n	80025de <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80025d6:	6878      	ldr	r0, [r7, #4]
 80025d8:	f000 f9b1 	bl	800293e <HAL_TIM_IC_CaptureCallback>
 80025dc:	e005      	b.n	80025ea <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80025de:	6878      	ldr	r0, [r7, #4]
 80025e0:	f000 f9a4 	bl	800292c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80025e4:	6878      	ldr	r0, [r7, #4]
 80025e6:	f000 f9b3 	bl	8002950 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	2200      	movs	r2, #0
 80025ee:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	691b      	ldr	r3, [r3, #16]
 80025f6:	f003 0304 	and.w	r3, r3, #4
 80025fa:	2b04      	cmp	r3, #4
 80025fc:	d122      	bne.n	8002644 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	68db      	ldr	r3, [r3, #12]
 8002604:	f003 0304 	and.w	r3, r3, #4
 8002608:	2b04      	cmp	r3, #4
 800260a:	d11b      	bne.n	8002644 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	f06f 0204 	mvn.w	r2, #4
 8002614:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	2202      	movs	r2, #2
 800261a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	699b      	ldr	r3, [r3, #24]
 8002622:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002626:	2b00      	cmp	r3, #0
 8002628:	d003      	beq.n	8002632 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800262a:	6878      	ldr	r0, [r7, #4]
 800262c:	f000 f987 	bl	800293e <HAL_TIM_IC_CaptureCallback>
 8002630:	e005      	b.n	800263e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002632:	6878      	ldr	r0, [r7, #4]
 8002634:	f000 f97a 	bl	800292c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002638:	6878      	ldr	r0, [r7, #4]
 800263a:	f000 f989 	bl	8002950 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	2200      	movs	r2, #0
 8002642:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	691b      	ldr	r3, [r3, #16]
 800264a:	f003 0308 	and.w	r3, r3, #8
 800264e:	2b08      	cmp	r3, #8
 8002650:	d122      	bne.n	8002698 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	68db      	ldr	r3, [r3, #12]
 8002658:	f003 0308 	and.w	r3, r3, #8
 800265c:	2b08      	cmp	r3, #8
 800265e:	d11b      	bne.n	8002698 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	f06f 0208 	mvn.w	r2, #8
 8002668:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	2204      	movs	r2, #4
 800266e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	69db      	ldr	r3, [r3, #28]
 8002676:	f003 0303 	and.w	r3, r3, #3
 800267a:	2b00      	cmp	r3, #0
 800267c:	d003      	beq.n	8002686 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800267e:	6878      	ldr	r0, [r7, #4]
 8002680:	f000 f95d 	bl	800293e <HAL_TIM_IC_CaptureCallback>
 8002684:	e005      	b.n	8002692 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002686:	6878      	ldr	r0, [r7, #4]
 8002688:	f000 f950 	bl	800292c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800268c:	6878      	ldr	r0, [r7, #4]
 800268e:	f000 f95f 	bl	8002950 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	2200      	movs	r2, #0
 8002696:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	691b      	ldr	r3, [r3, #16]
 800269e:	f003 0310 	and.w	r3, r3, #16
 80026a2:	2b10      	cmp	r3, #16
 80026a4:	d122      	bne.n	80026ec <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	68db      	ldr	r3, [r3, #12]
 80026ac:	f003 0310 	and.w	r3, r3, #16
 80026b0:	2b10      	cmp	r3, #16
 80026b2:	d11b      	bne.n	80026ec <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	f06f 0210 	mvn.w	r2, #16
 80026bc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	2208      	movs	r2, #8
 80026c2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	69db      	ldr	r3, [r3, #28]
 80026ca:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80026ce:	2b00      	cmp	r3, #0
 80026d0:	d003      	beq.n	80026da <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80026d2:	6878      	ldr	r0, [r7, #4]
 80026d4:	f000 f933 	bl	800293e <HAL_TIM_IC_CaptureCallback>
 80026d8:	e005      	b.n	80026e6 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80026da:	6878      	ldr	r0, [r7, #4]
 80026dc:	f000 f926 	bl	800292c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80026e0:	6878      	ldr	r0, [r7, #4]
 80026e2:	f000 f935 	bl	8002950 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	2200      	movs	r2, #0
 80026ea:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	691b      	ldr	r3, [r3, #16]
 80026f2:	f003 0301 	and.w	r3, r3, #1
 80026f6:	2b01      	cmp	r3, #1
 80026f8:	d10e      	bne.n	8002718 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	68db      	ldr	r3, [r3, #12]
 8002700:	f003 0301 	and.w	r3, r3, #1
 8002704:	2b01      	cmp	r3, #1
 8002706:	d107      	bne.n	8002718 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	f06f 0201 	mvn.w	r2, #1
 8002710:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002712:	6878      	ldr	r0, [r7, #4]
 8002714:	f7fe fd54 	bl	80011c0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	691b      	ldr	r3, [r3, #16]
 800271e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002722:	2b80      	cmp	r3, #128	; 0x80
 8002724:	d10e      	bne.n	8002744 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	68db      	ldr	r3, [r3, #12]
 800272c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002730:	2b80      	cmp	r3, #128	; 0x80
 8002732:	d107      	bne.n	8002744 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800273c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800273e:	6878      	ldr	r0, [r7, #4]
 8002740:	f000 fa67 	bl	8002c12 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	691b      	ldr	r3, [r3, #16]
 800274a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800274e:	2b40      	cmp	r3, #64	; 0x40
 8002750:	d10e      	bne.n	8002770 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	68db      	ldr	r3, [r3, #12]
 8002758:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800275c:	2b40      	cmp	r3, #64	; 0x40
 800275e:	d107      	bne.n	8002770 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002768:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800276a:	6878      	ldr	r0, [r7, #4]
 800276c:	f000 f8f9 	bl	8002962 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	691b      	ldr	r3, [r3, #16]
 8002776:	f003 0320 	and.w	r3, r3, #32
 800277a:	2b20      	cmp	r3, #32
 800277c:	d10e      	bne.n	800279c <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	68db      	ldr	r3, [r3, #12]
 8002784:	f003 0320 	and.w	r3, r3, #32
 8002788:	2b20      	cmp	r3, #32
 800278a:	d107      	bne.n	800279c <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	f06f 0220 	mvn.w	r2, #32
 8002794:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002796:	6878      	ldr	r0, [r7, #4]
 8002798:	f000 fa32 	bl	8002c00 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800279c:	bf00      	nop
 800279e:	3708      	adds	r7, #8
 80027a0:	46bd      	mov	sp, r7
 80027a2:	bd80      	pop	{r7, pc}

080027a4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80027a4:	b580      	push	{r7, lr}
 80027a6:	b084      	sub	sp, #16
 80027a8:	af00      	add	r7, sp, #0
 80027aa:	6078      	str	r0, [r7, #4]
 80027ac:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80027b4:	2b01      	cmp	r3, #1
 80027b6:	d101      	bne.n	80027bc <HAL_TIM_ConfigClockSource+0x18>
 80027b8:	2302      	movs	r3, #2
 80027ba:	e0b3      	b.n	8002924 <HAL_TIM_ConfigClockSource+0x180>
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	2201      	movs	r2, #1
 80027c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	2202      	movs	r2, #2
 80027c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	689b      	ldr	r3, [r3, #8]
 80027d2:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80027d4:	68fb      	ldr	r3, [r7, #12]
 80027d6:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80027da:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80027dc:	68fb      	ldr	r3, [r7, #12]
 80027de:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80027e2:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	68fa      	ldr	r2, [r7, #12]
 80027ea:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80027ec:	683b      	ldr	r3, [r7, #0]
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80027f4:	d03e      	beq.n	8002874 <HAL_TIM_ConfigClockSource+0xd0>
 80027f6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80027fa:	f200 8087 	bhi.w	800290c <HAL_TIM_ConfigClockSource+0x168>
 80027fe:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002802:	f000 8085 	beq.w	8002910 <HAL_TIM_ConfigClockSource+0x16c>
 8002806:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800280a:	d87f      	bhi.n	800290c <HAL_TIM_ConfigClockSource+0x168>
 800280c:	2b70      	cmp	r3, #112	; 0x70
 800280e:	d01a      	beq.n	8002846 <HAL_TIM_ConfigClockSource+0xa2>
 8002810:	2b70      	cmp	r3, #112	; 0x70
 8002812:	d87b      	bhi.n	800290c <HAL_TIM_ConfigClockSource+0x168>
 8002814:	2b60      	cmp	r3, #96	; 0x60
 8002816:	d050      	beq.n	80028ba <HAL_TIM_ConfigClockSource+0x116>
 8002818:	2b60      	cmp	r3, #96	; 0x60
 800281a:	d877      	bhi.n	800290c <HAL_TIM_ConfigClockSource+0x168>
 800281c:	2b50      	cmp	r3, #80	; 0x50
 800281e:	d03c      	beq.n	800289a <HAL_TIM_ConfigClockSource+0xf6>
 8002820:	2b50      	cmp	r3, #80	; 0x50
 8002822:	d873      	bhi.n	800290c <HAL_TIM_ConfigClockSource+0x168>
 8002824:	2b40      	cmp	r3, #64	; 0x40
 8002826:	d058      	beq.n	80028da <HAL_TIM_ConfigClockSource+0x136>
 8002828:	2b40      	cmp	r3, #64	; 0x40
 800282a:	d86f      	bhi.n	800290c <HAL_TIM_ConfigClockSource+0x168>
 800282c:	2b30      	cmp	r3, #48	; 0x30
 800282e:	d064      	beq.n	80028fa <HAL_TIM_ConfigClockSource+0x156>
 8002830:	2b30      	cmp	r3, #48	; 0x30
 8002832:	d86b      	bhi.n	800290c <HAL_TIM_ConfigClockSource+0x168>
 8002834:	2b20      	cmp	r3, #32
 8002836:	d060      	beq.n	80028fa <HAL_TIM_ConfigClockSource+0x156>
 8002838:	2b20      	cmp	r3, #32
 800283a:	d867      	bhi.n	800290c <HAL_TIM_ConfigClockSource+0x168>
 800283c:	2b00      	cmp	r3, #0
 800283e:	d05c      	beq.n	80028fa <HAL_TIM_ConfigClockSource+0x156>
 8002840:	2b10      	cmp	r3, #16
 8002842:	d05a      	beq.n	80028fa <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8002844:	e062      	b.n	800290c <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	6818      	ldr	r0, [r3, #0]
 800284a:	683b      	ldr	r3, [r7, #0]
 800284c:	6899      	ldr	r1, [r3, #8]
 800284e:	683b      	ldr	r3, [r7, #0]
 8002850:	685a      	ldr	r2, [r3, #4]
 8002852:	683b      	ldr	r3, [r7, #0]
 8002854:	68db      	ldr	r3, [r3, #12]
 8002856:	f000 f95c 	bl	8002b12 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	689b      	ldr	r3, [r3, #8]
 8002860:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002862:	68fb      	ldr	r3, [r7, #12]
 8002864:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8002868:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	68fa      	ldr	r2, [r7, #12]
 8002870:	609a      	str	r2, [r3, #8]
      break;
 8002872:	e04e      	b.n	8002912 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	6818      	ldr	r0, [r3, #0]
 8002878:	683b      	ldr	r3, [r7, #0]
 800287a:	6899      	ldr	r1, [r3, #8]
 800287c:	683b      	ldr	r3, [r7, #0]
 800287e:	685a      	ldr	r2, [r3, #4]
 8002880:	683b      	ldr	r3, [r7, #0]
 8002882:	68db      	ldr	r3, [r3, #12]
 8002884:	f000 f945 	bl	8002b12 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	689a      	ldr	r2, [r3, #8]
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002896:	609a      	str	r2, [r3, #8]
      break;
 8002898:	e03b      	b.n	8002912 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	6818      	ldr	r0, [r3, #0]
 800289e:	683b      	ldr	r3, [r7, #0]
 80028a0:	6859      	ldr	r1, [r3, #4]
 80028a2:	683b      	ldr	r3, [r7, #0]
 80028a4:	68db      	ldr	r3, [r3, #12]
 80028a6:	461a      	mov	r2, r3
 80028a8:	f000 f8bc 	bl	8002a24 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	2150      	movs	r1, #80	; 0x50
 80028b2:	4618      	mov	r0, r3
 80028b4:	f000 f913 	bl	8002ade <TIM_ITRx_SetConfig>
      break;
 80028b8:	e02b      	b.n	8002912 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	6818      	ldr	r0, [r3, #0]
 80028be:	683b      	ldr	r3, [r7, #0]
 80028c0:	6859      	ldr	r1, [r3, #4]
 80028c2:	683b      	ldr	r3, [r7, #0]
 80028c4:	68db      	ldr	r3, [r3, #12]
 80028c6:	461a      	mov	r2, r3
 80028c8:	f000 f8da 	bl	8002a80 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	2160      	movs	r1, #96	; 0x60
 80028d2:	4618      	mov	r0, r3
 80028d4:	f000 f903 	bl	8002ade <TIM_ITRx_SetConfig>
      break;
 80028d8:	e01b      	b.n	8002912 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	6818      	ldr	r0, [r3, #0]
 80028de:	683b      	ldr	r3, [r7, #0]
 80028e0:	6859      	ldr	r1, [r3, #4]
 80028e2:	683b      	ldr	r3, [r7, #0]
 80028e4:	68db      	ldr	r3, [r3, #12]
 80028e6:	461a      	mov	r2, r3
 80028e8:	f000 f89c 	bl	8002a24 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	2140      	movs	r1, #64	; 0x40
 80028f2:	4618      	mov	r0, r3
 80028f4:	f000 f8f3 	bl	8002ade <TIM_ITRx_SetConfig>
      break;
 80028f8:	e00b      	b.n	8002912 <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	681a      	ldr	r2, [r3, #0]
 80028fe:	683b      	ldr	r3, [r7, #0]
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	4619      	mov	r1, r3
 8002904:	4610      	mov	r0, r2
 8002906:	f000 f8ea 	bl	8002ade <TIM_ITRx_SetConfig>
        break;
 800290a:	e002      	b.n	8002912 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 800290c:	bf00      	nop
 800290e:	e000      	b.n	8002912 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8002910:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	2201      	movs	r2, #1
 8002916:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	2200      	movs	r2, #0
 800291e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002922:	2300      	movs	r3, #0
}
 8002924:	4618      	mov	r0, r3
 8002926:	3710      	adds	r7, #16
 8002928:	46bd      	mov	sp, r7
 800292a:	bd80      	pop	{r7, pc}

0800292c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800292c:	b480      	push	{r7}
 800292e:	b083      	sub	sp, #12
 8002930:	af00      	add	r7, sp, #0
 8002932:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002934:	bf00      	nop
 8002936:	370c      	adds	r7, #12
 8002938:	46bd      	mov	sp, r7
 800293a:	bc80      	pop	{r7}
 800293c:	4770      	bx	lr

0800293e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800293e:	b480      	push	{r7}
 8002940:	b083      	sub	sp, #12
 8002942:	af00      	add	r7, sp, #0
 8002944:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002946:	bf00      	nop
 8002948:	370c      	adds	r7, #12
 800294a:	46bd      	mov	sp, r7
 800294c:	bc80      	pop	{r7}
 800294e:	4770      	bx	lr

08002950 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002950:	b480      	push	{r7}
 8002952:	b083      	sub	sp, #12
 8002954:	af00      	add	r7, sp, #0
 8002956:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002958:	bf00      	nop
 800295a:	370c      	adds	r7, #12
 800295c:	46bd      	mov	sp, r7
 800295e:	bc80      	pop	{r7}
 8002960:	4770      	bx	lr

08002962 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002962:	b480      	push	{r7}
 8002964:	b083      	sub	sp, #12
 8002966:	af00      	add	r7, sp, #0
 8002968:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800296a:	bf00      	nop
 800296c:	370c      	adds	r7, #12
 800296e:	46bd      	mov	sp, r7
 8002970:	bc80      	pop	{r7}
 8002972:	4770      	bx	lr

08002974 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002974:	b480      	push	{r7}
 8002976:	b085      	sub	sp, #20
 8002978:	af00      	add	r7, sp, #0
 800297a:	6078      	str	r0, [r7, #4]
 800297c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	4a25      	ldr	r2, [pc, #148]	; (8002a1c <TIM_Base_SetConfig+0xa8>)
 8002988:	4293      	cmp	r3, r2
 800298a:	d007      	beq.n	800299c <TIM_Base_SetConfig+0x28>
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002992:	d003      	beq.n	800299c <TIM_Base_SetConfig+0x28>
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	4a22      	ldr	r2, [pc, #136]	; (8002a20 <TIM_Base_SetConfig+0xac>)
 8002998:	4293      	cmp	r3, r2
 800299a:	d108      	bne.n	80029ae <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800299c:	68fb      	ldr	r3, [r7, #12]
 800299e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80029a2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80029a4:	683b      	ldr	r3, [r7, #0]
 80029a6:	685b      	ldr	r3, [r3, #4]
 80029a8:	68fa      	ldr	r2, [r7, #12]
 80029aa:	4313      	orrs	r3, r2
 80029ac:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	4a1a      	ldr	r2, [pc, #104]	; (8002a1c <TIM_Base_SetConfig+0xa8>)
 80029b2:	4293      	cmp	r3, r2
 80029b4:	d007      	beq.n	80029c6 <TIM_Base_SetConfig+0x52>
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80029bc:	d003      	beq.n	80029c6 <TIM_Base_SetConfig+0x52>
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	4a17      	ldr	r2, [pc, #92]	; (8002a20 <TIM_Base_SetConfig+0xac>)
 80029c2:	4293      	cmp	r3, r2
 80029c4:	d108      	bne.n	80029d8 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80029c6:	68fb      	ldr	r3, [r7, #12]
 80029c8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80029cc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80029ce:	683b      	ldr	r3, [r7, #0]
 80029d0:	68db      	ldr	r3, [r3, #12]
 80029d2:	68fa      	ldr	r2, [r7, #12]
 80029d4:	4313      	orrs	r3, r2
 80029d6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80029d8:	68fb      	ldr	r3, [r7, #12]
 80029da:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80029de:	683b      	ldr	r3, [r7, #0]
 80029e0:	695b      	ldr	r3, [r3, #20]
 80029e2:	4313      	orrs	r3, r2
 80029e4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	68fa      	ldr	r2, [r7, #12]
 80029ea:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80029ec:	683b      	ldr	r3, [r7, #0]
 80029ee:	689a      	ldr	r2, [r3, #8]
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80029f4:	683b      	ldr	r3, [r7, #0]
 80029f6:	681a      	ldr	r2, [r3, #0]
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	4a07      	ldr	r2, [pc, #28]	; (8002a1c <TIM_Base_SetConfig+0xa8>)
 8002a00:	4293      	cmp	r3, r2
 8002a02:	d103      	bne.n	8002a0c <TIM_Base_SetConfig+0x98>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002a04:	683b      	ldr	r3, [r7, #0]
 8002a06:	691a      	ldr	r2, [r3, #16]
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	2201      	movs	r2, #1
 8002a10:	615a      	str	r2, [r3, #20]
}
 8002a12:	bf00      	nop
 8002a14:	3714      	adds	r7, #20
 8002a16:	46bd      	mov	sp, r7
 8002a18:	bc80      	pop	{r7}
 8002a1a:	4770      	bx	lr
 8002a1c:	40012c00 	.word	0x40012c00
 8002a20:	40000400 	.word	0x40000400

08002a24 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002a24:	b480      	push	{r7}
 8002a26:	b087      	sub	sp, #28
 8002a28:	af00      	add	r7, sp, #0
 8002a2a:	60f8      	str	r0, [r7, #12]
 8002a2c:	60b9      	str	r1, [r7, #8]
 8002a2e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002a30:	68fb      	ldr	r3, [r7, #12]
 8002a32:	6a1b      	ldr	r3, [r3, #32]
 8002a34:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002a36:	68fb      	ldr	r3, [r7, #12]
 8002a38:	6a1b      	ldr	r3, [r3, #32]
 8002a3a:	f023 0201 	bic.w	r2, r3, #1
 8002a3e:	68fb      	ldr	r3, [r7, #12]
 8002a40:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002a42:	68fb      	ldr	r3, [r7, #12]
 8002a44:	699b      	ldr	r3, [r3, #24]
 8002a46:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002a48:	693b      	ldr	r3, [r7, #16]
 8002a4a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002a4e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	011b      	lsls	r3, r3, #4
 8002a54:	693a      	ldr	r2, [r7, #16]
 8002a56:	4313      	orrs	r3, r2
 8002a58:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002a5a:	697b      	ldr	r3, [r7, #20]
 8002a5c:	f023 030a 	bic.w	r3, r3, #10
 8002a60:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002a62:	697a      	ldr	r2, [r7, #20]
 8002a64:	68bb      	ldr	r3, [r7, #8]
 8002a66:	4313      	orrs	r3, r2
 8002a68:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002a6a:	68fb      	ldr	r3, [r7, #12]
 8002a6c:	693a      	ldr	r2, [r7, #16]
 8002a6e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002a70:	68fb      	ldr	r3, [r7, #12]
 8002a72:	697a      	ldr	r2, [r7, #20]
 8002a74:	621a      	str	r2, [r3, #32]
}
 8002a76:	bf00      	nop
 8002a78:	371c      	adds	r7, #28
 8002a7a:	46bd      	mov	sp, r7
 8002a7c:	bc80      	pop	{r7}
 8002a7e:	4770      	bx	lr

08002a80 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002a80:	b480      	push	{r7}
 8002a82:	b087      	sub	sp, #28
 8002a84:	af00      	add	r7, sp, #0
 8002a86:	60f8      	str	r0, [r7, #12]
 8002a88:	60b9      	str	r1, [r7, #8]
 8002a8a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002a8c:	68fb      	ldr	r3, [r7, #12]
 8002a8e:	6a1b      	ldr	r3, [r3, #32]
 8002a90:	f023 0210 	bic.w	r2, r3, #16
 8002a94:	68fb      	ldr	r3, [r7, #12]
 8002a96:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002a98:	68fb      	ldr	r3, [r7, #12]
 8002a9a:	699b      	ldr	r3, [r3, #24]
 8002a9c:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8002a9e:	68fb      	ldr	r3, [r7, #12]
 8002aa0:	6a1b      	ldr	r3, [r3, #32]
 8002aa2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002aa4:	697b      	ldr	r3, [r7, #20]
 8002aa6:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002aaa:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	031b      	lsls	r3, r3, #12
 8002ab0:	697a      	ldr	r2, [r7, #20]
 8002ab2:	4313      	orrs	r3, r2
 8002ab4:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002ab6:	693b      	ldr	r3, [r7, #16]
 8002ab8:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8002abc:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002abe:	68bb      	ldr	r3, [r7, #8]
 8002ac0:	011b      	lsls	r3, r3, #4
 8002ac2:	693a      	ldr	r2, [r7, #16]
 8002ac4:	4313      	orrs	r3, r2
 8002ac6:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002ac8:	68fb      	ldr	r3, [r7, #12]
 8002aca:	697a      	ldr	r2, [r7, #20]
 8002acc:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002ace:	68fb      	ldr	r3, [r7, #12]
 8002ad0:	693a      	ldr	r2, [r7, #16]
 8002ad2:	621a      	str	r2, [r3, #32]
}
 8002ad4:	bf00      	nop
 8002ad6:	371c      	adds	r7, #28
 8002ad8:	46bd      	mov	sp, r7
 8002ada:	bc80      	pop	{r7}
 8002adc:	4770      	bx	lr

08002ade <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002ade:	b480      	push	{r7}
 8002ae0:	b085      	sub	sp, #20
 8002ae2:	af00      	add	r7, sp, #0
 8002ae4:	6078      	str	r0, [r7, #4]
 8002ae6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	689b      	ldr	r3, [r3, #8]
 8002aec:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002aee:	68fb      	ldr	r3, [r7, #12]
 8002af0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002af4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002af6:	683a      	ldr	r2, [r7, #0]
 8002af8:	68fb      	ldr	r3, [r7, #12]
 8002afa:	4313      	orrs	r3, r2
 8002afc:	f043 0307 	orr.w	r3, r3, #7
 8002b00:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	68fa      	ldr	r2, [r7, #12]
 8002b06:	609a      	str	r2, [r3, #8]
}
 8002b08:	bf00      	nop
 8002b0a:	3714      	adds	r7, #20
 8002b0c:	46bd      	mov	sp, r7
 8002b0e:	bc80      	pop	{r7}
 8002b10:	4770      	bx	lr

08002b12 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002b12:	b480      	push	{r7}
 8002b14:	b087      	sub	sp, #28
 8002b16:	af00      	add	r7, sp, #0
 8002b18:	60f8      	str	r0, [r7, #12]
 8002b1a:	60b9      	str	r1, [r7, #8]
 8002b1c:	607a      	str	r2, [r7, #4]
 8002b1e:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002b20:	68fb      	ldr	r3, [r7, #12]
 8002b22:	689b      	ldr	r3, [r3, #8]
 8002b24:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002b26:	697b      	ldr	r3, [r7, #20]
 8002b28:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002b2c:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002b2e:	683b      	ldr	r3, [r7, #0]
 8002b30:	021a      	lsls	r2, r3, #8
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	431a      	orrs	r2, r3
 8002b36:	68bb      	ldr	r3, [r7, #8]
 8002b38:	4313      	orrs	r3, r2
 8002b3a:	697a      	ldr	r2, [r7, #20]
 8002b3c:	4313      	orrs	r3, r2
 8002b3e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002b40:	68fb      	ldr	r3, [r7, #12]
 8002b42:	697a      	ldr	r2, [r7, #20]
 8002b44:	609a      	str	r2, [r3, #8]
}
 8002b46:	bf00      	nop
 8002b48:	371c      	adds	r7, #28
 8002b4a:	46bd      	mov	sp, r7
 8002b4c:	bc80      	pop	{r7}
 8002b4e:	4770      	bx	lr

08002b50 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002b50:	b480      	push	{r7}
 8002b52:	b085      	sub	sp, #20
 8002b54:	af00      	add	r7, sp, #0
 8002b56:	6078      	str	r0, [r7, #4]
 8002b58:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002b60:	2b01      	cmp	r3, #1
 8002b62:	d101      	bne.n	8002b68 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002b64:	2302      	movs	r3, #2
 8002b66:	e041      	b.n	8002bec <HAL_TIMEx_MasterConfigSynchronization+0x9c>
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	2201      	movs	r2, #1
 8002b6c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	2202      	movs	r2, #2
 8002b74:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	685b      	ldr	r3, [r3, #4]
 8002b7e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	689b      	ldr	r3, [r3, #8]
 8002b86:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002b88:	68fb      	ldr	r3, [r7, #12]
 8002b8a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002b8e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002b90:	683b      	ldr	r3, [r7, #0]
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	68fa      	ldr	r2, [r7, #12]
 8002b96:	4313      	orrs	r3, r2
 8002b98:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	68fa      	ldr	r2, [r7, #12]
 8002ba0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	4a14      	ldr	r2, [pc, #80]	; (8002bf8 <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
 8002ba8:	4293      	cmp	r3, r2
 8002baa:	d009      	beq.n	8002bc0 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002bb4:	d004      	beq.n	8002bc0 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	4a10      	ldr	r2, [pc, #64]	; (8002bfc <HAL_TIMEx_MasterConfigSynchronization+0xac>)
 8002bbc:	4293      	cmp	r3, r2
 8002bbe:	d10c      	bne.n	8002bda <HAL_TIMEx_MasterConfigSynchronization+0x8a>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002bc0:	68bb      	ldr	r3, [r7, #8]
 8002bc2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002bc6:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002bc8:	683b      	ldr	r3, [r7, #0]
 8002bca:	685b      	ldr	r3, [r3, #4]
 8002bcc:	68ba      	ldr	r2, [r7, #8]
 8002bce:	4313      	orrs	r3, r2
 8002bd0:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	68ba      	ldr	r2, [r7, #8]
 8002bd8:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	2201      	movs	r2, #1
 8002bde:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	2200      	movs	r2, #0
 8002be6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002bea:	2300      	movs	r3, #0
}
 8002bec:	4618      	mov	r0, r3
 8002bee:	3714      	adds	r7, #20
 8002bf0:	46bd      	mov	sp, r7
 8002bf2:	bc80      	pop	{r7}
 8002bf4:	4770      	bx	lr
 8002bf6:	bf00      	nop
 8002bf8:	40012c00 	.word	0x40012c00
 8002bfc:	40000400 	.word	0x40000400

08002c00 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002c00:	b480      	push	{r7}
 8002c02:	b083      	sub	sp, #12
 8002c04:	af00      	add	r7, sp, #0
 8002c06:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002c08:	bf00      	nop
 8002c0a:	370c      	adds	r7, #12
 8002c0c:	46bd      	mov	sp, r7
 8002c0e:	bc80      	pop	{r7}
 8002c10:	4770      	bx	lr

08002c12 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002c12:	b480      	push	{r7}
 8002c14:	b083      	sub	sp, #12
 8002c16:	af00      	add	r7, sp, #0
 8002c18:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002c1a:	bf00      	nop
 8002c1c:	370c      	adds	r7, #12
 8002c1e:	46bd      	mov	sp, r7
 8002c20:	bc80      	pop	{r7}
 8002c22:	4770      	bx	lr

08002c24 <__libc_init_array>:
 8002c24:	b570      	push	{r4, r5, r6, lr}
 8002c26:	2600      	movs	r6, #0
 8002c28:	4d0c      	ldr	r5, [pc, #48]	; (8002c5c <__libc_init_array+0x38>)
 8002c2a:	4c0d      	ldr	r4, [pc, #52]	; (8002c60 <__libc_init_array+0x3c>)
 8002c2c:	1b64      	subs	r4, r4, r5
 8002c2e:	10a4      	asrs	r4, r4, #2
 8002c30:	42a6      	cmp	r6, r4
 8002c32:	d109      	bne.n	8002c48 <__libc_init_array+0x24>
 8002c34:	f000 f822 	bl	8002c7c <_init>
 8002c38:	2600      	movs	r6, #0
 8002c3a:	4d0a      	ldr	r5, [pc, #40]	; (8002c64 <__libc_init_array+0x40>)
 8002c3c:	4c0a      	ldr	r4, [pc, #40]	; (8002c68 <__libc_init_array+0x44>)
 8002c3e:	1b64      	subs	r4, r4, r5
 8002c40:	10a4      	asrs	r4, r4, #2
 8002c42:	42a6      	cmp	r6, r4
 8002c44:	d105      	bne.n	8002c52 <__libc_init_array+0x2e>
 8002c46:	bd70      	pop	{r4, r5, r6, pc}
 8002c48:	f855 3b04 	ldr.w	r3, [r5], #4
 8002c4c:	4798      	blx	r3
 8002c4e:	3601      	adds	r6, #1
 8002c50:	e7ee      	b.n	8002c30 <__libc_init_array+0xc>
 8002c52:	f855 3b04 	ldr.w	r3, [r5], #4
 8002c56:	4798      	blx	r3
 8002c58:	3601      	adds	r6, #1
 8002c5a:	e7f2      	b.n	8002c42 <__libc_init_array+0x1e>
 8002c5c:	08002cc0 	.word	0x08002cc0
 8002c60:	08002cc0 	.word	0x08002cc0
 8002c64:	08002cc0 	.word	0x08002cc0
 8002c68:	08002cc4 	.word	0x08002cc4

08002c6c <memset>:
 8002c6c:	4603      	mov	r3, r0
 8002c6e:	4402      	add	r2, r0
 8002c70:	4293      	cmp	r3, r2
 8002c72:	d100      	bne.n	8002c76 <memset+0xa>
 8002c74:	4770      	bx	lr
 8002c76:	f803 1b01 	strb.w	r1, [r3], #1
 8002c7a:	e7f9      	b.n	8002c70 <memset+0x4>

08002c7c <_init>:
 8002c7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002c7e:	bf00      	nop
 8002c80:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002c82:	bc08      	pop	{r3}
 8002c84:	469e      	mov	lr, r3
 8002c86:	4770      	bx	lr

08002c88 <_fini>:
 8002c88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002c8a:	bf00      	nop
 8002c8c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002c8e:	bc08      	pop	{r3}
 8002c90:	469e      	mov	lr, r3
 8002c92:	4770      	bx	lr
